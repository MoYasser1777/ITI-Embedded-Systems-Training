
AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000038f4  00003988  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800082  00800082  000039aa  2**0
                  ALLOC
  3 .stab         00003ee8  00000000  00000000  000039ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000190a  00000000  00000000  00007894  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000919e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000092de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000944e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b097  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bf82  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cd30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ce90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d11d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d8eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 33 09 	jmp	0x1266	; 0x1266 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 06 09 	jmp	0x120c	; 0x120c <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 16 10 	jmp	0x202c	; 0x202c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <main>
      8a:	0c 94 78 1c 	jmp	0x38f0	; 0x38f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5d 1c 	jmp	0x38ba	; 0x38ba <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5d 1c 	jmp	0x38ba	; 0x38ba <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MUART_voidInit>:
#include "UART_config.h"
#include "../../Lib/Bit_Maths.h"
#include <util/delay.h>

void MUART_voidInit()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* Enable RX and TX */
		SET_BIT(UCSRB , UCSRB_RXEN);
     b4e:	aa e2       	ldi	r26, 0x2A	; 42
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ea e2       	ldi	r30, 0x2A	; 42
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 61       	ori	r24, 0x10	; 16
     b5a:	8c 93       	st	X, r24
		SET_BIT(UCSRB , UCSRB_TXEN);
     b5c:	aa e2       	ldi	r26, 0x2A	; 42
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ea e2       	ldi	r30, 0x2A	; 42
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	8c 93       	st	X, r24

		/* Set to 8 bit mode
		 * No parity
	 	 * One stop bit */
		UCSRC = 0b10000110  ;
     b6a:	e0 e4       	ldi	r30, 0x40	; 64
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	86 e8       	ldi	r24, 0x86	; 134
     b70:	80 83       	st	Z, r24

		/* Set buad rate to 9600 */
		UBRRL = 51 ;
     b72:	e9 e2       	ldi	r30, 0x29	; 41
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	83 e3       	ldi	r24, 0x33	; 51
     b78:	80 83       	st	Z, r24
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <MUART_voidTransmitData>:
void MUART_voidTransmitData(u8 A_u8Data)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	00 d0       	rcall	.+0      	; 0xb86 <MUART_voidTransmitData+0x6>
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	89 83       	std	Y+1, r24	; 0x01
	//wait for empty transmit buffer
	while (GET_BIT(UCSRA , UCSRA_UDRE) == 0){}
     b8c:	eb e2       	ldi	r30, 0x2B	; 43
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z

	//put data into the buffer (send data)
	UDR = A_u8Data ;
     b92:	ec e2       	ldi	r30, 0x2C	; 44
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	80 83       	st	Z, r24
}
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	cf 91       	pop	r28
     ba0:	df 91       	pop	r29
     ba2:	08 95       	ret

00000ba4 <MUART_u8RecieveData>:
u8 MUART_u8RecieveData ()
{
     ba4:	df 93       	push	r29
     ba6:	cf 93       	push	r28
     ba8:	0f 92       	push	r0
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
	//wait for data to be recieved
	while (GET_BIT(UCSRA , UCSRA_RXC) == 0){}
     bae:	eb e2       	ldi	r30, 0x2B	; 43
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z

	//get and return the return data from buffer
	return UDR ;
     bb4:	ec e2       	ldi	r30, 0x2C	; 44
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z

}
     bba:	0f 90       	pop	r0
     bbc:	cf 91       	pop	r28
     bbe:	df 91       	pop	r29
     bc0:	08 95       	ret

00000bc2 <MUART_voidSetBaudRate>:
void MUART_voidSetBaudRate(u32 A_u32BaudRate)
{
     bc2:	df 93       	push	r29
     bc4:	cf 93       	push	r28
     bc6:	00 d0       	rcall	.+0      	; 0xbc8 <MUART_voidSetBaudRate+0x6>
     bc8:	00 d0       	rcall	.+0      	; 0xbca <MUART_voidSetBaudRate+0x8>
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	69 83       	std	Y+1, r22	; 0x01
     bd0:	7a 83       	std	Y+2, r23	; 0x02
     bd2:	8b 83       	std	Y+3, r24	; 0x03
     bd4:	9c 83       	std	Y+4, r25	; 0x04
	UBRRL=A_u32BaudRate;
     bd6:	e9 e2       	ldi	r30, 0x29	; 41
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	80 83       	st	Z, r24
}
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <MUART_voidSendString>:

void MUART_voidSendString (u8 *A_StrPtr)
{
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	60 97       	sbiw	r28, 0x10	; 16
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	de bf       	out	0x3e, r29	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	cd bf       	out	0x3d, r28	; 61
     c00:	98 8b       	std	Y+16, r25	; 0x10
     c02:	8f 87       	std	Y+15, r24	; 0x0f
     c04:	7d c0       	rjmp	.+250    	; 0xd00 <MUART_voidSendString+0x114>
	while (*A_StrPtr != '\0')
		{
		MUART_voidTransmitData(*A_StrPtr ++);
     c06:	ef 85       	ldd	r30, Y+15	; 0x0f
     c08:	f8 89       	ldd	r31, Y+16	; 0x10
     c0a:	20 81       	ld	r18, Z
     c0c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c0e:	98 89       	ldd	r25, Y+16	; 0x10
     c10:	01 96       	adiw	r24, 0x01	; 1
     c12:	98 8b       	std	Y+16, r25	; 0x10
     c14:	8f 87       	std	Y+15, r24	; 0x0f
     c16:	82 2f       	mov	r24, r18
     c18:	0e 94 c0 05 	call	0xb80	; 0xb80 <MUART_voidTransmitData>
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a8 e4       	ldi	r26, 0x48	; 72
     c22:	b3 e4       	ldi	r27, 0x43	; 67
     c24:	8b 87       	std	Y+11, r24	; 0x0b
     c26:	9c 87       	std	Y+12, r25	; 0x0c
     c28:	ad 87       	std	Y+13, r26	; 0x0d
     c2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     c2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     c30:	8d 85       	ldd	r24, Y+13	; 0x0d
     c32:	9e 85       	ldd	r25, Y+14	; 0x0e
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	4a e7       	ldi	r20, 0x7A	; 122
     c3a:	53 e4       	ldi	r21, 0x43	; 67
     c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c40:	dc 01       	movw	r26, r24
     c42:	cb 01       	movw	r24, r22
     c44:	8f 83       	std	Y+7, r24	; 0x07
     c46:	98 87       	std	Y+8, r25	; 0x08
     c48:	a9 87       	std	Y+9, r26	; 0x09
     c4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c4c:	6f 81       	ldd	r22, Y+7	; 0x07
     c4e:	78 85       	ldd	r23, Y+8	; 0x08
     c50:	89 85       	ldd	r24, Y+9	; 0x09
     c52:	9a 85       	ldd	r25, Y+10	; 0x0a
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	40 e8       	ldi	r20, 0x80	; 128
     c5a:	5f e3       	ldi	r21, 0x3F	; 63
     c5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c60:	88 23       	and	r24, r24
     c62:	2c f4       	brge	.+10     	; 0xc6e <MUART_voidSendString+0x82>
		__ticks = 1;
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	9e 83       	std	Y+6, r25	; 0x06
     c6a:	8d 83       	std	Y+5, r24	; 0x05
     c6c:	3f c0       	rjmp	.+126    	; 0xcec <MUART_voidSendString+0x100>
	else if (__tmp > 65535)
     c6e:	6f 81       	ldd	r22, Y+7	; 0x07
     c70:	78 85       	ldd	r23, Y+8	; 0x08
     c72:	89 85       	ldd	r24, Y+9	; 0x09
     c74:	9a 85       	ldd	r25, Y+10	; 0x0a
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	3f ef       	ldi	r19, 0xFF	; 255
     c7a:	4f e7       	ldi	r20, 0x7F	; 127
     c7c:	57 e4       	ldi	r21, 0x47	; 71
     c7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c82:	18 16       	cp	r1, r24
     c84:	4c f5       	brge	.+82     	; 0xcd8 <MUART_voidSendString+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c86:	6b 85       	ldd	r22, Y+11	; 0x0b
     c88:	7c 85       	ldd	r23, Y+12	; 0x0c
     c8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	40 e2       	ldi	r20, 0x20	; 32
     c94:	51 e4       	ldi	r21, 0x41	; 65
     c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c9a:	dc 01       	movw	r26, r24
     c9c:	cb 01       	movw	r24, r22
     c9e:	bc 01       	movw	r22, r24
     ca0:	cd 01       	movw	r24, r26
     ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	9e 83       	std	Y+6, r25	; 0x06
     cac:	8d 83       	std	Y+5, r24	; 0x05
     cae:	0f c0       	rjmp	.+30     	; 0xcce <MUART_voidSendString+0xe2>
     cb0:	89 e1       	ldi	r24, 0x19	; 25
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	9c 83       	std	Y+4, r25	; 0x04
     cb6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	9c 81       	ldd	r25, Y+4	; 0x04
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <MUART_voidSendString+0xd0>
     cc0:	9c 83       	std	Y+4, r25	; 0x04
     cc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cc4:	8d 81       	ldd	r24, Y+5	; 0x05
     cc6:	9e 81       	ldd	r25, Y+6	; 0x06
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	9e 83       	std	Y+6, r25	; 0x06
     ccc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cce:	8d 81       	ldd	r24, Y+5	; 0x05
     cd0:	9e 81       	ldd	r25, Y+6	; 0x06
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	69 f7       	brne	.-38     	; 0xcb0 <MUART_voidSendString+0xc4>
     cd6:	14 c0       	rjmp	.+40     	; 0xd00 <MUART_voidSendString+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cd8:	6f 81       	ldd	r22, Y+7	; 0x07
     cda:	78 85       	ldd	r23, Y+8	; 0x08
     cdc:	89 85       	ldd	r24, Y+9	; 0x09
     cde:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ce4:	dc 01       	movw	r26, r24
     ce6:	cb 01       	movw	r24, r22
     ce8:	9e 83       	std	Y+6, r25	; 0x06
     cea:	8d 83       	std	Y+5, r24	; 0x05
     cec:	8d 81       	ldd	r24, Y+5	; 0x05
     cee:	9e 81       	ldd	r25, Y+6	; 0x06
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	f1 f7       	brne	.-4      	; 0xcf8 <MUART_voidSendString+0x10c>
     cfc:	9a 83       	std	Y+2, r25	; 0x02
     cfe:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=A_u32BaudRate;
}

void MUART_voidSendString (u8 *A_StrPtr)
{
	while (*A_StrPtr != '\0')
     d00:	ef 85       	ldd	r30, Y+15	; 0x0f
     d02:	f8 89       	ldd	r31, Y+16	; 0x10
     d04:	80 81       	ld	r24, Z
     d06:	88 23       	and	r24, r24
     d08:	09 f0       	breq	.+2      	; 0xd0c <MUART_voidSendString+0x120>
     d0a:	7d cf       	rjmp	.-262    	; 0xc06 <MUART_voidSendString+0x1a>
		{
		MUART_voidTransmitData(*A_StrPtr ++);
		_delay_ms(200);
		}
}
     d0c:	60 96       	adiw	r28, 0x10	; 16
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	08 95       	ret

00000d1e <MUART_voidRecieveString>:
u8* MUART_voidRecieveString ()
{
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	e4 97       	sbiw	r28, 0x34	; 52
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
	u8 ReceivedString[50]; // max length=50 chars
	u8 i = 0;
     d32:	1a 82       	std	Y+2, r1	; 0x02
	u8 ReceivedChar;

	do {
		ReceivedChar = MUART_u8RecieveData();
     d34:	0e 94 d2 05 	call	0xba4	; 0xba4 <MUART_u8RecieveData>
     d38:	89 83       	std	Y+1, r24	; 0x01

		if (ReceivedChar != '\r' && ReceivedChar != '\n')
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	8d 30       	cpi	r24, 0x0D	; 13
     d3e:	81 f0       	breq	.+32     	; 0xd60 <MUART_voidRecieveString+0x42>
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	8a 30       	cpi	r24, 0x0A	; 10
     d44:	69 f0       	breq	.+26     	; 0xd60 <MUART_voidRecieveString+0x42>
		{
			ReceivedString[i] = ReceivedChar;
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	ce 01       	movw	r24, r28
     d4e:	03 96       	adiw	r24, 0x03	; 3
     d50:	fc 01       	movw	r30, r24
     d52:	e2 0f       	add	r30, r18
     d54:	f3 1f       	adc	r31, r19
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	80 83       	st	Z, r24
			i++;
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	8f 5f       	subi	r24, 0xFF	; 255
     d5e:	8a 83       	std	Y+2, r24	; 0x02
		}
	} while (ReceivedChar != '\r');
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	8d 30       	cpi	r24, 0x0D	; 13
     d64:	39 f7       	brne	.-50     	; 0xd34 <MUART_voidRecieveString+0x16>

	ReceivedString[i] = '\0';
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	ce 01       	movw	r24, r28
     d6e:	03 96       	adiw	r24, 0x03	; 3
     d70:	fc 01       	movw	r30, r24
     d72:	e2 0f       	add	r30, r18
     d74:	f3 1f       	adc	r31, r19
     d76:	10 82       	st	Z, r1
	return ReceivedString;
     d78:	ce 01       	movw	r24, r28
     d7a:	03 96       	adiw	r24, 0x03	; 3
}
     d7c:	e4 96       	adiw	r28, 0x34	; 52
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <MUART_voidSendNumber>:

void MUART_voidSendNumber(u32 A_u32Number)
{
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	61 97       	sbiw	r28, 0x11	; 17
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	6e 87       	std	Y+14, r22	; 0x0e
     da4:	7f 87       	std	Y+15, r23	; 0x0f
     da6:	88 8b       	std	Y+16, r24	; 0x10
     da8:	99 8b       	std	Y+17, r25	; 0x11
	if (A_u32Number == 0) {
     daa:	8e 85       	ldd	r24, Y+14	; 0x0e
     dac:	9f 85       	ldd	r25, Y+15	; 0x0f
     dae:	a8 89       	ldd	r26, Y+16	; 0x10
     db0:	b9 89       	ldd	r27, Y+17	; 0x11
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	a1 05       	cpc	r26, r1
     db6:	b1 05       	cpc	r27, r1
     db8:	21 f4       	brne	.+8      	; 0xdc2 <MUART_voidSendNumber+0x34>
	        MUART_voidTransmitData('0');
     dba:	80 e3       	ldi	r24, 0x30	; 48
     dbc:	0e 94 c0 05 	call	0xb80	; 0xb80 <MUART_voidTransmitData>
     dc0:	4c c0       	rjmp	.+152    	; 0xe5a <MUART_voidSendNumber+0xcc>
	        return;
	    }

	    u8 NumberString[11];
	    u8 i = 0;
     dc2:	1a 82       	std	Y+2, r1	; 0x02
     dc4:	30 c0       	rjmp	.+96     	; 0xe26 <MUART_voidSendNumber+0x98>

	    while (A_u32Number > 0) {
	        u8 digit = A_u32Number % 10;
     dc6:	8e 85       	ldd	r24, Y+14	; 0x0e
     dc8:	9f 85       	ldd	r25, Y+15	; 0x0f
     dca:	a8 89       	ldd	r26, Y+16	; 0x10
     dcc:	b9 89       	ldd	r27, Y+17	; 0x11
     dce:	2a e0       	ldi	r18, 0x0A	; 10
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	bc 01       	movw	r22, r24
     dd8:	cd 01       	movw	r24, r26
     dda:	0e 94 04 1c 	call	0x3808	; 0x3808 <__udivmodsi4>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	89 83       	std	Y+1, r24	; 0x01
	        NumberString[i] = digit + '0';
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	48 2f       	mov	r20, r24
     dee:	40 5d       	subi	r20, 0xD0	; 208
     df0:	ce 01       	movw	r24, r28
     df2:	03 96       	adiw	r24, 0x03	; 3
     df4:	fc 01       	movw	r30, r24
     df6:	e2 0f       	add	r30, r18
     df8:	f3 1f       	adc	r31, r19
     dfa:	40 83       	st	Z, r20
	        A_u32Number /= 10;
     dfc:	8e 85       	ldd	r24, Y+14	; 0x0e
     dfe:	9f 85       	ldd	r25, Y+15	; 0x0f
     e00:	a8 89       	ldd	r26, Y+16	; 0x10
     e02:	b9 89       	ldd	r27, Y+17	; 0x11
     e04:	2a e0       	ldi	r18, 0x0A	; 10
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e0       	ldi	r20, 0x00	; 0
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	bc 01       	movw	r22, r24
     e0e:	cd 01       	movw	r24, r26
     e10:	0e 94 04 1c 	call	0x3808	; 0x3808 <__udivmodsi4>
     e14:	da 01       	movw	r26, r20
     e16:	c9 01       	movw	r24, r18
     e18:	8e 87       	std	Y+14, r24	; 0x0e
     e1a:	9f 87       	std	Y+15, r25	; 0x0f
     e1c:	a8 8b       	std	Y+16, r26	; 0x10
     e1e:	b9 8b       	std	Y+17, r27	; 0x11
	        i++;
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	8a 83       	std	Y+2, r24	; 0x02
	    }

	    u8 NumberString[11];
	    u8 i = 0;

	    while (A_u32Number > 0) {
     e26:	8e 85       	ldd	r24, Y+14	; 0x0e
     e28:	9f 85       	ldd	r25, Y+15	; 0x0f
     e2a:	a8 89       	ldd	r26, Y+16	; 0x10
     e2c:	b9 89       	ldd	r27, Y+17	; 0x11
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	a1 05       	cpc	r26, r1
     e32:	b1 05       	cpc	r27, r1
     e34:	41 f6       	brne	.-112    	; 0xdc6 <MUART_voidSendNumber+0x38>
     e36:	0e c0       	rjmp	.+28     	; 0xe54 <MUART_voidSendNumber+0xc6>
	        A_u32Number /= 10;
	        i++;
	    }

	    while (i > 0) {
	        i--;
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	81 50       	subi	r24, 0x01	; 1
     e3c:	8a 83       	std	Y+2, r24	; 0x02
	        MUART_voidTransmitData(NumberString[i]);
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	ce 01       	movw	r24, r28
     e46:	03 96       	adiw	r24, 0x03	; 3
     e48:	fc 01       	movw	r30, r24
     e4a:	e2 0f       	add	r30, r18
     e4c:	f3 1f       	adc	r31, r19
     e4e:	80 81       	ld	r24, Z
     e50:	0e 94 c0 05 	call	0xb80	; 0xb80 <MUART_voidTransmitData>
	        NumberString[i] = digit + '0';
	        A_u32Number /= 10;
	        i++;
	    }

	    while (i > 0) {
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	88 23       	and	r24, r24
     e58:	79 f7       	brne	.-34     	; 0xe38 <MUART_voidSendNumber+0xaa>
	        i--;
	        MUART_voidTransmitData(NumberString[i]);
	    }
}
     e5a:	61 96       	adiw	r28, 0x11	; 17
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <MTIMR1_voidTimer1Init>:

#include "TIMER1_PWM.h"
#include "TIMER1_PWM_private.h"

void MTIMR1_voidTimer1Init()
{
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
	/* Select Mode : fast pwm */
	CLR_BIT(TCCR1A , TCCR1A_WGM10);
     e74:	af e4       	ldi	r26, 0x4F	; 79
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	ef e4       	ldi	r30, 0x4F	; 79
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8e 7f       	andi	r24, 0xFE	; 254
     e80:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , TCCR1A_WGM11);
     e82:	af e4       	ldi	r26, 0x4F	; 79
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	ef e4       	ldi	r30, 0x4F	; 79
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	82 60       	ori	r24, 0x02	; 2
     e8e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , TCCR1B_WGM12);
     e90:	ae e4       	ldi	r26, 0x4E	; 78
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ee e4       	ldi	r30, 0x4E	; 78
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	88 60       	ori	r24, 0x08	; 8
     e9c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , TCCR1B_WGM13);
     e9e:	ae e4       	ldi	r26, 0x4E	; 78
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ee e4       	ldi	r30, 0x4E	; 78
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	80 61       	ori	r24, 0x10	; 16
     eaa:	8c 93       	st	X, r24

	/* Choose non inverting mode */
	SET_BIT(TCCR1A , TCCR1A_COM1A1);
     eac:	af e4       	ldi	r26, 0x4F	; 79
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	ef e4       	ldi	r30, 0x4F	; 79
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	80 68       	ori	r24, 0x80	; 128
     eb8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , TCCR1A_COM1A0);
     eba:	af e4       	ldi	r26, 0x4F	; 79
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	ef e4       	ldi	r30, 0x4F	; 79
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	8f 7b       	andi	r24, 0xBF	; 191
     ec6:	8c 93       	st	X, r24

	/* Choose Prescaler to 8
	 * Every tick will take 1 us */
	CLR_BIT(TCCR1B , TCCR1B_CS10);
     ec8:	ae e4       	ldi	r26, 0x4E	; 78
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	ee e4       	ldi	r30, 0x4E	; 78
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	8e 7f       	andi	r24, 0xFE	; 254
     ed4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , TCCR1B_CS11);
     ed6:	ae e4       	ldi	r26, 0x4E	; 78
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	ee e4       	ldi	r30, 0x4E	; 78
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	82 60       	ori	r24, 0x02	; 2
     ee2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , TCCR1B_CS12);
     ee4:	ae e4       	ldi	r26, 0x4E	; 78
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	ee e4       	ldi	r30, 0x4E	; 78
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8b 7f       	andi	r24, 0xFB	; 251
     ef0:	8c 93       	st	X, r24
}
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <MTIMR1_voidSetICR>:

void MTIMR1_voidSetICR(u16 A_u16value)
{
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	00 d0       	rcall	.+0      	; 0xefe <MTIMR1_voidSetICR+0x6>
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 83       	std	Y+1, r24	; 0x01
	ICR1 =A_u16value;
     f06:	e6 e4       	ldi	r30, 0x46	; 70
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	91 83       	std	Z+1, r25	; 0x01
     f10:	80 83       	st	Z, r24
}
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <MTIMR1_voidTimer1SetCompMatchA>:

void MTIMR1_voidTimer1SetCompMatchA(u16 A_u16value)
{
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	00 d0       	rcall	.+0      	; 0xf22 <MTIMR1_voidTimer1SetCompMatchA+0x6>
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = A_u16value;
     f2a:	ea e4       	ldi	r30, 0x4A	; 74
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	9a 81       	ldd	r25, Y+2	; 0x02
     f32:	91 83       	std	Z+1, r25	; 0x01
     f34:	80 83       	st	Z, r24
}
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <MTIMR1_voidTimer1SetCompMatchB>:

void MTIMR1_voidTimer1SetCompMatchB(u16 A_u16value)
{
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	00 d0       	rcall	.+0      	; 0xf46 <MTIMR1_voidTimer1SetCompMatchB+0x6>
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	9a 83       	std	Y+2, r25	; 0x02
     f4c:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = A_u16value;
     f4e:	e8 e4       	ldi	r30, 0x48	; 72
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	9a 81       	ldd	r25, Y+2	; 0x02
     f56:	91 83       	std	Z+1, r25	; 0x01
     f58:	80 83       	st	Z, r24
}
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <MTIMER_voidInit>:
volatile u32 G_u16OverFlowCount;

static void (*PvoidFuncCallBack[3])(void);

void MTIMER_voidInit(u8 A_u8TimerNum)
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	0f 92       	push	r0
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	89 83       	std	Y+1, r24	; 0x01
	if (A_u8TimerNum==0){
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	88 23       	and	r24, r24
     f74:	e9 f4       	brne	.+58     	; 0xfb0 <MTIMER_voidInit+0x4c>
		else if(	TIMER_WaveGenerationMODE == TIMER_WaveGenerationMODE_CTC){
			CLR_BIT(TIMER_TCCR0,TIMER_TIMER0_TCCR0_WGM00);
			SET_BIT(TIMER_TCCR0,TIMER_TIMER0_TCCR0_WGM01);
		}
		else if(	TIMER_WaveGenerationMODE == TIMER_WaveGenerationMODE_FASTPWM){
			SET_BIT(TIMER_TCCR0,TIMER_TIMER0_TCCR0_WGM00);
     f76:	a3 e5       	ldi	r26, 0x53	; 83
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e3 e5       	ldi	r30, 0x53	; 83
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	80 64       	ori	r24, 0x40	; 64
     f82:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR0,TIMER_TIMER0_TCCR0_WGM01);
     f84:	a3 e5       	ldi	r26, 0x53	; 83
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e3 e5       	ldi	r30, 0x53	; 83
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	88 60       	ori	r24, 0x08	; 8
     f90:	8c 93       	st	X, r24

			if (TIMER_OutputCompareMODE_FastPWM ==TIMER_OutputCompareMODE_FastPWM_CLEAR){
			CLR_BIT(TIMER_TCCR0,TIMER_TIMER0_TCCR0_COM00);
     f92:	a3 e5       	ldi	r26, 0x53	; 83
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e3 e5       	ldi	r30, 0x53	; 83
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	8f 7e       	andi	r24, 0xEF	; 239
     f9e:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR0,TIMER_TIMER0_TCCR0_COM01);
     fa0:	a3 e5       	ldi	r26, 0x53	; 83
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e3 e5       	ldi	r30, 0x53	; 83
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	80 62       	ori	r24, 0x20	; 32
     fac:	8c 93       	st	X, r24
     fae:	1f c0       	rjmp	.+62     	; 0xfee <MTIMER_voidInit+0x8a>
			SET_BIT(TIMER_TCCR0,TIMER_TIMER0_TCCR0_COM00);
			SET_BIT(TIMER_TCCR0,TIMER_TIMER0_TCCR0_COM01);
			}
		}
}
	else if (A_u8TimerNum==2)
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	82 30       	cpi	r24, 0x02	; 2
     fb4:	e1 f4       	brne	.+56     	; 0xfee <MTIMER_voidInit+0x8a>
				else if(	TIMER_WaveGenerationMODE == TIMER_WaveGenerationMODE_CTC){
					CLR_BIT(TIMER_TCCR2,TIMER_TIMER2_TCCR2_WGM20);
					SET_BIT(TIMER_TCCR2,TIMER_TIMER2_TCCR2_WGM21);
				}
				else if(	TIMER_WaveGenerationMODE == TIMER_WaveGenerationMODE_FASTPWM){
					SET_BIT(TIMER_TCCR2,TIMER_TIMER2_TCCR2_WGM20);
     fb6:	a5 e4       	ldi	r26, 0x45	; 69
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e5 e4       	ldi	r30, 0x45	; 69
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	80 64       	ori	r24, 0x40	; 64
     fc2:	8c 93       	st	X, r24
					SET_BIT(TIMER_TCCR2,TIMER_TIMER2_TCCR2_WGM21);
     fc4:	a5 e4       	ldi	r26, 0x45	; 69
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e5 e4       	ldi	r30, 0x45	; 69
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	88 60       	ori	r24, 0x08	; 8
     fd0:	8c 93       	st	X, r24

					if (TIMER_OutputCompareMODE_FastPWM ==TIMER_OutputCompareMODE_FastPWM_CLEAR){
					CLR_BIT(TIMER_TCCR2,TIMER_TIMER2_TCCR2_COM20);
     fd2:	a5 e4       	ldi	r26, 0x45	; 69
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e5 e4       	ldi	r30, 0x45	; 69
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8f 7e       	andi	r24, 0xEF	; 239
     fde:	8c 93       	st	X, r24
					SET_BIT(TIMER_TCCR2,TIMER_TIMER2_TCCR2_COM21);
     fe0:	a5 e4       	ldi	r26, 0x45	; 69
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e5 e4       	ldi	r30, 0x45	; 69
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	80 62       	ori	r24, 0x20	; 32
     fec:	8c 93       	st	X, r24
					SET_BIT(TIMER_TCCR2,TIMER_TIMER2_TCCR2_COM20);
					SET_BIT(TIMER_TCCR2,TIMER_TIMER2_TCCR2_COM21);
					}
				}
	}
}
     fee:	0f 90       	pop	r0
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	08 95       	ret

00000ff6 <MTIMER_voidStart>:




void MTIMER_voidStart(u8 A_u8TimerNum)
{
     ff6:	df 93       	push	r29
     ff8:	cf 93       	push	r28
     ffa:	00 d0       	rcall	.+0      	; 0xffc <MTIMER_voidStart+0x6>
     ffc:	0f 92       	push	r0
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	89 83       	std	Y+1, r24	; 0x01
	//pre scalar
	switch(A_u8TimerNum)
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	3b 83       	std	Y+3, r19	; 0x03
    100c:	2a 83       	std	Y+2, r18	; 0x02
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	9b 81       	ldd	r25, Y+3	; 0x03
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	31 f0       	breq	.+12     	; 0x1022 <MTIMER_voidStart+0x2c>
    1016:	2a 81       	ldd	r18, Y+2	; 0x02
    1018:	3b 81       	ldd	r19, Y+3	; 0x03
    101a:	22 30       	cpi	r18, 0x02	; 2
    101c:	31 05       	cpc	r19, r1
    101e:	51 f0       	breq	.+20     	; 0x1034 <MTIMER_voidStart+0x3e>
    1020:	11 c0       	rjmp	.+34     	; 0x1044 <MTIMER_voidStart+0x4e>
	{
	case 0:
	         TIMER_TCCR0= (TIMER_TCCR0 & 0xf8) | (TIMER_PRESCALER & 0x07);
    1022:	a3 e5       	ldi	r26, 0x53	; 83
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e3 e5       	ldi	r30, 0x53	; 83
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	88 7f       	andi	r24, 0xF8	; 248
    102e:	83 60       	ori	r24, 0x03	; 3
    1030:	8c 93       	st	X, r24
    1032:	08 c0       	rjmp	.+16     	; 0x1044 <MTIMER_voidStart+0x4e>
	         break;
	case 2:
			 TIMER_TCCR2= (TIMER_TCCR2 & 0xf8) | (TIMER_PRESCALER & 0x07);
    1034:	a5 e4       	ldi	r26, 0x45	; 69
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e5 e4       	ldi	r30, 0x45	; 69
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	88 7f       	andi	r24, 0xF8	; 248
    1040:	83 60       	ori	r24, 0x03	; 3
    1042:	8c 93       	st	X, r24
			 break;
	}
}
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <MTIMR_voidSetCompareMatch>:

void MTIMR_voidSetCompareMatch(u8 A_u8TimerNum,u8 A_u8Value)
{
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	00 d0       	rcall	.+0      	; 0x1056 <MTIMR_voidSetCompareMatch+0x6>
    1056:	00 d0       	rcall	.+0      	; 0x1058 <MTIMR_voidSetCompareMatch+0x8>
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	89 83       	std	Y+1, r24	; 0x01
    105e:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8TimerNum){
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	3c 83       	std	Y+4, r19	; 0x04
    1068:	2b 83       	std	Y+3, r18	; 0x03
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	9c 81       	ldd	r25, Y+4	; 0x04
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	31 f0       	breq	.+12     	; 0x107e <MTIMR_voidSetCompareMatch+0x2e>
    1072:	2b 81       	ldd	r18, Y+3	; 0x03
    1074:	3c 81       	ldd	r19, Y+4	; 0x04
    1076:	22 30       	cpi	r18, 0x02	; 2
    1078:	31 05       	cpc	r19, r1
    107a:	31 f0       	breq	.+12     	; 0x1088 <MTIMR_voidSetCompareMatch+0x38>
    107c:	09 c0       	rjmp	.+18     	; 0x1090 <MTIMR_voidSetCompareMatch+0x40>
	case TIMER_TIMER0:
		TIMER_OCR0=A_u8Value;
    107e:	ec e5       	ldi	r30, 0x5C	; 92
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	80 83       	st	Z, r24
    1086:	04 c0       	rjmp	.+8      	; 0x1090 <MTIMR_voidSetCompareMatch+0x40>
		break;

	case TIMER_TIMER2:
		TIMER_OCR2=A_u8Value;
    1088:	e3 e4       	ldi	r30, 0x43	; 67
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	80 83       	st	Z, r24
		break;
	}
}
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <MTIMER_voidEnable>:
void MTIMER_voidEnable(u8 A_u8TimerNumber)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <MTIMER_voidEnable+0x6>
    10a4:	0f 92       	push	r0
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8TimerNumber)
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	3b 83       	std	Y+3, r19	; 0x03
    10b4:	2a 83       	std	Y+2, r18	; 0x02
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	91 05       	cpc	r25, r1
    10be:	31 f1       	breq	.+76     	; 0x110c <MTIMER_voidEnable+0x6e>
    10c0:	2a 81       	ldd	r18, Y+2	; 0x02
    10c2:	3b 81       	ldd	r19, Y+3	; 0x03
    10c4:	22 30       	cpi	r18, 0x02	; 2
    10c6:	31 05       	cpc	r19, r1
    10c8:	99 f0       	breq	.+38     	; 0x10f0 <MTIMER_voidEnable+0x52>
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	9b 81       	ldd	r25, Y+3	; 0x03
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	e9 f4       	brne	.+58     	; 0x110c <MTIMER_voidEnable+0x6e>
		{
		case 0:
			//enable
			SET_BIT(TIMER_TIMSK,0);
    10d2:	a9 e5       	ldi	r26, 0x59	; 89
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e9 e5       	ldi	r30, 0x59	; 89
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	81 60       	ori	r24, 0x01	; 1
    10de:	8c 93       	st	X, r24
			SET_BIT(TIMER_TIMSK,1);
    10e0:	a9 e5       	ldi	r26, 0x59	; 89
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e9 e5       	ldi	r30, 0x59	; 89
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	82 60       	ori	r24, 0x02	; 2
    10ec:	8c 93       	st	X, r24
    10ee:	0e c0       	rjmp	.+28     	; 0x110c <MTIMER_voidEnable+0x6e>

		case 1:
			break;

		case 2:
			SET_BIT(TIMER_TIMSK,6);
    10f0:	a9 e5       	ldi	r26, 0x59	; 89
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e9 e5       	ldi	r30, 0x59	; 89
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	80 64       	ori	r24, 0x40	; 64
    10fc:	8c 93       	st	X, r24
			SET_BIT(TIMER_TIMSK,7);
    10fe:	a9 e5       	ldi	r26, 0x59	; 89
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e9 e5       	ldi	r30, 0x59	; 89
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	80 68       	ori	r24, 0x80	; 128
    110a:	8c 93       	st	X, r24
			break;
		}
}
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <MTIMER_voidDisable>:

void MTIMER_voidDisable(u8 A_u8TimerNumber)
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	0f 92       	push	r0
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8TimerNumber)
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	39 f4       	brne	.+14     	; 0x113c <MTIMER_voidDisable+0x24>
			{
			case 0:
				//disable
				CLR_BIT(TIMER_TIMSK,0);
    112e:	a9 e5       	ldi	r26, 0x59	; 89
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e9 e5       	ldi	r30, 0x59	; 89
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	8e 7f       	andi	r24, 0xFE	; 254
    113a:	8c 93       	st	X, r24
				break;

			case 2:
				break;
			}
}
    113c:	0f 90       	pop	r0
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <MTIMER_voidSetPreLoad>:

void MTIMER_voidSetPreLoad(u8 A_u8PreLoad)
{
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	0f 92       	push	r0
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	89 83       	std	Y+1, r24	; 0x01
	//preload
	TIMER_TCNT0= A_u8PreLoad;
    1150:	e2 e5       	ldi	r30, 0x52	; 82
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	80 83       	st	Z, r24
}
    1158:	0f 90       	pop	r0
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <MTIMER_voidSetCounts>:

void MTIMER_voidSetCounts(u32 A_u8Counts)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	00 d0       	rcall	.+0      	; 0x1166 <MTIMER_voidSetCounts+0x6>
    1166:	00 d0       	rcall	.+0      	; 0x1168 <MTIMER_voidSetCounts+0x8>
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	69 83       	std	Y+1, r22	; 0x01
    116e:	7a 83       	std	Y+2, r23	; 0x02
    1170:	8b 83       	std	Y+3, r24	; 0x03
    1172:	9c 83       	std	Y+4, r25	; 0x04
	G_u16OverFlowCount=A_u8Counts;
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	9a 81       	ldd	r25, Y+2	; 0x02
    1178:	ab 81       	ldd	r26, Y+3	; 0x03
    117a:	bc 81       	ldd	r27, Y+4	; 0x04
    117c:	80 93 8a 00 	sts	0x008A, r24
    1180:	90 93 8b 00 	sts	0x008B, r25
    1184:	a0 93 8c 00 	sts	0x008C, r26
    1188:	b0 93 8d 00 	sts	0x008D, r27
}
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <MTimer_voidSetCallBack>:

void MTimer_voidSetCallBack(u8 A_u8TimerNumber, void (*A_FuncPtr)(void))
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <MTimer_voidSetCallBack+0x6>
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <MTimer_voidSetCallBack+0x8>
    11a2:	0f 92       	push	r0
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	89 83       	std	Y+1, r24	; 0x01
    11aa:	7b 83       	std	Y+3, r23	; 0x03
    11ac:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8TimerNumber)
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	3d 83       	std	Y+5, r19	; 0x05
    11b6:	2c 83       	std	Y+4, r18	; 0x04
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	9d 81       	ldd	r25, Y+5	; 0x05
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	91 05       	cpc	r25, r1
    11c0:	81 f0       	breq	.+32     	; 0x11e2 <MTimer_voidSetCallBack+0x48>
    11c2:	2c 81       	ldd	r18, Y+4	; 0x04
    11c4:	3d 81       	ldd	r19, Y+5	; 0x05
    11c6:	22 30       	cpi	r18, 0x02	; 2
    11c8:	31 05       	cpc	r19, r1
    11ca:	91 f0       	breq	.+36     	; 0x11f0 <MTimer_voidSetCallBack+0x56>
    11cc:	8c 81       	ldd	r24, Y+4	; 0x04
    11ce:	9d 81       	ldd	r25, Y+5	; 0x05
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	a1 f4       	brne	.+40     	; 0x11fc <MTimer_voidSetCallBack+0x62>
		{
		case 0:
			PvoidFuncCallBack[0] = A_FuncPtr;
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	9b 81       	ldd	r25, Y+3	; 0x03
    11d8:	90 93 85 00 	sts	0x0085, r25
    11dc:	80 93 84 00 	sts	0x0084, r24
    11e0:	0d c0       	rjmp	.+26     	; 0x11fc <MTimer_voidSetCallBack+0x62>
			break;

		case 1:
			PvoidFuncCallBack[1] = A_FuncPtr;
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	9b 81       	ldd	r25, Y+3	; 0x03
    11e6:	90 93 87 00 	sts	0x0087, r25
    11ea:	80 93 86 00 	sts	0x0086, r24
    11ee:	06 c0       	rjmp	.+12     	; 0x11fc <MTimer_voidSetCallBack+0x62>
			break;

		case 2:
			PvoidFuncCallBack[2] = A_FuncPtr;
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	9b 81       	ldd	r25, Y+3	; 0x03
    11f4:	90 93 89 00 	sts	0x0089, r25
    11f8:	80 93 88 00 	sts	0x0088, r24
			break;
		}

}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <__vector_10>:
//		PvoidFuncCallBack[0]();
//	}
//}
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    120c:	1f 92       	push	r1
    120e:	0f 92       	push	r0
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	0f 92       	push	r0
    1214:	11 24       	eor	r1, r1
    1216:	2f 93       	push	r18
    1218:	3f 93       	push	r19
    121a:	4f 93       	push	r20
    121c:	5f 93       	push	r21
    121e:	6f 93       	push	r22
    1220:	7f 93       	push	r23
    1222:	8f 93       	push	r24
    1224:	9f 93       	push	r25
    1226:	af 93       	push	r26
    1228:	bf 93       	push	r27
    122a:	ef 93       	push	r30
    122c:	ff 93       	push	r31
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62

	PvoidFuncCallBack[0]();
    1236:	e0 91 84 00 	lds	r30, 0x0084
    123a:	f0 91 85 00 	lds	r31, 0x0085
    123e:	09 95       	icall
}
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	ff 91       	pop	r31
    1246:	ef 91       	pop	r30
    1248:	bf 91       	pop	r27
    124a:	af 91       	pop	r26
    124c:	9f 91       	pop	r25
    124e:	8f 91       	pop	r24
    1250:	7f 91       	pop	r23
    1252:	6f 91       	pop	r22
    1254:	5f 91       	pop	r21
    1256:	4f 91       	pop	r20
    1258:	3f 91       	pop	r19
    125a:	2f 91       	pop	r18
    125c:	0f 90       	pop	r0
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	0f 90       	pop	r0
    1262:	1f 90       	pop	r1
    1264:	18 95       	reti

00001266 <__vector_4>:

void __vector_4 (void) __attribute__((signal));
void __vector_4 (void)
{
    1266:	1f 92       	push	r1
    1268:	0f 92       	push	r0
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	0f 92       	push	r0
    126e:	11 24       	eor	r1, r1
    1270:	2f 93       	push	r18
    1272:	3f 93       	push	r19
    1274:	4f 93       	push	r20
    1276:	5f 93       	push	r21
    1278:	6f 93       	push	r22
    127a:	7f 93       	push	r23
    127c:	8f 93       	push	r24
    127e:	9f 93       	push	r25
    1280:	af 93       	push	r26
    1282:	bf 93       	push	r27
    1284:	ef 93       	push	r30
    1286:	ff 93       	push	r31
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62

	PvoidFuncCallBack[2]();
    1290:	e0 91 88 00 	lds	r30, 0x0088
    1294:	f0 91 89 00 	lds	r31, 0x0089
    1298:	09 95       	icall
}
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	ff 91       	pop	r31
    12a0:	ef 91       	pop	r30
    12a2:	bf 91       	pop	r27
    12a4:	af 91       	pop	r26
    12a6:	9f 91       	pop	r25
    12a8:	8f 91       	pop	r24
    12aa:	7f 91       	pop	r23
    12ac:	6f 91       	pop	r22
    12ae:	5f 91       	pop	r21
    12b0:	4f 91       	pop	r20
    12b2:	3f 91       	pop	r19
    12b4:	2f 91       	pop	r18
    12b6:	0f 90       	pop	r0
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	0f 90       	pop	r0
    12bc:	1f 90       	pop	r1
    12be:	18 95       	reti

000012c0 <SPI_MasterInit>:
#include "../DIO/DIO.h"
#include "../../Lib/defines.h"
#include "../../Lib/Bit_Maths.h"

void SPI_MasterInit(void)
{
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
/* Set MOSI and SCK output, all others input */
MDIO_voidSetPortDirection(PORTB,INPUT);
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <MDIO_voidSetPortDirection>
MDIO_voidSetPinDirection(PORTB,PIN5,OUTPUT);
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	65 e0       	ldi	r22, 0x05	; 5
    12d4:	41 e0       	ldi	r20, 0x01	; 1
    12d6:	0e 94 2b 0b 	call	0x1656	; 0x1656 <MDIO_voidSetPinDirection>
MDIO_voidSetPinDirection(PORTB,PIN7,OUTPUT);
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	67 e0       	ldi	r22, 0x07	; 7
    12de:	41 e0       	ldi	r20, 0x01	; 1
    12e0:	0e 94 2b 0b 	call	0x1656	; 0x1656 <MDIO_voidSetPinDirection>

/* Enable SPI, Master, set clock rate fck/64 */
SPCR = 0b01011110;
    12e4:	ed e2       	ldi	r30, 0x2D	; 45
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	8e e5       	ldi	r24, 0x5E	; 94
    12ea:	80 83       	st	Z, r24
}
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <SPI_MasterTrancieve>:

u8 SPI_MasterTrancieve(u8 A_u8Data)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <SPI_MasterTrancieve+0x6>
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	89 83       	std	Y+1, r24	; 0x01
/* Start transmission */
SPDR = A_u8Data;
    12fe:	ef e2       	ldi	r30, 0x2F	; 47
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	80 83       	st	Z, r24

/* Wait for transmission complete */
while(GET_BIT(SPSR,SPSR_SPIF) != 1){};
    1306:	ee e2       	ldi	r30, 0x2E	; 46
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z

return SPDR;
    130c:	ef e2       	ldi	r30, 0x2F	; 47
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
}
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <SPI_SlaveInit>:

void SPI_SlaveInit(void)
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
/* Set MISO output, all others input */
MDIO_voidSetPortDirection(PORTB,INPUT);
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <MDIO_voidSetPortDirection>
MDIO_voidSetPinDirection(PORTB,PIN6,OUTPUT);
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	66 e0       	ldi	r22, 0x06	; 6
    1330:	41 e0       	ldi	r20, 0x01	; 1
    1332:	0e 94 2b 0b 	call	0x1656	; 0x1656 <MDIO_voidSetPinDirection>
/* Enable SPI */
SPCR = 0b01001110;
    1336:	ed e2       	ldi	r30, 0x2D	; 45
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	8e e4       	ldi	r24, 0x4E	; 78
    133c:	80 83       	st	Z, r24
}
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <MEXTINT_voidSenseControl>:
#include "EXT_INT.h"
#include "../DIO/DIO.h"
#include "EXT_INT_private.h"

void MEXTINT_voidSenseControl(u8 A_u8IntNum, u8 A_u8SenseControl)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	2a 97       	sbiw	r28, 0x0a	; 10
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8IntNum)
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	3a 87       	std	Y+10, r19	; 0x0a
    1364:	29 87       	std	Y+9, r18	; 0x09
    1366:	89 85       	ldd	r24, Y+9	; 0x09
    1368:	9a 85       	ldd	r25, Y+10	; 0x0a
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	91 05       	cpc	r25, r1
    136e:	09 f4       	brne	.+2      	; 0x1372 <MEXTINT_voidSenseControl+0x2e>
    1370:	66 c0       	rjmp	.+204    	; 0x143e <MEXTINT_voidSenseControl+0xfa>
    1372:	29 85       	ldd	r18, Y+9	; 0x09
    1374:	3a 85       	ldd	r19, Y+10	; 0x0a
    1376:	22 30       	cpi	r18, 0x02	; 2
    1378:	31 05       	cpc	r19, r1
    137a:	09 f4       	brne	.+2      	; 0x137e <MEXTINT_voidSenseControl+0x3a>
    137c:	bb c0       	rjmp	.+374    	; 0x14f4 <MEXTINT_voidSenseControl+0x1b0>
    137e:	89 85       	ldd	r24, Y+9	; 0x09
    1380:	9a 85       	ldd	r25, Y+10	; 0x0a
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	09 f0       	breq	.+2      	; 0x1388 <MEXTINT_voidSenseControl+0x44>
    1386:	d4 c0       	rjmp	.+424    	; 0x1530 <MEXTINT_voidSenseControl+0x1ec>
	{
		case EXTINT_Int0:
			switch(A_u8SenseControl)
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	38 87       	std	Y+8, r19	; 0x08
    1390:	2f 83       	std	Y+7, r18	; 0x07
    1392:	8f 81       	ldd	r24, Y+7	; 0x07
    1394:	98 85       	ldd	r25, Y+8	; 0x08
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	91 05       	cpc	r25, r1
    139a:	21 f1       	breq	.+72     	; 0x13e4 <MEXTINT_voidSenseControl+0xa0>
    139c:	2f 81       	ldd	r18, Y+7	; 0x07
    139e:	38 85       	ldd	r19, Y+8	; 0x08
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	31 05       	cpc	r19, r1
    13a4:	2c f4       	brge	.+10     	; 0x13b0 <MEXTINT_voidSenseControl+0x6c>
    13a6:	8f 81       	ldd	r24, Y+7	; 0x07
    13a8:	98 85       	ldd	r25, Y+8	; 0x08
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	61 f0       	breq	.+24     	; 0x13c6 <MEXTINT_voidSenseControl+0x82>
    13ae:	c0 c0       	rjmp	.+384    	; 0x1530 <MEXTINT_voidSenseControl+0x1ec>
    13b0:	2f 81       	ldd	r18, Y+7	; 0x07
    13b2:	38 85       	ldd	r19, Y+8	; 0x08
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	21 f1       	breq	.+72     	; 0x1402 <MEXTINT_voidSenseControl+0xbe>
    13ba:	8f 81       	ldd	r24, Y+7	; 0x07
    13bc:	98 85       	ldd	r25, Y+8	; 0x08
    13be:	83 30       	cpi	r24, 0x03	; 3
    13c0:	91 05       	cpc	r25, r1
    13c2:	71 f1       	breq	.+92     	; 0x1420 <MEXTINT_voidSenseControl+0xdc>
    13c4:	b5 c0       	rjmp	.+362    	; 0x1530 <MEXTINT_voidSenseControl+0x1ec>
			{
			case EXTINT_SenseControl_FallingEdge: CLR_BIT(EXTINT_MCUCR,EXTINT_ISC00);
    13c6:	a5 e5       	ldi	r26, 0x55	; 85
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e5 e5       	ldi	r30, 0x55	; 85
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	8e 7f       	andi	r24, 0xFE	; 254
    13d2:	8c 93       	st	X, r24
												  SET_BIT(EXTINT_MCUCR,EXTINT_ISC01);
    13d4:	a5 e5       	ldi	r26, 0x55	; 85
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e5 e5       	ldi	r30, 0x55	; 85
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	82 60       	ori	r24, 0x02	; 2
    13e0:	8c 93       	st	X, r24
    13e2:	a6 c0       	rjmp	.+332    	; 0x1530 <MEXTINT_voidSenseControl+0x1ec>
												  break;

			case EXTINT_SenseControl_RisingEdge:  SET_BIT(EXTINT_MCUCR,EXTINT_ISC00);
    13e4:	a5 e5       	ldi	r26, 0x55	; 85
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e5       	ldi	r30, 0x55	; 85
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	81 60       	ori	r24, 0x01	; 1
    13f0:	8c 93       	st	X, r24
												  SET_BIT(EXTINT_MCUCR,EXTINT_ISC01);
    13f2:	a5 e5       	ldi	r26, 0x55	; 85
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e5 e5       	ldi	r30, 0x55	; 85
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	82 60       	ori	r24, 0x02	; 2
    13fe:	8c 93       	st	X, r24
    1400:	97 c0       	rjmp	.+302    	; 0x1530 <MEXTINT_voidSenseControl+0x1ec>
												  break;

			case EXTINT_SenseControl_OnChange:    SET_BIT(EXTINT_MCUCR,EXTINT_ISC00);
    1402:	a5 e5       	ldi	r26, 0x55	; 85
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e5 e5       	ldi	r30, 0x55	; 85
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	81 60       	ori	r24, 0x01	; 1
    140e:	8c 93       	st	X, r24
												  CLR_BIT(EXTINT_MCUCR,EXTINT_ISC01);
    1410:	a5 e5       	ldi	r26, 0x55	; 85
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e5 e5       	ldi	r30, 0x55	; 85
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	8d 7f       	andi	r24, 0xFD	; 253
    141c:	8c 93       	st	X, r24
    141e:	88 c0       	rjmp	.+272    	; 0x1530 <MEXTINT_voidSenseControl+0x1ec>
												  break;

			case EXTINT_SenseControl_LowLevel:    CLR_BIT(EXTINT_MCUCR,EXTINT_ISC00);
    1420:	a5 e5       	ldi	r26, 0x55	; 85
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e5 e5       	ldi	r30, 0x55	; 85
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	8e 7f       	andi	r24, 0xFE	; 254
    142c:	8c 93       	st	X, r24
												  CLR_BIT(EXTINT_MCUCR,EXTINT_ISC01);
    142e:	a5 e5       	ldi	r26, 0x55	; 85
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e5 e5       	ldi	r30, 0x55	; 85
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	8d 7f       	andi	r24, 0xFD	; 253
    143a:	8c 93       	st	X, r24
    143c:	79 c0       	rjmp	.+242    	; 0x1530 <MEXTINT_voidSenseControl+0x1ec>
												  break;
			}
			break;

		case EXTINT_Int1:
			switch(A_u8SenseControl)
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	3e 83       	std	Y+6, r19	; 0x06
    1446:	2d 83       	std	Y+5, r18	; 0x05
    1448:	8d 81       	ldd	r24, Y+5	; 0x05
    144a:	9e 81       	ldd	r25, Y+6	; 0x06
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	91 05       	cpc	r25, r1
    1450:	21 f1       	breq	.+72     	; 0x149a <MEXTINT_voidSenseControl+0x156>
    1452:	2d 81       	ldd	r18, Y+5	; 0x05
    1454:	3e 81       	ldd	r19, Y+6	; 0x06
    1456:	22 30       	cpi	r18, 0x02	; 2
    1458:	31 05       	cpc	r19, r1
    145a:	2c f4       	brge	.+10     	; 0x1466 <MEXTINT_voidSenseControl+0x122>
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	61 f0       	breq	.+24     	; 0x147c <MEXTINT_voidSenseControl+0x138>
    1464:	65 c0       	rjmp	.+202    	; 0x1530 <MEXTINT_voidSenseControl+0x1ec>
    1466:	2d 81       	ldd	r18, Y+5	; 0x05
    1468:	3e 81       	ldd	r19, Y+6	; 0x06
    146a:	22 30       	cpi	r18, 0x02	; 2
    146c:	31 05       	cpc	r19, r1
    146e:	21 f1       	breq	.+72     	; 0x14b8 <MEXTINT_voidSenseControl+0x174>
    1470:	8d 81       	ldd	r24, Y+5	; 0x05
    1472:	9e 81       	ldd	r25, Y+6	; 0x06
    1474:	83 30       	cpi	r24, 0x03	; 3
    1476:	91 05       	cpc	r25, r1
    1478:	71 f1       	breq	.+92     	; 0x14d6 <MEXTINT_voidSenseControl+0x192>
    147a:	5a c0       	rjmp	.+180    	; 0x1530 <MEXTINT_voidSenseControl+0x1ec>
			{
			case EXTINT_SenseControl_FallingEdge: CLR_BIT(EXTINT_MCUCR,EXTINT_ISC10);
    147c:	a5 e5       	ldi	r26, 0x55	; 85
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e5 e5       	ldi	r30, 0x55	; 85
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	8b 7f       	andi	r24, 0xFB	; 251
    1488:	8c 93       	st	X, r24
											   	  SET_BIT(EXTINT_MCUCR,EXTINT_ISC11);
    148a:	a5 e5       	ldi	r26, 0x55	; 85
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e5 e5       	ldi	r30, 0x55	; 85
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	88 60       	ori	r24, 0x08	; 8
    1496:	8c 93       	st	X, r24
    1498:	4b c0       	rjmp	.+150    	; 0x1530 <MEXTINT_voidSenseControl+0x1ec>
												  break;

			case EXTINT_SenseControl_RisingEdge:  SET_BIT(EXTINT_MCUCR,EXTINT_ISC10);
    149a:	a5 e5       	ldi	r26, 0x55	; 85
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e5 e5       	ldi	r30, 0x55	; 85
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	84 60       	ori	r24, 0x04	; 4
    14a6:	8c 93       	st	X, r24
												  SET_BIT(EXTINT_MCUCR,EXTINT_ISC11);
    14a8:	a5 e5       	ldi	r26, 0x55	; 85
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e5 e5       	ldi	r30, 0x55	; 85
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	88 60       	ori	r24, 0x08	; 8
    14b4:	8c 93       	st	X, r24
    14b6:	3c c0       	rjmp	.+120    	; 0x1530 <MEXTINT_voidSenseControl+0x1ec>
												  break;

			case EXTINT_SenseControl_OnChange:    SET_BIT(EXTINT_MCUCR,EXTINT_ISC10);
    14b8:	a5 e5       	ldi	r26, 0x55	; 85
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e5 e5       	ldi	r30, 0x55	; 85
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	84 60       	ori	r24, 0x04	; 4
    14c4:	8c 93       	st	X, r24
												  CLR_BIT(EXTINT_MCUCR,EXTINT_ISC11);
    14c6:	a5 e5       	ldi	r26, 0x55	; 85
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e5 e5       	ldi	r30, 0x55	; 85
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	87 7f       	andi	r24, 0xF7	; 247
    14d2:	8c 93       	st	X, r24
    14d4:	2d c0       	rjmp	.+90     	; 0x1530 <MEXTINT_voidSenseControl+0x1ec>
												  break;

			case EXTINT_SenseControl_LowLevel:    CLR_BIT(EXTINT_MCUCR,EXTINT_ISC10);
    14d6:	a5 e5       	ldi	r26, 0x55	; 85
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e5 e5       	ldi	r30, 0x55	; 85
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	8b 7f       	andi	r24, 0xFB	; 251
    14e2:	8c 93       	st	X, r24
												  CLR_BIT(EXTINT_MCUCR,EXTINT_ISC11);
    14e4:	a5 e5       	ldi	r26, 0x55	; 85
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e5       	ldi	r30, 0x55	; 85
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	87 7f       	andi	r24, 0xF7	; 247
    14f0:	8c 93       	st	X, r24
    14f2:	1e c0       	rjmp	.+60     	; 0x1530 <MEXTINT_voidSenseControl+0x1ec>
												  break;
			}
			break;

	case EXTINT_Int2:
		switch(A_u8SenseControl)
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	3c 83       	std	Y+4, r19	; 0x04
    14fc:	2b 83       	std	Y+3, r18	; 0x03
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	31 f0       	breq	.+12     	; 0x1512 <MEXTINT_voidSenseControl+0x1ce>
    1506:	2b 81       	ldd	r18, Y+3	; 0x03
    1508:	3c 81       	ldd	r19, Y+4	; 0x04
    150a:	21 30       	cpi	r18, 0x01	; 1
    150c:	31 05       	cpc	r19, r1
    150e:	49 f0       	breq	.+18     	; 0x1522 <MEXTINT_voidSenseControl+0x1de>
    1510:	0f c0       	rjmp	.+30     	; 0x1530 <MEXTINT_voidSenseControl+0x1ec>
			{
			case EXTINT_SenseControl_FallingEdge: CLR_BIT(EXTINT_MCUCR,EXTINT_ISC2);
    1512:	a5 e5       	ldi	r26, 0x55	; 85
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e5 e5       	ldi	r30, 0x55	; 85
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	8f 7b       	andi	r24, 0xBF	; 191
    151e:	8c 93       	st	X, r24
    1520:	07 c0       	rjmp	.+14     	; 0x1530 <MEXTINT_voidSenseControl+0x1ec>
												break;

			case EXTINT_SenseControl_RisingEdge:  SET_BIT(EXTINT_MCUCR,EXTINT_ISC2);
    1522:	a5 e5       	ldi	r26, 0x55	; 85
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e5 e5       	ldi	r30, 0x55	; 85
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	80 64       	ori	r24, 0x40	; 64
    152e:	8c 93       	st	X, r24
												break;
			}
			break;
	}
}
    1530:	2a 96       	adiw	r28, 0x0a	; 10
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <MEXTINT_voidEnableInt>:

void MEXTINT_voidEnableInt(u8 A_u8IntNum)
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	00 d0       	rcall	.+0      	; 0x1548 <MEXTINT_voidEnableInt+0x6>
    1548:	0f 92       	push	r0
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8IntNum)
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	3b 83       	std	Y+3, r19	; 0x03
    1558:	2a 83       	std	Y+2, r18	; 0x02
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	9b 81       	ldd	r25, Y+3	; 0x03
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	91 05       	cpc	r25, r1
    1562:	89 f0       	breq	.+34     	; 0x1586 <MEXTINT_voidEnableInt+0x44>
    1564:	2a 81       	ldd	r18, Y+2	; 0x02
    1566:	3b 81       	ldd	r19, Y+3	; 0x03
    1568:	22 30       	cpi	r18, 0x02	; 2
    156a:	31 05       	cpc	r19, r1
    156c:	a1 f0       	breq	.+40     	; 0x1596 <MEXTINT_voidEnableInt+0x54>
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	9b 81       	ldd	r25, Y+3	; 0x03
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	b9 f4       	brne	.+46     	; 0x15a4 <MEXTINT_voidEnableInt+0x62>
		{
		case EXTINT_Int0:
			SET_BIT(EXTINT_GICR, EXTINT_Int0_GICR);
    1576:	ab e5       	ldi	r26, 0x5B	; 91
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	eb e5       	ldi	r30, 0x5B	; 91
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	80 64       	ori	r24, 0x40	; 64
    1582:	8c 93       	st	X, r24
    1584:	0f c0       	rjmp	.+30     	; 0x15a4 <MEXTINT_voidEnableInt+0x62>
			break;
		case EXTINT_Int1:
			SET_BIT(EXTINT_GICR, EXTINT_Int1_GICR);
    1586:	ab e5       	ldi	r26, 0x5B	; 91
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	eb e5       	ldi	r30, 0x5B	; 91
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	80 68       	ori	r24, 0x80	; 128
    1592:	8c 93       	st	X, r24
    1594:	07 c0       	rjmp	.+14     	; 0x15a4 <MEXTINT_voidEnableInt+0x62>
			break;
		case EXTINT_Int2:
			SET_BIT(EXTINT_GICR, EXTINT_Int2_GICR);
    1596:	ab e5       	ldi	r26, 0x5B	; 91
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	eb e5       	ldi	r30, 0x5B	; 91
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	80 62       	ori	r24, 0x20	; 32
    15a2:	8c 93       	st	X, r24
			break;
		}
}
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <MEXTINT_voidDisableInt>:
void MEXTINT_voidDisableInt(u8 A_u8IntNum)
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <MEXTINT_voidDisableInt+0x6>
    15b6:	0f 92       	push	r0
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8IntNum)
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	3b 83       	std	Y+3, r19	; 0x03
    15c6:	2a 83       	std	Y+2, r18	; 0x02
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	9b 81       	ldd	r25, Y+3	; 0x03
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	91 05       	cpc	r25, r1
    15d0:	89 f0       	breq	.+34     	; 0x15f4 <MEXTINT_voidDisableInt+0x44>
    15d2:	2a 81       	ldd	r18, Y+2	; 0x02
    15d4:	3b 81       	ldd	r19, Y+3	; 0x03
    15d6:	22 30       	cpi	r18, 0x02	; 2
    15d8:	31 05       	cpc	r19, r1
    15da:	a1 f0       	breq	.+40     	; 0x1604 <MEXTINT_voidDisableInt+0x54>
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	9b 81       	ldd	r25, Y+3	; 0x03
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	b9 f4       	brne	.+46     	; 0x1612 <MEXTINT_voidDisableInt+0x62>
			{
			case EXTINT_Int0:
				CLR_BIT(EXTINT_GICR, EXTINT_Int0_GICR);
    15e4:	ab e5       	ldi	r26, 0x5B	; 91
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	eb e5       	ldi	r30, 0x5B	; 91
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	8f 7b       	andi	r24, 0xBF	; 191
    15f0:	8c 93       	st	X, r24
    15f2:	0f c0       	rjmp	.+30     	; 0x1612 <MEXTINT_voidDisableInt+0x62>
				break;
			case EXTINT_Int1:
				CLR_BIT(EXTINT_GICR, EXTINT_Int1_GICR);
    15f4:	ab e5       	ldi	r26, 0x5B	; 91
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	eb e5       	ldi	r30, 0x5B	; 91
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	8f 77       	andi	r24, 0x7F	; 127
    1600:	8c 93       	st	X, r24
    1602:	07 c0       	rjmp	.+14     	; 0x1612 <MEXTINT_voidDisableInt+0x62>
				break;
			case EXTINT_Int2:
				CLR_BIT(EXTINT_GICR, EXTINT_Int2_GICR);
    1604:	ab e5       	ldi	r26, 0x5B	; 91
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	eb e5       	ldi	r30, 0x5B	; 91
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8f 7d       	andi	r24, 0xDF	; 223
    1610:	8c 93       	st	X, r24
				break;
			}
}
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <MGIR_voidEnable>:

#include "GIE.h"
#include "EXT_INT_private.h"

void MGIR_voidEnable()
{
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTINT_SREG,7);
    1626:	af e5       	ldi	r26, 0x5F	; 95
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	ef e5       	ldi	r30, 0x5F	; 95
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	80 68       	ori	r24, 0x80	; 128
    1632:	8c 93       	st	X, r24
}
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <MGIR_voidDisEnable>:

void MGIR_voidDisEnable()
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTINT_SREG,7);
    1642:	af e5       	ldi	r26, 0x5F	; 95
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	ef e5       	ldi	r30, 0x5F	; 95
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	8f 77       	andi	r24, 0x7F	; 127
    164e:	8c 93       	st	X, r24
}
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <MDIO_voidSetPinDirection>:
#include "DIO_private.h"
#include "../../lib/Bit_Maths.h"
#include "../../lib/defines.h"

void MDIO_voidSetPinDirection(u8 A_u8PortNum,u8 A_u8PinNum,u8 A_u8PinDirection)
{
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	2d 97       	sbiw	r28, 0x0d	; 13
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	89 83       	std	Y+1, r24	; 0x01
    166c:	6a 83       	std	Y+2, r22	; 0x02
    166e:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortNum)
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	3d 87       	std	Y+13, r19	; 0x0d
    1678:	2c 87       	std	Y+12, r18	; 0x0c
    167a:	8c 85       	ldd	r24, Y+12	; 0x0c
    167c:	9d 85       	ldd	r25, Y+13	; 0x0d
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	91 05       	cpc	r25, r1
    1682:	09 f4       	brne	.+2      	; 0x1686 <MDIO_voidSetPinDirection+0x30>
    1684:	4f c0       	rjmp	.+158    	; 0x1724 <MDIO_voidSetPinDirection+0xce>
    1686:	2c 85       	ldd	r18, Y+12	; 0x0c
    1688:	3d 85       	ldd	r19, Y+13	; 0x0d
    168a:	22 30       	cpi	r18, 0x02	; 2
    168c:	31 05       	cpc	r19, r1
    168e:	2c f4       	brge	.+10     	; 0x169a <MDIO_voidSetPinDirection+0x44>
    1690:	8c 85       	ldd	r24, Y+12	; 0x0c
    1692:	9d 85       	ldd	r25, Y+13	; 0x0d
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	71 f0       	breq	.+28     	; 0x16b4 <MDIO_voidSetPinDirection+0x5e>
    1698:	ec c0       	rjmp	.+472    	; 0x1872 <MDIO_voidSetPinDirection+0x21c>
    169a:	2c 85       	ldd	r18, Y+12	; 0x0c
    169c:	3d 85       	ldd	r19, Y+13	; 0x0d
    169e:	22 30       	cpi	r18, 0x02	; 2
    16a0:	31 05       	cpc	r19, r1
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <MDIO_voidSetPinDirection+0x50>
    16a4:	77 c0       	rjmp	.+238    	; 0x1794 <MDIO_voidSetPinDirection+0x13e>
    16a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    16a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    16aa:	83 30       	cpi	r24, 0x03	; 3
    16ac:	91 05       	cpc	r25, r1
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <MDIO_voidSetPinDirection+0x5c>
    16b0:	a9 c0       	rjmp	.+338    	; 0x1804 <MDIO_voidSetPinDirection+0x1ae>
    16b2:	df c0       	rjmp	.+446    	; 0x1872 <MDIO_voidSetPinDirection+0x21c>
	{
		case PORTA:
					switch(A_u8PinDirection)
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	3b 87       	std	Y+11, r19	; 0x0b
    16bc:	2a 87       	std	Y+10, r18	; 0x0a
    16be:	8a 85       	ldd	r24, Y+10	; 0x0a
    16c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	31 f0       	breq	.+12     	; 0x16d2 <MDIO_voidSetPinDirection+0x7c>
    16c6:	2a 85       	ldd	r18, Y+10	; 0x0a
    16c8:	3b 85       	ldd	r19, Y+11	; 0x0b
    16ca:	21 30       	cpi	r18, 0x01	; 1
    16cc:	31 05       	cpc	r19, r1
    16ce:	b1 f0       	breq	.+44     	; 0x16fc <MDIO_voidSetPinDirection+0xa6>
    16d0:	d0 c0       	rjmp	.+416    	; 0x1872 <MDIO_voidSetPinDirection+0x21c>
					{
						case INPUT: CLR_BIT(DIO_DDRA_REG,A_u8PinNum); break;
    16d2:	aa e3       	ldi	r26, 0x3A	; 58
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	ea e3       	ldi	r30, 0x3A	; 58
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	48 2f       	mov	r20, r24
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 2e       	mov	r0, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <MDIO_voidSetPinDirection+0x9a>
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	0a 94       	dec	r0
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <MDIO_voidSetPinDirection+0x96>
    16f4:	80 95       	com	r24
    16f6:	84 23       	and	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	bb c0       	rjmp	.+374    	; 0x1872 <MDIO_voidSetPinDirection+0x21c>
						case OUTPUT: SET_BIT(DIO_DDRA_REG,A_u8PinNum); break;
    16fc:	aa e3       	ldi	r26, 0x3A	; 58
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	ea e3       	ldi	r30, 0x3A	; 58
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <MDIO_voidSetPinDirection+0xc4>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <MDIO_voidSetPinDirection+0xc0>
    171e:	84 2b       	or	r24, r20
    1720:	8c 93       	st	X, r24
    1722:	a7 c0       	rjmp	.+334    	; 0x1872 <MDIO_voidSetPinDirection+0x21c>
					} break;
		case PORTB:
					switch(A_u8PinDirection)
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	39 87       	std	Y+9, r19	; 0x09
    172c:	28 87       	std	Y+8, r18	; 0x08
    172e:	88 85       	ldd	r24, Y+8	; 0x08
    1730:	99 85       	ldd	r25, Y+9	; 0x09
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	31 f0       	breq	.+12     	; 0x1742 <MDIO_voidSetPinDirection+0xec>
    1736:	28 85       	ldd	r18, Y+8	; 0x08
    1738:	39 85       	ldd	r19, Y+9	; 0x09
    173a:	21 30       	cpi	r18, 0x01	; 1
    173c:	31 05       	cpc	r19, r1
    173e:	b1 f0       	breq	.+44     	; 0x176c <MDIO_voidSetPinDirection+0x116>
    1740:	98 c0       	rjmp	.+304    	; 0x1872 <MDIO_voidSetPinDirection+0x21c>
					{
						case INPUT: CLR_BIT(DIO_DDRB_REG,A_u8PinNum); break;
    1742:	a7 e3       	ldi	r26, 0x37	; 55
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e7 e3       	ldi	r30, 0x37	; 55
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	48 2f       	mov	r20, r24
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 2e       	mov	r0, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <MDIO_voidSetPinDirection+0x10a>
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	0a 94       	dec	r0
    1762:	e2 f7       	brpl	.-8      	; 0x175c <MDIO_voidSetPinDirection+0x106>
    1764:	80 95       	com	r24
    1766:	84 23       	and	r24, r20
    1768:	8c 93       	st	X, r24
    176a:	83 c0       	rjmp	.+262    	; 0x1872 <MDIO_voidSetPinDirection+0x21c>
						case OUTPUT: SET_BIT(DIO_DDRB_REG,A_u8PinNum); break;
    176c:	a7 e3       	ldi	r26, 0x37	; 55
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e7 e3       	ldi	r30, 0x37	; 55
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 2e       	mov	r0, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <MDIO_voidSetPinDirection+0x134>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	0a 94       	dec	r0
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <MDIO_voidSetPinDirection+0x130>
    178e:	84 2b       	or	r24, r20
    1790:	8c 93       	st	X, r24
    1792:	6f c0       	rjmp	.+222    	; 0x1872 <MDIO_voidSetPinDirection+0x21c>
					} break;
		case PORTC:
					switch(A_u8PinDirection)
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	3f 83       	std	Y+7, r19	; 0x07
    179c:	2e 83       	std	Y+6, r18	; 0x06
    179e:	8e 81       	ldd	r24, Y+6	; 0x06
    17a0:	9f 81       	ldd	r25, Y+7	; 0x07
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	31 f0       	breq	.+12     	; 0x17b2 <MDIO_voidSetPinDirection+0x15c>
    17a6:	2e 81       	ldd	r18, Y+6	; 0x06
    17a8:	3f 81       	ldd	r19, Y+7	; 0x07
    17aa:	21 30       	cpi	r18, 0x01	; 1
    17ac:	31 05       	cpc	r19, r1
    17ae:	b1 f0       	breq	.+44     	; 0x17dc <MDIO_voidSetPinDirection+0x186>
    17b0:	60 c0       	rjmp	.+192    	; 0x1872 <MDIO_voidSetPinDirection+0x21c>
					{
						case INPUT: CLR_BIT(DIO_DDRC_REG,A_u8PinNum); break;
    17b2:	a4 e3       	ldi	r26, 0x34	; 52
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e4 e3       	ldi	r30, 0x34	; 52
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	48 2f       	mov	r20, r24
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	02 2e       	mov	r0, r18
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <MDIO_voidSetPinDirection+0x17a>
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	0a 94       	dec	r0
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <MDIO_voidSetPinDirection+0x176>
    17d4:	80 95       	com	r24
    17d6:	84 23       	and	r24, r20
    17d8:	8c 93       	st	X, r24
    17da:	4b c0       	rjmp	.+150    	; 0x1872 <MDIO_voidSetPinDirection+0x21c>
						case OUTPUT: SET_BIT(DIO_DDRC_REG,A_u8PinNum); break;
    17dc:	a4 e3       	ldi	r26, 0x34	; 52
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e4 e3       	ldi	r30, 0x34	; 52
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 2e       	mov	r0, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <MDIO_voidSetPinDirection+0x1a4>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <MDIO_voidSetPinDirection+0x1a0>
    17fe:	84 2b       	or	r24, r20
    1800:	8c 93       	st	X, r24
    1802:	37 c0       	rjmp	.+110    	; 0x1872 <MDIO_voidSetPinDirection+0x21c>
					} break;
		case PORTD:
					switch(A_u8PinDirection)
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	3d 83       	std	Y+5, r19	; 0x05
    180c:	2c 83       	std	Y+4, r18	; 0x04
    180e:	8c 81       	ldd	r24, Y+4	; 0x04
    1810:	9d 81       	ldd	r25, Y+5	; 0x05
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	31 f0       	breq	.+12     	; 0x1822 <MDIO_voidSetPinDirection+0x1cc>
    1816:	2c 81       	ldd	r18, Y+4	; 0x04
    1818:	3d 81       	ldd	r19, Y+5	; 0x05
    181a:	21 30       	cpi	r18, 0x01	; 1
    181c:	31 05       	cpc	r19, r1
    181e:	b1 f0       	breq	.+44     	; 0x184c <MDIO_voidSetPinDirection+0x1f6>
    1820:	28 c0       	rjmp	.+80     	; 0x1872 <MDIO_voidSetPinDirection+0x21c>
					{
						case INPUT: CLR_BIT(DIO_DDRD_REG,A_u8PinNum); break;
    1822:	a1 e3       	ldi	r26, 0x31	; 49
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e1 e3       	ldi	r30, 0x31	; 49
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	48 2f       	mov	r20, r24
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 2e       	mov	r0, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <MDIO_voidSetPinDirection+0x1ea>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	0a 94       	dec	r0
    1842:	e2 f7       	brpl	.-8      	; 0x183c <MDIO_voidSetPinDirection+0x1e6>
    1844:	80 95       	com	r24
    1846:	84 23       	and	r24, r20
    1848:	8c 93       	st	X, r24
    184a:	13 c0       	rjmp	.+38     	; 0x1872 <MDIO_voidSetPinDirection+0x21c>
						case OUTPUT: SET_BIT(DIO_DDRD_REG,A_u8PinNum); break;
    184c:	a1 e3       	ldi	r26, 0x31	; 49
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e1 e3       	ldi	r30, 0x31	; 49
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	48 2f       	mov	r20, r24
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	02 2e       	mov	r0, r18
    1864:	02 c0       	rjmp	.+4      	; 0x186a <MDIO_voidSetPinDirection+0x214>
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	0a 94       	dec	r0
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <MDIO_voidSetPinDirection+0x210>
    186e:	84 2b       	or	r24, r20
    1870:	8c 93       	st	X, r24
					} break;
	}
}
    1872:	2d 96       	adiw	r28, 0x0d	; 13
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue (u8 A_u8PortNum,u8 A_u8PinNum,u8 A_u8PinValue)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	2d 97       	sbiw	r28, 0x0d	; 13
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	89 83       	std	Y+1, r24	; 0x01
    189a:	6a 83       	std	Y+2, r22	; 0x02
    189c:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortNum)
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	3d 87       	std	Y+13, r19	; 0x0d
    18a6:	2c 87       	std	Y+12, r18	; 0x0c
    18a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    18aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	91 05       	cpc	r25, r1
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <MDIO_voidSetPinValue+0x30>
    18b2:	4f c0       	rjmp	.+158    	; 0x1952 <MDIO_voidSetPinValue+0xce>
    18b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    18b6:	3d 85       	ldd	r19, Y+13	; 0x0d
    18b8:	22 30       	cpi	r18, 0x02	; 2
    18ba:	31 05       	cpc	r19, r1
    18bc:	2c f4       	brge	.+10     	; 0x18c8 <MDIO_voidSetPinValue+0x44>
    18be:	8c 85       	ldd	r24, Y+12	; 0x0c
    18c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	71 f0       	breq	.+28     	; 0x18e2 <MDIO_voidSetPinValue+0x5e>
    18c6:	ec c0       	rjmp	.+472    	; 0x1aa0 <MDIO_voidSetPinValue+0x21c>
    18c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    18ca:	3d 85       	ldd	r19, Y+13	; 0x0d
    18cc:	22 30       	cpi	r18, 0x02	; 2
    18ce:	31 05       	cpc	r19, r1
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <MDIO_voidSetPinValue+0x50>
    18d2:	77 c0       	rjmp	.+238    	; 0x19c2 <MDIO_voidSetPinValue+0x13e>
    18d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    18d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    18d8:	83 30       	cpi	r24, 0x03	; 3
    18da:	91 05       	cpc	r25, r1
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <MDIO_voidSetPinValue+0x5c>
    18de:	a9 c0       	rjmp	.+338    	; 0x1a32 <MDIO_voidSetPinValue+0x1ae>
    18e0:	df c0       	rjmp	.+446    	; 0x1aa0 <MDIO_voidSetPinValue+0x21c>
		{
			case PORTA:
						switch(A_u8PinValue)
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	3b 87       	std	Y+11, r19	; 0x0b
    18ea:	2a 87       	std	Y+10, r18	; 0x0a
    18ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    18ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	31 f0       	breq	.+12     	; 0x1900 <MDIO_voidSetPinValue+0x7c>
    18f4:	2a 85       	ldd	r18, Y+10	; 0x0a
    18f6:	3b 85       	ldd	r19, Y+11	; 0x0b
    18f8:	21 30       	cpi	r18, 0x01	; 1
    18fa:	31 05       	cpc	r19, r1
    18fc:	b1 f0       	breq	.+44     	; 0x192a <MDIO_voidSetPinValue+0xa6>
    18fe:	d0 c0       	rjmp	.+416    	; 0x1aa0 <MDIO_voidSetPinValue+0x21c>
						{
							case INPUT: CLR_BIT(DIO_PORTA_REG,A_u8PinNum); break;
    1900:	ab e3       	ldi	r26, 0x3B	; 59
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	eb e3       	ldi	r30, 0x3B	; 59
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <MDIO_voidSetPinValue+0x9a>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <MDIO_voidSetPinValue+0x96>
    1922:	80 95       	com	r24
    1924:	84 23       	and	r24, r20
    1926:	8c 93       	st	X, r24
    1928:	bb c0       	rjmp	.+374    	; 0x1aa0 <MDIO_voidSetPinValue+0x21c>
							case OUTPUT: SET_BIT(DIO_PORTA_REG,A_u8PinNum); break;
    192a:	ab e3       	ldi	r26, 0x3B	; 59
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	eb e3       	ldi	r30, 0x3B	; 59
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 2e       	mov	r0, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <MDIO_voidSetPinValue+0xc4>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <MDIO_voidSetPinValue+0xc0>
    194c:	84 2b       	or	r24, r20
    194e:	8c 93       	st	X, r24
    1950:	a7 c0       	rjmp	.+334    	; 0x1aa0 <MDIO_voidSetPinValue+0x21c>
						} break;
			case PORTB:
						switch(A_u8PinValue)
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	39 87       	std	Y+9, r19	; 0x09
    195a:	28 87       	std	Y+8, r18	; 0x08
    195c:	88 85       	ldd	r24, Y+8	; 0x08
    195e:	99 85       	ldd	r25, Y+9	; 0x09
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	31 f0       	breq	.+12     	; 0x1970 <MDIO_voidSetPinValue+0xec>
    1964:	28 85       	ldd	r18, Y+8	; 0x08
    1966:	39 85       	ldd	r19, Y+9	; 0x09
    1968:	21 30       	cpi	r18, 0x01	; 1
    196a:	31 05       	cpc	r19, r1
    196c:	b1 f0       	breq	.+44     	; 0x199a <MDIO_voidSetPinValue+0x116>
    196e:	98 c0       	rjmp	.+304    	; 0x1aa0 <MDIO_voidSetPinValue+0x21c>
						{
							case INPUT: CLR_BIT(DIO_PORTB_REG,A_u8PinNum); break;
    1970:	a8 e3       	ldi	r26, 0x38	; 56
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e8 e3       	ldi	r30, 0x38	; 56
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	48 2f       	mov	r20, r24
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	02 2e       	mov	r0, r18
    1988:	02 c0       	rjmp	.+4      	; 0x198e <MDIO_voidSetPinValue+0x10a>
    198a:	88 0f       	add	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	0a 94       	dec	r0
    1990:	e2 f7       	brpl	.-8      	; 0x198a <MDIO_voidSetPinValue+0x106>
    1992:	80 95       	com	r24
    1994:	84 23       	and	r24, r20
    1996:	8c 93       	st	X, r24
    1998:	83 c0       	rjmp	.+262    	; 0x1aa0 <MDIO_voidSetPinValue+0x21c>
							case OUTPUT: SET_BIT(DIO_PORTB_REG,A_u8PinNum); break;
    199a:	a8 e3       	ldi	r26, 0x38	; 56
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e8 e3       	ldi	r30, 0x38	; 56
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	48 2f       	mov	r20, r24
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	02 2e       	mov	r0, r18
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <MDIO_voidSetPinValue+0x134>
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	0a 94       	dec	r0
    19ba:	e2 f7       	brpl	.-8      	; 0x19b4 <MDIO_voidSetPinValue+0x130>
    19bc:	84 2b       	or	r24, r20
    19be:	8c 93       	st	X, r24
    19c0:	6f c0       	rjmp	.+222    	; 0x1aa0 <MDIO_voidSetPinValue+0x21c>
						} break;
			case PORTC:
						switch(A_u8PinValue)
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	3f 83       	std	Y+7, r19	; 0x07
    19ca:	2e 83       	std	Y+6, r18	; 0x06
    19cc:	8e 81       	ldd	r24, Y+6	; 0x06
    19ce:	9f 81       	ldd	r25, Y+7	; 0x07
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	31 f0       	breq	.+12     	; 0x19e0 <MDIO_voidSetPinValue+0x15c>
    19d4:	2e 81       	ldd	r18, Y+6	; 0x06
    19d6:	3f 81       	ldd	r19, Y+7	; 0x07
    19d8:	21 30       	cpi	r18, 0x01	; 1
    19da:	31 05       	cpc	r19, r1
    19dc:	b1 f0       	breq	.+44     	; 0x1a0a <MDIO_voidSetPinValue+0x186>
    19de:	60 c0       	rjmp	.+192    	; 0x1aa0 <MDIO_voidSetPinValue+0x21c>
						{
							case INPUT: CLR_BIT(DIO_PORTC_REG,A_u8PinNum); break;
    19e0:	a5 e3       	ldi	r26, 0x35	; 53
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e5 e3       	ldi	r30, 0x35	; 53
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	48 2f       	mov	r20, r24
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	02 2e       	mov	r0, r18
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <MDIO_voidSetPinValue+0x17a>
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	0a 94       	dec	r0
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <MDIO_voidSetPinValue+0x176>
    1a02:	80 95       	com	r24
    1a04:	84 23       	and	r24, r20
    1a06:	8c 93       	st	X, r24
    1a08:	4b c0       	rjmp	.+150    	; 0x1aa0 <MDIO_voidSetPinValue+0x21c>
							case OUTPUT: SET_BIT(DIO_PORTC_REG,A_u8PinNum); break;
    1a0a:	a5 e3       	ldi	r26, 0x35	; 53
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e5 e3       	ldi	r30, 0x35	; 53
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	48 2f       	mov	r20, r24
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	02 2e       	mov	r0, r18
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <MDIO_voidSetPinValue+0x1a4>
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	0a 94       	dec	r0
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <MDIO_voidSetPinValue+0x1a0>
    1a2c:	84 2b       	or	r24, r20
    1a2e:	8c 93       	st	X, r24
    1a30:	37 c0       	rjmp	.+110    	; 0x1aa0 <MDIO_voidSetPinValue+0x21c>
						} break;
			case PORTD:
						switch(A_u8PinValue)
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	3d 83       	std	Y+5, r19	; 0x05
    1a3a:	2c 83       	std	Y+4, r18	; 0x04
    1a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a40:	00 97       	sbiw	r24, 0x00	; 0
    1a42:	31 f0       	breq	.+12     	; 0x1a50 <MDIO_voidSetPinValue+0x1cc>
    1a44:	2c 81       	ldd	r18, Y+4	; 0x04
    1a46:	3d 81       	ldd	r19, Y+5	; 0x05
    1a48:	21 30       	cpi	r18, 0x01	; 1
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	b1 f0       	breq	.+44     	; 0x1a7a <MDIO_voidSetPinValue+0x1f6>
    1a4e:	28 c0       	rjmp	.+80     	; 0x1aa0 <MDIO_voidSetPinValue+0x21c>
						{
							case INPUT: CLR_BIT(DIO_PORTD_REG,A_u8PinNum); break;
    1a50:	a2 e3       	ldi	r26, 0x32	; 50
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e2 e3       	ldi	r30, 0x32	; 50
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	02 2e       	mov	r0, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <MDIO_voidSetPinValue+0x1ea>
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	0a 94       	dec	r0
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <MDIO_voidSetPinValue+0x1e6>
    1a72:	80 95       	com	r24
    1a74:	84 23       	and	r24, r20
    1a76:	8c 93       	st	X, r24
    1a78:	13 c0       	rjmp	.+38     	; 0x1aa0 <MDIO_voidSetPinValue+0x21c>
							case OUTPUT: SET_BIT(DIO_PORTD_REG,A_u8PinNum); break;
    1a7a:	a2 e3       	ldi	r26, 0x32	; 50
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e2 e3       	ldi	r30, 0x32	; 50
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	48 2f       	mov	r20, r24
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	02 2e       	mov	r0, r18
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <MDIO_voidSetPinValue+0x214>
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	0a 94       	dec	r0
    1a9a:	e2 f7       	brpl	.-8      	; 0x1a94 <MDIO_voidSetPinValue+0x210>
    1a9c:	84 2b       	or	r24, r20
    1a9e:	8c 93       	st	X, r24
						} break;
		}
}
    1aa0:	2d 96       	adiw	r28, 0x0d	; 13
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	cd bf       	out	0x3d, r28	; 61
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <MDIO_u8GetPinValue>:

u8 MDIO_u8GetPinValue (u8 A_u8PortNum,u8 A_u8PinNum)
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <MDIO_u8GetPinValue+0x6>
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <MDIO_u8GetPinValue+0x8>
    1aba:	0f 92       	push	r0
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	8a 83       	std	Y+2, r24	; 0x02
    1ac2:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8PinValue;
	switch(A_u8PortNum)
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	3d 83       	std	Y+5, r19	; 0x05
    1acc:	2c 83       	std	Y+4, r18	; 0x04
    1ace:	4c 81       	ldd	r20, Y+4	; 0x04
    1ad0:	5d 81       	ldd	r21, Y+5	; 0x05
    1ad2:	41 30       	cpi	r20, 0x01	; 1
    1ad4:	51 05       	cpc	r21, r1
    1ad6:	41 f1       	breq	.+80     	; 0x1b28 <MDIO_u8GetPinValue+0x76>
    1ad8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ada:	9d 81       	ldd	r25, Y+5	; 0x05
    1adc:	82 30       	cpi	r24, 0x02	; 2
    1ade:	91 05       	cpc	r25, r1
    1ae0:	34 f4       	brge	.+12     	; 0x1aee <MDIO_u8GetPinValue+0x3c>
    1ae2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae6:	21 15       	cp	r18, r1
    1ae8:	31 05       	cpc	r19, r1
    1aea:	61 f0       	breq	.+24     	; 0x1b04 <MDIO_u8GetPinValue+0x52>
    1aec:	52 c0       	rjmp	.+164    	; 0x1b92 <MDIO_u8GetPinValue+0xe0>
    1aee:	4c 81       	ldd	r20, Y+4	; 0x04
    1af0:	5d 81       	ldd	r21, Y+5	; 0x05
    1af2:	42 30       	cpi	r20, 0x02	; 2
    1af4:	51 05       	cpc	r21, r1
    1af6:	51 f1       	breq	.+84     	; 0x1b4c <MDIO_u8GetPinValue+0x9a>
    1af8:	8c 81       	ldd	r24, Y+4	; 0x04
    1afa:	9d 81       	ldd	r25, Y+5	; 0x05
    1afc:	83 30       	cpi	r24, 0x03	; 3
    1afe:	91 05       	cpc	r25, r1
    1b00:	b9 f1       	breq	.+110    	; 0x1b70 <MDIO_u8GetPinValue+0xbe>
    1b02:	47 c0       	rjmp	.+142    	; 0x1b92 <MDIO_u8GetPinValue+0xe0>
	{
		case PORTA: L_u8PinValue=GET_BIT(DIO_PINA_REG,A_u8PinNum); break;
    1b04:	e9 e3       	ldi	r30, 0x39	; 57
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	88 2f       	mov	r24, r24
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a9 01       	movw	r20, r18
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <MDIO_u8GetPinValue+0x6a>
    1b18:	55 95       	asr	r21
    1b1a:	47 95       	ror	r20
    1b1c:	8a 95       	dec	r24
    1b1e:	e2 f7       	brpl	.-8      	; 0x1b18 <MDIO_u8GetPinValue+0x66>
    1b20:	ca 01       	movw	r24, r20
    1b22:	81 70       	andi	r24, 0x01	; 1
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	35 c0       	rjmp	.+106    	; 0x1b92 <MDIO_u8GetPinValue+0xe0>
		case PORTB: L_u8PinValue=GET_BIT(DIO_PINB_REG,A_u8PinNum); break;
    1b28:	e6 e3       	ldi	r30, 0x36	; 54
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	88 2f       	mov	r24, r24
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	a9 01       	movw	r20, r18
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <MDIO_u8GetPinValue+0x8e>
    1b3c:	55 95       	asr	r21
    1b3e:	47 95       	ror	r20
    1b40:	8a 95       	dec	r24
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <MDIO_u8GetPinValue+0x8a>
    1b44:	ca 01       	movw	r24, r20
    1b46:	81 70       	andi	r24, 0x01	; 1
    1b48:	89 83       	std	Y+1, r24	; 0x01
    1b4a:	23 c0       	rjmp	.+70     	; 0x1b92 <MDIO_u8GetPinValue+0xe0>
		case PORTC: L_u8PinValue=GET_BIT(DIO_PINC_REG,A_u8PinNum); break;
    1b4c:	e3 e3       	ldi	r30, 0x33	; 51
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	88 2f       	mov	r24, r24
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	a9 01       	movw	r20, r18
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <MDIO_u8GetPinValue+0xb2>
    1b60:	55 95       	asr	r21
    1b62:	47 95       	ror	r20
    1b64:	8a 95       	dec	r24
    1b66:	e2 f7       	brpl	.-8      	; 0x1b60 <MDIO_u8GetPinValue+0xae>
    1b68:	ca 01       	movw	r24, r20
    1b6a:	81 70       	andi	r24, 0x01	; 1
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	11 c0       	rjmp	.+34     	; 0x1b92 <MDIO_u8GetPinValue+0xe0>
		case PORTD: L_u8PinValue=GET_BIT(DIO_PIND_REG,A_u8PinNum); break;
    1b70:	e0 e3       	ldi	r30, 0x30	; 48
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	88 2f       	mov	r24, r24
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	a9 01       	movw	r20, r18
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <MDIO_u8GetPinValue+0xd6>
    1b84:	55 95       	asr	r21
    1b86:	47 95       	ror	r20
    1b88:	8a 95       	dec	r24
    1b8a:	e2 f7       	brpl	.-8      	; 0x1b84 <MDIO_u8GetPinValue+0xd2>
    1b8c:	ca 01       	movw	r24, r20
    1b8e:	81 70       	andi	r24, 0x01	; 1
    1b90:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_u8PinValue;
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <MDIO_voidTogglePin>:

void MDIO_voidTogglePin(u8 A_u8PortNum,u8 A_u8PinNum)
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <MDIO_voidTogglePin+0x6>
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <MDIO_voidTogglePin+0x8>
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	89 83       	std	Y+1, r24	; 0x01
    1bb2:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNum)
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	3c 83       	std	Y+4, r19	; 0x04
    1bbc:	2b 83       	std	Y+3, r18	; 0x03
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	49 f1       	breq	.+82     	; 0x1c1a <MDIO_voidTogglePin+0x76>
    1bc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bca:	3c 81       	ldd	r19, Y+4	; 0x04
    1bcc:	22 30       	cpi	r18, 0x02	; 2
    1bce:	31 05       	cpc	r19, r1
    1bd0:	2c f4       	brge	.+10     	; 0x1bdc <MDIO_voidTogglePin+0x38>
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	61 f0       	breq	.+24     	; 0x1bf2 <MDIO_voidTogglePin+0x4e>
    1bda:	5a c0       	rjmp	.+180    	; 0x1c90 <MDIO_voidTogglePin+0xec>
    1bdc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bde:	3c 81       	ldd	r19, Y+4	; 0x04
    1be0:	22 30       	cpi	r18, 0x02	; 2
    1be2:	31 05       	cpc	r19, r1
    1be4:	71 f1       	breq	.+92     	; 0x1c42 <MDIO_voidTogglePin+0x9e>
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	83 30       	cpi	r24, 0x03	; 3
    1bec:	91 05       	cpc	r25, r1
    1bee:	e9 f1       	breq	.+122    	; 0x1c6a <MDIO_voidTogglePin+0xc6>
    1bf0:	4f c0       	rjmp	.+158    	; 0x1c90 <MDIO_voidTogglePin+0xec>
		{
			case PORTA: TOOGLE_BIT(DIO_PORTA_REG,A_u8PinNum); break;
    1bf2:	ab e3       	ldi	r26, 0x3B	; 59
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	eb e3       	ldi	r30, 0x3B	; 59
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	48 2f       	mov	r20, r24
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	02 2e       	mov	r0, r18
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <MDIO_voidTogglePin+0x6c>
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	0a 94       	dec	r0
    1c12:	e2 f7       	brpl	.-8      	; 0x1c0c <MDIO_voidTogglePin+0x68>
    1c14:	84 27       	eor	r24, r20
    1c16:	8c 93       	st	X, r24
    1c18:	3b c0       	rjmp	.+118    	; 0x1c90 <MDIO_voidTogglePin+0xec>
			case PORTB: TOOGLE_BIT(DIO_PORTB_REG,A_u8PinNum); break;
    1c1a:	a8 e3       	ldi	r26, 0x38	; 56
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e8 e3       	ldi	r30, 0x38	; 56
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	48 2f       	mov	r20, r24
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	02 2e       	mov	r0, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <MDIO_voidTogglePin+0x94>
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	0a 94       	dec	r0
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <MDIO_voidTogglePin+0x90>
    1c3c:	84 27       	eor	r24, r20
    1c3e:	8c 93       	st	X, r24
    1c40:	27 c0       	rjmp	.+78     	; 0x1c90 <MDIO_voidTogglePin+0xec>
			case PORTC: TOOGLE_BIT(DIO_PORTC_REG,A_u8PinNum); break;
    1c42:	a5 e3       	ldi	r26, 0x35	; 53
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e5 e3       	ldi	r30, 0x35	; 53
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	48 2f       	mov	r20, r24
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	28 2f       	mov	r18, r24
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	02 2e       	mov	r0, r18
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <MDIO_voidTogglePin+0xbc>
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	0a 94       	dec	r0
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <MDIO_voidTogglePin+0xb8>
    1c64:	84 27       	eor	r24, r20
    1c66:	8c 93       	st	X, r24
    1c68:	13 c0       	rjmp	.+38     	; 0x1c90 <MDIO_voidTogglePin+0xec>
			case PORTD: TOOGLE_BIT(DIO_PORTD_REG,A_u8PinNum); break;
    1c6a:	a2 e3       	ldi	r26, 0x32	; 50
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e2 e3       	ldi	r30, 0x32	; 50
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	48 2f       	mov	r20, r24
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	02 2e       	mov	r0, r18
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <MDIO_voidTogglePin+0xe4>
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	0a 94       	dec	r0
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <MDIO_voidTogglePin+0xe0>
    1c8c:	84 27       	eor	r24, r20
    1c8e:	8c 93       	st	X, r24
		}
}
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection (u8 A_u8PortNum,u8 A_u8PortDirection)
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	2c 97       	sbiw	r28, 0x0c	; 12
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
    1cb2:	89 83       	std	Y+1, r24	; 0x01
    1cb4:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNum)
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	3c 87       	std	Y+12, r19	; 0x0c
    1cbe:	2b 87       	std	Y+11, r18	; 0x0b
    1cc0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cc2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	91 05       	cpc	r25, r1
    1cc8:	99 f1       	breq	.+102    	; 0x1d30 <MDIO_voidSetPortDirection+0x92>
    1cca:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ccc:	3c 85       	ldd	r19, Y+12	; 0x0c
    1cce:	22 30       	cpi	r18, 0x02	; 2
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	2c f4       	brge	.+10     	; 0x1cde <MDIO_voidSetPortDirection+0x40>
    1cd4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cd6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	71 f0       	breq	.+28     	; 0x1cf8 <MDIO_voidSetPortDirection+0x5a>
    1cdc:	7c c0       	rjmp	.+248    	; 0x1dd6 <MDIO_voidSetPortDirection+0x138>
    1cde:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ce0:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ce2:	22 30       	cpi	r18, 0x02	; 2
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <MDIO_voidSetPortDirection+0x4c>
    1ce8:	3f c0       	rjmp	.+126    	; 0x1d68 <MDIO_voidSetPortDirection+0xca>
    1cea:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cec:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cee:	83 30       	cpi	r24, 0x03	; 3
    1cf0:	91 05       	cpc	r25, r1
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <MDIO_voidSetPortDirection+0x58>
    1cf4:	55 c0       	rjmp	.+170    	; 0x1da0 <MDIO_voidSetPortDirection+0x102>
    1cf6:	6f c0       	rjmp	.+222    	; 0x1dd6 <MDIO_voidSetPortDirection+0x138>
		{
			case PORTA:
				switch(A_u8PortDirection)
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	3a 87       	std	Y+10, r19	; 0x0a
    1d00:	29 87       	std	Y+9, r18	; 0x09
    1d02:	89 85       	ldd	r24, Y+9	; 0x09
    1d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	51 f0       	breq	.+20     	; 0x1d1e <MDIO_voidSetPortDirection+0x80>
    1d0a:	29 85       	ldd	r18, Y+9	; 0x09
    1d0c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d0e:	21 30       	cpi	r18, 0x01	; 1
    1d10:	31 05       	cpc	r19, r1
    1d12:	49 f4       	brne	.+18     	; 0x1d26 <MDIO_voidSetPortDirection+0x88>
				{
				case OUTPUT:DIO_DDRA_REG=0XFF;; break;
    1d14:	ea e3       	ldi	r30, 0x3A	; 58
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	8f ef       	ldi	r24, 0xFF	; 255
    1d1a:	80 83       	st	Z, r24
    1d1c:	5c c0       	rjmp	.+184    	; 0x1dd6 <MDIO_voidSetPortDirection+0x138>
				case INPUT:DIO_DDRA_REG=0X00; break;
    1d1e:	ea e3       	ldi	r30, 0x3A	; 58
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	10 82       	st	Z, r1
    1d24:	58 c0       	rjmp	.+176    	; 0x1dd6 <MDIO_voidSetPortDirection+0x138>
				default: DIO_DDRA_REG=A_u8PortDirection; break;
    1d26:	ea e3       	ldi	r30, 0x3A	; 58
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	80 83       	st	Z, r24
    1d2e:	53 c0       	rjmp	.+166    	; 0x1dd6 <MDIO_voidSetPortDirection+0x138>
				}
				break;

			case PORTB:
				switch(A_u8PortDirection)
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	38 87       	std	Y+8, r19	; 0x08
    1d38:	2f 83       	std	Y+7, r18	; 0x07
    1d3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d3c:	98 85       	ldd	r25, Y+8	; 0x08
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	51 f0       	breq	.+20     	; 0x1d56 <MDIO_voidSetPortDirection+0xb8>
    1d42:	2f 81       	ldd	r18, Y+7	; 0x07
    1d44:	38 85       	ldd	r19, Y+8	; 0x08
    1d46:	21 30       	cpi	r18, 0x01	; 1
    1d48:	31 05       	cpc	r19, r1
    1d4a:	49 f4       	brne	.+18     	; 0x1d5e <MDIO_voidSetPortDirection+0xc0>
				{
				case OUTPUT:DIO_DDRB_REG=0XFF;; break;
    1d4c:	e7 e3       	ldi	r30, 0x37	; 55
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	8f ef       	ldi	r24, 0xFF	; 255
    1d52:	80 83       	st	Z, r24
    1d54:	40 c0       	rjmp	.+128    	; 0x1dd6 <MDIO_voidSetPortDirection+0x138>
				case INPUT:DIO_DDRB_REG=0X00; break;
    1d56:	e7 e3       	ldi	r30, 0x37	; 55
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	10 82       	st	Z, r1
    1d5c:	3c c0       	rjmp	.+120    	; 0x1dd6 <MDIO_voidSetPortDirection+0x138>
				default: DIO_DDRB_REG=A_u8PortDirection; break;
    1d5e:	e7 e3       	ldi	r30, 0x37	; 55
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	80 83       	st	Z, r24
    1d66:	37 c0       	rjmp	.+110    	; 0x1dd6 <MDIO_voidSetPortDirection+0x138>
				}
				break;

			case PORTC:
				switch(A_u8PortDirection)
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	3e 83       	std	Y+6, r19	; 0x06
    1d70:	2d 83       	std	Y+5, r18	; 0x05
    1d72:	8d 81       	ldd	r24, Y+5	; 0x05
    1d74:	9e 81       	ldd	r25, Y+6	; 0x06
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	51 f0       	breq	.+20     	; 0x1d8e <MDIO_voidSetPortDirection+0xf0>
    1d7a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d7c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d7e:	21 30       	cpi	r18, 0x01	; 1
    1d80:	31 05       	cpc	r19, r1
    1d82:	49 f4       	brne	.+18     	; 0x1d96 <MDIO_voidSetPortDirection+0xf8>
				{
				case OUTPUT:DIO_DDRC_REG=0XFF;; break;
    1d84:	e4 e3       	ldi	r30, 0x34	; 52
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	8f ef       	ldi	r24, 0xFF	; 255
    1d8a:	80 83       	st	Z, r24
    1d8c:	24 c0       	rjmp	.+72     	; 0x1dd6 <MDIO_voidSetPortDirection+0x138>
				case INPUT:DIO_DDRC_REG=0X00; break;
    1d8e:	e4 e3       	ldi	r30, 0x34	; 52
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	10 82       	st	Z, r1
    1d94:	20 c0       	rjmp	.+64     	; 0x1dd6 <MDIO_voidSetPortDirection+0x138>
				default: DIO_DDRC_REG=A_u8PortDirection; break;
    1d96:	e4 e3       	ldi	r30, 0x34	; 52
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	80 83       	st	Z, r24
    1d9e:	1b c0       	rjmp	.+54     	; 0x1dd6 <MDIO_voidSetPortDirection+0x138>
				}
				break;

			case PORTD:
				switch(A_u8PortDirection)
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	3c 83       	std	Y+4, r19	; 0x04
    1da8:	2b 83       	std	Y+3, r18	; 0x03
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	9c 81       	ldd	r25, Y+4	; 0x04
    1dae:	00 97       	sbiw	r24, 0x00	; 0
    1db0:	51 f0       	breq	.+20     	; 0x1dc6 <MDIO_voidSetPortDirection+0x128>
    1db2:	2b 81       	ldd	r18, Y+3	; 0x03
    1db4:	3c 81       	ldd	r19, Y+4	; 0x04
    1db6:	21 30       	cpi	r18, 0x01	; 1
    1db8:	31 05       	cpc	r19, r1
    1dba:	49 f4       	brne	.+18     	; 0x1dce <MDIO_voidSetPortDirection+0x130>
				{
				case OUTPUT:DIO_DDRD_REG=0XFF;; break;
    1dbc:	e1 e3       	ldi	r30, 0x31	; 49
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	8f ef       	ldi	r24, 0xFF	; 255
    1dc2:	80 83       	st	Z, r24
    1dc4:	08 c0       	rjmp	.+16     	; 0x1dd6 <MDIO_voidSetPortDirection+0x138>
				case INPUT:DIO_DDRD_REG=0X00; break;
    1dc6:	e1 e3       	ldi	r30, 0x31	; 49
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	10 82       	st	Z, r1
    1dcc:	04 c0       	rjmp	.+8      	; 0x1dd6 <MDIO_voidSetPortDirection+0x138>
				default: DIO_DDRD_REG=A_u8PortDirection; break;
    1dce:	e1 e3       	ldi	r30, 0x31	; 49
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	80 83       	st	Z, r24
				}
				break;

		}

}
    1dd6:	2c 96       	adiw	r28, 0x0c	; 12
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	f8 94       	cli
    1ddc:	de bf       	out	0x3e, r29	; 62
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	cd bf       	out	0x3d, r28	; 61
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue (u8 A_u8PortNum,u8 A_u8PortValue)
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	00 d0       	rcall	.+0      	; 0x1dee <MDIO_voidSetPortValue+0x6>
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <MDIO_voidSetPortValue+0x8>
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	89 83       	std	Y+1, r24	; 0x01
    1df6:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNum)
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	3c 83       	std	Y+4, r19	; 0x04
    1e00:	2b 83       	std	Y+3, r18	; 0x03
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	9c 81       	ldd	r25, Y+4	; 0x04
    1e06:	81 30       	cpi	r24, 0x01	; 1
    1e08:	91 05       	cpc	r25, r1
    1e0a:	d1 f0       	breq	.+52     	; 0x1e40 <MDIO_voidSetPortValue+0x58>
    1e0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e10:	22 30       	cpi	r18, 0x02	; 2
    1e12:	31 05       	cpc	r19, r1
    1e14:	2c f4       	brge	.+10     	; 0x1e20 <MDIO_voidSetPortValue+0x38>
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	61 f0       	breq	.+24     	; 0x1e36 <MDIO_voidSetPortValue+0x4e>
    1e1e:	1e c0       	rjmp	.+60     	; 0x1e5c <MDIO_voidSetPortValue+0x74>
    1e20:	2b 81       	ldd	r18, Y+3	; 0x03
    1e22:	3c 81       	ldd	r19, Y+4	; 0x04
    1e24:	22 30       	cpi	r18, 0x02	; 2
    1e26:	31 05       	cpc	r19, r1
    1e28:	81 f0       	breq	.+32     	; 0x1e4a <MDIO_voidSetPortValue+0x62>
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2e:	83 30       	cpi	r24, 0x03	; 3
    1e30:	91 05       	cpc	r25, r1
    1e32:	81 f0       	breq	.+32     	; 0x1e54 <MDIO_voidSetPortValue+0x6c>
    1e34:	13 c0       	rjmp	.+38     	; 0x1e5c <MDIO_voidSetPortValue+0x74>
		{
			case PORTA: DIO_PORTA_REG=A_u8PortValue; break;
    1e36:	eb e3       	ldi	r30, 0x3B	; 59
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	80 83       	st	Z, r24
    1e3e:	0e c0       	rjmp	.+28     	; 0x1e5c <MDIO_voidSetPortValue+0x74>
			case PORTB: DIO_PORTB_REG=A_u8PortValue; break;
    1e40:	e8 e3       	ldi	r30, 0x38	; 56
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	80 83       	st	Z, r24
    1e48:	09 c0       	rjmp	.+18     	; 0x1e5c <MDIO_voidSetPortValue+0x74>
			case PORTC: DIO_PORTC_REG=A_u8PortValue; break;
    1e4a:	e5 e3       	ldi	r30, 0x35	; 53
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	80 83       	st	Z, r24
    1e52:	04 c0       	rjmp	.+8      	; 0x1e5c <MDIO_voidSetPortValue+0x74>
			case PORTD: DIO_PORTD_REG=A_u8PortValue; break;
    1e54:	e2 e3       	ldi	r30, 0x32	; 50
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	80 83       	st	Z, r24
		}
}
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <MDIO_u8GetPortValue>:

u8 MDIO_u8GetPortValue(u8 A_u8PortNum)
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	00 d0       	rcall	.+0      	; 0x1e70 <MDIO_u8GetPortValue+0x6>
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <MDIO_u8GetPortValue+0x8>
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    1e76:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8PortValue;
	switch(A_u8PortNum)
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	3c 83       	std	Y+4, r19	; 0x04
    1e80:	2b 83       	std	Y+3, r18	; 0x03
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	81 30       	cpi	r24, 0x01	; 1
    1e88:	91 05       	cpc	r25, r1
    1e8a:	d1 f0       	breq	.+52     	; 0x1ec0 <MDIO_u8GetPortValue+0x56>
    1e8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e90:	22 30       	cpi	r18, 0x02	; 2
    1e92:	31 05       	cpc	r19, r1
    1e94:	2c f4       	brge	.+10     	; 0x1ea0 <MDIO_u8GetPortValue+0x36>
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9a:	00 97       	sbiw	r24, 0x00	; 0
    1e9c:	61 f0       	breq	.+24     	; 0x1eb6 <MDIO_u8GetPortValue+0x4c>
    1e9e:	1e c0       	rjmp	.+60     	; 0x1edc <MDIO_u8GetPortValue+0x72>
    1ea0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea4:	22 30       	cpi	r18, 0x02	; 2
    1ea6:	31 05       	cpc	r19, r1
    1ea8:	81 f0       	breq	.+32     	; 0x1eca <MDIO_u8GetPortValue+0x60>
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	9c 81       	ldd	r25, Y+4	; 0x04
    1eae:	83 30       	cpi	r24, 0x03	; 3
    1eb0:	91 05       	cpc	r25, r1
    1eb2:	81 f0       	breq	.+32     	; 0x1ed4 <MDIO_u8GetPortValue+0x6a>
    1eb4:	13 c0       	rjmp	.+38     	; 0x1edc <MDIO_u8GetPortValue+0x72>
			{
				case PORTA: L_u8PortValue=DIO_PINA_REG; break;
    1eb6:	e9 e3       	ldi	r30, 0x39	; 57
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	0e c0       	rjmp	.+28     	; 0x1edc <MDIO_u8GetPortValue+0x72>
				case PORTB: L_u8PortValue=DIO_PINB_REG; break;
    1ec0:	e6 e3       	ldi	r30, 0x36	; 54
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	09 c0       	rjmp	.+18     	; 0x1edc <MDIO_u8GetPortValue+0x72>
				case PORTC: L_u8PortValue=DIO_PINC_REG; break;
    1eca:	e3 e3       	ldi	r30, 0x33	; 51
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	04 c0       	rjmp	.+8      	; 0x1edc <MDIO_u8GetPortValue+0x72>
				case PORTD: L_u8PortValue=DIO_PIND_REG; break;
    1ed4:	e0 e3       	ldi	r30, 0x30	; 48
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	89 83       	std	Y+1, r24	; 0x01
			}
	return L_u8PortValue;
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <MADC_voidInit>:
#include "../../Lib/Bit_Maths.h"

void (*ADC_callback)(void);

void MADC_voidInit()
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
	// Reference Voltage
	#if ADC_REF_VOLT == AVCC
	 CLR_BIT (ADMUX, REFS1);
    1ef4:	a7 e2       	ldi	r26, 0x27	; 39
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e7 e2       	ldi	r30, 0x27	; 39
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	8f 77       	andi	r24, 0x7F	; 127
    1f00:	8c 93       	st	X, r24
	 SET_BIT(ADMUX, REFS0);
    1f02:	a7 e2       	ldi	r26, 0x27	; 39
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e7 e2       	ldi	r30, 0x27	; 39
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	80 64       	ori	r24, 0x40	; 64
    1f0e:	8c 93       	st	X, r24
	#error "Please select the correct refrence"

#endif

	//Data Adjustment
	CLR_BIT(ADMUX,ADLAR);
    1f10:	a7 e2       	ldi	r26, 0x27	; 39
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e7 e2       	ldi	r30, 0x27	; 39
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	8f 7d       	andi	r24, 0xDF	; 223
    1f1c:	8c 93       	st	X, r24

	//Prescaler Selection //divisor : 64
	ADCSRA=(ADCSRA & 0xf8)|ADC_PreScalar;
    1f1e:	a6 e2       	ldi	r26, 0x26	; 38
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e6 e2       	ldi	r30, 0x26	; 38
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	88 7f       	andi	r24, 0xF8	; 248
    1f2a:	86 60       	ori	r24, 0x06	; 6
    1f2c:	8c 93       	st	X, r24

	//Auto Trigger Enable
	SET_BIT(ADCSRA,ADATE);
    1f2e:	a6 e2       	ldi	r26, 0x26	; 38
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e6 e2       	ldi	r30, 0x26	; 38
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	80 62       	ori	r24, 0x20	; 32
    1f3a:	8c 93       	st	X, r24

	//interrupt enable/disable
#if ADC_INT_ENABLE == ENABLE
	SET_BIT(ADCSRA,ADIE);
    1f3c:	a6 e2       	ldi	r26, 0x26	; 38
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e6 e2       	ldi	r30, 0x26	; 38
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	88 60       	ori	r24, 0x08	; 8
    1f48:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADIE);

#endif

	//Enable ADC
	SET_BIT(ADCSRA,ADEN);
    1f4a:	a6 e2       	ldi	r26, 0x26	; 38
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e6 e2       	ldi	r30, 0x26	; 38
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	80 68       	ori	r24, 0x80	; 128
    1f56:	8c 93       	st	X, r24
}
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <MADC_u16ConvertToDigital_Polling>:

u16 MADC_u16ConvertToDigital_Polling(u8 A_u8ChannelNum)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	0f 92       	push	r0
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	89 83       	std	Y+1, r24	; 0x01

	A_u8ChannelNum &= 0x07;
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	87 70       	andi	r24, 0x07	; 7
    1f6e:	89 83       	std	Y+1, r24	; 0x01

	//select channel
	ADMUX=(ADMUX & 0xe0) | A_u8ChannelNum;
    1f70:	a7 e2       	ldi	r26, 0x27	; 39
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	e7 e2       	ldi	r30, 0x27	; 39
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	98 2f       	mov	r25, r24
    1f7c:	90 7e       	andi	r25, 0xE0	; 224
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	89 2b       	or	r24, r25
    1f82:	8c 93       	st	X, r24

	//start conversion
	SET_BIT(ADCSRA,ADSC);
    1f84:	a6 e2       	ldi	r26, 0x26	; 38
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e6 e2       	ldi	r30, 0x26	; 38
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	80 64       	ori	r24, 0x40	; 64
    1f90:	8c 93       	st	X, r24

	//poll on flag
	while (GET_BIT(ADCSRA , ADSC) != 0){}
    1f92:	e6 e2       	ldi	r30, 0x26	; 38
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	82 95       	swap	r24
    1f9a:	86 95       	lsr	r24
    1f9c:	86 95       	lsr	r24
    1f9e:	83 70       	andi	r24, 0x03	; 3
    1fa0:	88 2f       	mov	r24, r24
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	81 70       	andi	r24, 0x01	; 1
    1fa6:	90 70       	andi	r25, 0x00	; 0
    1fa8:	88 23       	and	r24, r24
    1faa:	99 f7       	brne	.-26     	; 0x1f92 <MADC_u16ConvertToDigital_Polling+0x34>

	//clear flag
	CLR_BIT(ADCSRA,ADIF);
    1fac:	a6 e2       	ldi	r26, 0x26	; 38
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e6 e2       	ldi	r30, 0x26	; 38
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	8f 7e       	andi	r24, 0xEF	; 239
    1fb8:	8c 93       	st	X, r24

	return ADC;
    1fba:	e4 e2       	ldi	r30, 0x24	; 36
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	88 2f       	mov	r24, r24
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
}
    1fc4:	0f 90       	pop	r0
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	08 95       	ret

00001fcc <MADC_voidConvertToDigital_Interrupt>:

void MADC_voidConvertToDigital_Interrupt (u8 A_u8ChannelNum)
{
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	0f 92       	push	r0
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
    1fd6:	89 83       	std	Y+1, r24	; 0x01
	A_u8ChannelNum &= 0x07;
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	87 70       	andi	r24, 0x07	; 7
    1fdc:	89 83       	std	Y+1, r24	; 0x01

		//select channel
		ADMUX=(ADMUX & 0xe0) | A_u8ChannelNum;
    1fde:	a7 e2       	ldi	r26, 0x27	; 39
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	e7 e2       	ldi	r30, 0x27	; 39
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	98 2f       	mov	r25, r24
    1fea:	90 7e       	andi	r25, 0xE0	; 224
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	89 2b       	or	r24, r25
    1ff0:	8c 93       	st	X, r24

		//start conversion
		SET_BIT(ADCSRA,ADSC);
    1ff2:	a6 e2       	ldi	r26, 0x26	; 38
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e6 e2       	ldi	r30, 0x26	; 38
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	80 64       	ori	r24, 0x40	; 64
    1ffe:	8c 93       	st	X, r24
}
    2000:	0f 90       	pop	r0
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <MADC_voidSetCallBack>:

void MADC_voidSetCallBack(void(*A_FuncPtr)(void))
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	00 d0       	rcall	.+0      	; 0x200e <MADC_voidSetCallBack+0x6>
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	9a 83       	std	Y+2, r25	; 0x02
    2014:	89 83       	std	Y+1, r24	; 0x01
	ADC_callback=A_FuncPtr;
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	9a 81       	ldd	r25, Y+2	; 0x02
    201a:	90 93 90 00 	sts	0x0090, r25
    201e:	80 93 8f 00 	sts	0x008F, r24
}
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	08 95       	ret

0000202c <__vector_16>:

void __vector_16(void)  __attribute__((signal));

void __vector_16(void) {
    202c:	1f 92       	push	r1
    202e:	0f 92       	push	r0
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	0f 92       	push	r0
    2034:	11 24       	eor	r1, r1
    2036:	2f 93       	push	r18
    2038:	3f 93       	push	r19
    203a:	4f 93       	push	r20
    203c:	5f 93       	push	r21
    203e:	6f 93       	push	r22
    2040:	7f 93       	push	r23
    2042:	8f 93       	push	r24
    2044:	9f 93       	push	r25
    2046:	af 93       	push	r26
    2048:	bf 93       	push	r27
    204a:	ef 93       	push	r30
    204c:	ff 93       	push	r31
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
	ADC_callback();
    2056:	e0 91 8f 00 	lds	r30, 0x008F
    205a:	f0 91 90 00 	lds	r31, 0x0090
    205e:	09 95       	icall
}
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	ff 91       	pop	r31
    2066:	ef 91       	pop	r30
    2068:	bf 91       	pop	r27
    206a:	af 91       	pop	r26
    206c:	9f 91       	pop	r25
    206e:	8f 91       	pop	r24
    2070:	7f 91       	pop	r23
    2072:	6f 91       	pop	r22
    2074:	5f 91       	pop	r21
    2076:	4f 91       	pop	r20
    2078:	3f 91       	pop	r19
    207a:	2f 91       	pop	r18
    207c:	0f 90       	pop	r0
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	0f 90       	pop	r0
    2082:	1f 90       	pop	r1
    2084:	18 95       	reti

00002086 <H7seg_InitPort>:
		0b01111111,
		0b11101111,
};

void H7seg_InitPort(u8 A_u8PortNum)
{
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	0f 92       	push	r0
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPortDirection(A_u8PortNum,OUTPUT);
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	61 e0       	ldi	r22, 0x01	; 1
    2096:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <MDIO_voidSetPortDirection>
}
    209a:	0f 90       	pop	r0
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	08 95       	ret

000020a2 <H7seg_voidDisplayNum>:

void H7seg_voidDisplayNum(u8 A_u8PortNum,u8 A_u8Num)
{
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <H7seg_voidDisplayNum+0x6>
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	89 83       	std	Y+1, r24	; 0x01
    20ae:	6a 83       	std	Y+2, r22	; 0x02
	if (A_u8Num<=9){
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	8a 30       	cpi	r24, 0x0A	; 10
    20b4:	58 f4       	brcc	.+22     	; 0x20cc <H7seg_voidDisplayNum+0x2a>
#if SSD_Type==0
	MDIO_voidSetPortValue(A_u8PortNum,G_NumArr[A_u8Num]);
    20b6:	8a 81       	ldd	r24, Y+2	; 0x02
    20b8:	88 2f       	mov	r24, r24
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	fc 01       	movw	r30, r24
    20be:	e8 59       	subi	r30, 0x98	; 152
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	90 81       	ld	r25, Z
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	69 2f       	mov	r22, r25
    20c8:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <MDIO_voidSetPortValue>
#elif SSD_Type==1
	MDIO_voidSetPortValue(A_u8PortNum,~G_NumArr[A_u8Num]);
#endif
	}
}
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <H7seg_voidCountUp>:

void H7seg_voidCountUp(u8 A_u8PortNum,u8 A_u8Num) //starts from Num
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	61 97       	sbiw	r28, 0x11	; 17
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
    20ea:	88 8b       	std	Y+16, r24	; 0x10
    20ec:	69 8b       	std	Y+17, r22	; 0x11
	for (u8 counter=A_u8Num; counter<=nine; counter++)
    20ee:	89 89       	ldd	r24, Y+17	; 0x11
    20f0:	8f 87       	std	Y+15, r24	; 0x0f
    20f2:	86 c0       	rjmp	.+268    	; 0x2200 <H7seg_voidCountUp+0x12a>
	{
		MDIO_voidSetPortValue(A_u8PortNum,G_NumArr[counter]);
    20f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f6:	88 2f       	mov	r24, r24
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	fc 01       	movw	r30, r24
    20fc:	e8 59       	subi	r30, 0x98	; 152
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	90 81       	ld	r25, Z
    2102:	88 89       	ldd	r24, Y+16	; 0x10
    2104:	69 2f       	mov	r22, r25
    2106:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <MDIO_voidSetPortValue>
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	aa e7       	ldi	r26, 0x7A	; 122
    2110:	b4 e4       	ldi	r27, 0x44	; 68
    2112:	8b 87       	std	Y+11, r24	; 0x0b
    2114:	9c 87       	std	Y+12, r25	; 0x0c
    2116:	ad 87       	std	Y+13, r26	; 0x0d
    2118:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211a:	6b 85       	ldd	r22, Y+11	; 0x0b
    211c:	7c 85       	ldd	r23, Y+12	; 0x0c
    211e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2120:	9e 85       	ldd	r25, Y+14	; 0x0e
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	4a e7       	ldi	r20, 0x7A	; 122
    2128:	53 e4       	ldi	r21, 0x43	; 67
    212a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	8f 83       	std	Y+7, r24	; 0x07
    2134:	98 87       	std	Y+8, r25	; 0x08
    2136:	a9 87       	std	Y+9, r26	; 0x09
    2138:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    213a:	6f 81       	ldd	r22, Y+7	; 0x07
    213c:	78 85       	ldd	r23, Y+8	; 0x08
    213e:	89 85       	ldd	r24, Y+9	; 0x09
    2140:	9a 85       	ldd	r25, Y+10	; 0x0a
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e8       	ldi	r20, 0x80	; 128
    2148:	5f e3       	ldi	r21, 0x3F	; 63
    214a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    214e:	88 23       	and	r24, r24
    2150:	2c f4       	brge	.+10     	; 0x215c <H7seg_voidCountUp+0x86>
		__ticks = 1;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9e 83       	std	Y+6, r25	; 0x06
    2158:	8d 83       	std	Y+5, r24	; 0x05
    215a:	3f c0       	rjmp	.+126    	; 0x21da <H7seg_voidCountUp+0x104>
	else if (__tmp > 65535)
    215c:	6f 81       	ldd	r22, Y+7	; 0x07
    215e:	78 85       	ldd	r23, Y+8	; 0x08
    2160:	89 85       	ldd	r24, Y+9	; 0x09
    2162:	9a 85       	ldd	r25, Y+10	; 0x0a
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	3f ef       	ldi	r19, 0xFF	; 255
    2168:	4f e7       	ldi	r20, 0x7F	; 127
    216a:	57 e4       	ldi	r21, 0x47	; 71
    216c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2170:	18 16       	cp	r1, r24
    2172:	4c f5       	brge	.+82     	; 0x21c6 <H7seg_voidCountUp+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2174:	6b 85       	ldd	r22, Y+11	; 0x0b
    2176:	7c 85       	ldd	r23, Y+12	; 0x0c
    2178:	8d 85       	ldd	r24, Y+13	; 0x0d
    217a:	9e 85       	ldd	r25, Y+14	; 0x0e
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e2       	ldi	r20, 0x20	; 32
    2182:	51 e4       	ldi	r21, 0x41	; 65
    2184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	bc 01       	movw	r22, r24
    218e:	cd 01       	movw	r24, r26
    2190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	9e 83       	std	Y+6, r25	; 0x06
    219a:	8d 83       	std	Y+5, r24	; 0x05
    219c:	0f c0       	rjmp	.+30     	; 0x21bc <H7seg_voidCountUp+0xe6>
    219e:	89 e1       	ldi	r24, 0x19	; 25
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	9c 83       	std	Y+4, r25	; 0x04
    21a4:	8b 83       	std	Y+3, r24	; 0x03
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	9c 81       	ldd	r25, Y+4	; 0x04
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	f1 f7       	brne	.-4      	; 0x21aa <H7seg_voidCountUp+0xd4>
    21ae:	9c 83       	std	Y+4, r25	; 0x04
    21b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b2:	8d 81       	ldd	r24, Y+5	; 0x05
    21b4:	9e 81       	ldd	r25, Y+6	; 0x06
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	9e 83       	std	Y+6, r25	; 0x06
    21ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21bc:	8d 81       	ldd	r24, Y+5	; 0x05
    21be:	9e 81       	ldd	r25, Y+6	; 0x06
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	69 f7       	brne	.-38     	; 0x219e <H7seg_voidCountUp+0xc8>
    21c4:	14 c0       	rjmp	.+40     	; 0x21ee <H7seg_voidCountUp+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c6:	6f 81       	ldd	r22, Y+7	; 0x07
    21c8:	78 85       	ldd	r23, Y+8	; 0x08
    21ca:	89 85       	ldd	r24, Y+9	; 0x09
    21cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	9e 83       	std	Y+6, r25	; 0x06
    21d8:	8d 83       	std	Y+5, r24	; 0x05
    21da:	8d 81       	ldd	r24, Y+5	; 0x05
    21dc:	9e 81       	ldd	r25, Y+6	; 0x06
    21de:	9a 83       	std	Y+2, r25	; 0x02
    21e0:	89 83       	std	Y+1, r24	; 0x01
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	9a 81       	ldd	r25, Y+2	; 0x02
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	f1 f7       	brne	.-4      	; 0x21e6 <H7seg_voidCountUp+0x110>
    21ea:	9a 83       	std	Y+2, r25	; 0x02
    21ec:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		if (counter==9)
    21ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f0:	89 30       	cpi	r24, 0x09	; 9
    21f2:	19 f4       	brne	.+6      	; 0x21fa <H7seg_voidCountUp+0x124>
			counter=A_u8Num-1;
    21f4:	89 89       	ldd	r24, Y+17	; 0x11
    21f6:	81 50       	subi	r24, 0x01	; 1
    21f8:	8f 87       	std	Y+15, r24	; 0x0f
	}
}

void H7seg_voidCountUp(u8 A_u8PortNum,u8 A_u8Num) //starts from Num
{
	for (u8 counter=A_u8Num; counter<=nine; counter++)
    21fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    21fc:	8f 5f       	subi	r24, 0xFF	; 255
    21fe:	8f 87       	std	Y+15, r24	; 0x0f
    2200:	8f 85       	ldd	r24, Y+15	; 0x0f
    2202:	8a 30       	cpi	r24, 0x0A	; 10
    2204:	08 f4       	brcc	.+2      	; 0x2208 <H7seg_voidCountUp+0x132>
    2206:	76 cf       	rjmp	.-276    	; 0x20f4 <H7seg_voidCountUp+0x1e>
		MDIO_voidSetPortValue(A_u8PortNum,G_NumArr[counter]);
		_delay_ms(1000);
		if (counter==9)
			counter=A_u8Num-1;
	}
}
    2208:	61 96       	adiw	r28, 0x11	; 17
    220a:	0f b6       	in	r0, 0x3f	; 63
    220c:	f8 94       	cli
    220e:	de bf       	out	0x3e, r29	; 62
    2210:	0f be       	out	0x3f, r0	; 63
    2212:	cd bf       	out	0x3d, r28	; 61
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <H7seg_voidTurnOff>:
void H7seg_voidTurnOff(u8 A_u8PortNum){
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	0f 92       	push	r0
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
    2224:	89 83       	std	Y+1, r24	; 0x01

#if SSD_Type==0
	MDIO_voidSetPortValue(A_u8PortNum,0x00);
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	60 e0       	ldi	r22, 0x00	; 0
    222a:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <MDIO_voidSetPortValue>
#elif SSD_Type==1
	MDIO_voidSetPortValue(A_u8PortNum0xff);
#endif

}
    222e:	0f 90       	pop	r0
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <H7seg_voidCountDown>:

void H7seg_voidCountDown(u8 A_u8PortNum,u8 A_u8Num) //starts from Num
{
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	61 97       	sbiw	r28, 0x11	; 17
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	88 8b       	std	Y+16, r24	; 0x10
    224c:	69 8b       	std	Y+17, r22	; 0x11
	for (u8 counter=A_u8Num; counter>=zero; counter--)
    224e:	89 89       	ldd	r24, Y+17	; 0x11
    2250:	8f 87       	std	Y+15, r24	; 0x0f
		{
			MDIO_voidSetPortValue(A_u8PortNum,G_NumArr[counter]);
    2252:	8f 85       	ldd	r24, Y+15	; 0x0f
    2254:	88 2f       	mov	r24, r24
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	fc 01       	movw	r30, r24
    225a:	e8 59       	subi	r30, 0x98	; 152
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	90 81       	ld	r25, Z
    2260:	88 89       	ldd	r24, Y+16	; 0x10
    2262:	69 2f       	mov	r22, r25
    2264:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <MDIO_voidSetPortValue>
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	aa e7       	ldi	r26, 0x7A	; 122
    226e:	b4 e4       	ldi	r27, 0x44	; 68
    2270:	8b 87       	std	Y+11, r24	; 0x0b
    2272:	9c 87       	std	Y+12, r25	; 0x0c
    2274:	ad 87       	std	Y+13, r26	; 0x0d
    2276:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2278:	6b 85       	ldd	r22, Y+11	; 0x0b
    227a:	7c 85       	ldd	r23, Y+12	; 0x0c
    227c:	8d 85       	ldd	r24, Y+13	; 0x0d
    227e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	4a e7       	ldi	r20, 0x7A	; 122
    2286:	53 e4       	ldi	r21, 0x43	; 67
    2288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	8f 83       	std	Y+7, r24	; 0x07
    2292:	98 87       	std	Y+8, r25	; 0x08
    2294:	a9 87       	std	Y+9, r26	; 0x09
    2296:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2298:	6f 81       	ldd	r22, Y+7	; 0x07
    229a:	78 85       	ldd	r23, Y+8	; 0x08
    229c:	89 85       	ldd	r24, Y+9	; 0x09
    229e:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e8       	ldi	r20, 0x80	; 128
    22a6:	5f e3       	ldi	r21, 0x3F	; 63
    22a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ac:	88 23       	and	r24, r24
    22ae:	2c f4       	brge	.+10     	; 0x22ba <H7seg_voidCountDown+0x84>
		__ticks = 1;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	9e 83       	std	Y+6, r25	; 0x06
    22b6:	8d 83       	std	Y+5, r24	; 0x05
    22b8:	3f c0       	rjmp	.+126    	; 0x2338 <H7seg_voidCountDown+0x102>
	else if (__tmp > 65535)
    22ba:	6f 81       	ldd	r22, Y+7	; 0x07
    22bc:	78 85       	ldd	r23, Y+8	; 0x08
    22be:	89 85       	ldd	r24, Y+9	; 0x09
    22c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	3f ef       	ldi	r19, 0xFF	; 255
    22c6:	4f e7       	ldi	r20, 0x7F	; 127
    22c8:	57 e4       	ldi	r21, 0x47	; 71
    22ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ce:	18 16       	cp	r1, r24
    22d0:	4c f5       	brge	.+82     	; 0x2324 <H7seg_voidCountDown+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e2       	ldi	r20, 0x20	; 32
    22e0:	51 e4       	ldi	r21, 0x41	; 65
    22e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	bc 01       	movw	r22, r24
    22ec:	cd 01       	movw	r24, r26
    22ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	9e 83       	std	Y+6, r25	; 0x06
    22f8:	8d 83       	std	Y+5, r24	; 0x05
    22fa:	0f c0       	rjmp	.+30     	; 0x231a <H7seg_voidCountDown+0xe4>
    22fc:	89 e1       	ldi	r24, 0x19	; 25
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	9c 83       	std	Y+4, r25	; 0x04
    2302:	8b 83       	std	Y+3, r24	; 0x03
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	9c 81       	ldd	r25, Y+4	; 0x04
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	f1 f7       	brne	.-4      	; 0x2308 <H7seg_voidCountDown+0xd2>
    230c:	9c 83       	std	Y+4, r25	; 0x04
    230e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2310:	8d 81       	ldd	r24, Y+5	; 0x05
    2312:	9e 81       	ldd	r25, Y+6	; 0x06
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	9e 83       	std	Y+6, r25	; 0x06
    2318:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231a:	8d 81       	ldd	r24, Y+5	; 0x05
    231c:	9e 81       	ldd	r25, Y+6	; 0x06
    231e:	00 97       	sbiw	r24, 0x00	; 0
    2320:	69 f7       	brne	.-38     	; 0x22fc <H7seg_voidCountDown+0xc6>
    2322:	14 c0       	rjmp	.+40     	; 0x234c <H7seg_voidCountDown+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2324:	6f 81       	ldd	r22, Y+7	; 0x07
    2326:	78 85       	ldd	r23, Y+8	; 0x08
    2328:	89 85       	ldd	r24, Y+9	; 0x09
    232a:	9a 85       	ldd	r25, Y+10	; 0x0a
    232c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	9e 83       	std	Y+6, r25	; 0x06
    2336:	8d 83       	std	Y+5, r24	; 0x05
    2338:	8d 81       	ldd	r24, Y+5	; 0x05
    233a:	9e 81       	ldd	r25, Y+6	; 0x06
    233c:	9a 83       	std	Y+2, r25	; 0x02
    233e:	89 83       	std	Y+1, r24	; 0x01
    2340:	89 81       	ldd	r24, Y+1	; 0x01
    2342:	9a 81       	ldd	r25, Y+2	; 0x02
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <H7seg_voidCountDown+0x10e>
    2348:	9a 83       	std	Y+2, r25	; 0x02
    234a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			if (counter==0)
    234c:	8f 85       	ldd	r24, Y+15	; 0x0f
    234e:	88 23       	and	r24, r24
    2350:	19 f4       	brne	.+6      	; 0x2358 <H7seg_voidCountDown+0x122>
				counter=A_u8Num+1;
    2352:	89 89       	ldd	r24, Y+17	; 0x11
    2354:	8f 5f       	subi	r24, 0xFF	; 255
    2356:	8f 87       	std	Y+15, r24	; 0x0f

}

void H7seg_voidCountDown(u8 A_u8PortNum,u8 A_u8Num) //starts from Num
{
	for (u8 counter=A_u8Num; counter>=zero; counter--)
    2358:	8f 85       	ldd	r24, Y+15	; 0x0f
    235a:	81 50       	subi	r24, 0x01	; 1
    235c:	8f 87       	std	Y+15, r24	; 0x0f
    235e:	79 cf       	rjmp	.-270    	; 0x2252 <H7seg_voidCountDown+0x1c>

00002360 <H7seg_voidStartClock>:
				counter=A_u8Num+1;
		}
}

void H7seg_voidStartClock()
{
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	65 97       	sbiw	r28, 0x15	; 21
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	de bf       	out	0x3e, r29	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	cd bf       	out	0x3d, r28	; 61
    u8 L_u8Seconds = 0;
    2374:	1d 8a       	std	Y+21, r1	; 0x15
    u8 L_u8Minutes = 0;
    2376:	1c 8a       	std	Y+20, r1	; 0x14
    u8 L_u8Hours = 0;
    2378:	1b 8a       	std	Y+19, r1	; 0x13

    while (1)
    {
        u8 hours_left = L_u8Hours / 10;
    237a:	8b 89       	ldd	r24, Y+19	; 0x13
    237c:	9a e0       	ldi	r25, 0x0A	; 10
    237e:	69 2f       	mov	r22, r25
    2380:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <__udivmodqi4>
    2384:	8a 8b       	std	Y+18, r24	; 0x12
        u8 hours_right = L_u8Hours % 10;
    2386:	8b 89       	ldd	r24, Y+19	; 0x13
    2388:	9a e0       	ldi	r25, 0x0A	; 10
    238a:	69 2f       	mov	r22, r25
    238c:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <__udivmodqi4>
    2390:	89 2f       	mov	r24, r25
    2392:	89 8b       	std	Y+17, r24	; 0x11
        u8 min_left = L_u8Minutes / 10;
    2394:	8c 89       	ldd	r24, Y+20	; 0x14
    2396:	9a e0       	ldi	r25, 0x0A	; 10
    2398:	69 2f       	mov	r22, r25
    239a:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <__udivmodqi4>
    239e:	88 8b       	std	Y+16, r24	; 0x10
        u8 min_right = L_u8Minutes % 10;
    23a0:	8c 89       	ldd	r24, Y+20	; 0x14
    23a2:	9a e0       	ldi	r25, 0x0A	; 10
    23a4:	69 2f       	mov	r22, r25
    23a6:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <__udivmodqi4>
    23aa:	89 2f       	mov	r24, r25
    23ac:	8f 87       	std	Y+15, r24	; 0x0f

        H7seg_voidDisplayNum(PORTA, hours_left);
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	6a 89       	ldd	r22, Y+18	; 0x12
    23b2:	0e 94 51 10 	call	0x20a2	; 0x20a2 <H7seg_voidDisplayNum>
        H7seg_voidDisplayNum(PORTB, hours_right);
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	69 89       	ldd	r22, Y+17	; 0x11
    23ba:	0e 94 51 10 	call	0x20a2	; 0x20a2 <H7seg_voidDisplayNum>
        H7seg_voidDisplayNum(PORTC, min_left);
    23be:	82 e0       	ldi	r24, 0x02	; 2
    23c0:	68 89       	ldd	r22, Y+16	; 0x10
    23c2:	0e 94 51 10 	call	0x20a2	; 0x20a2 <H7seg_voidDisplayNum>
        H7seg_voidDisplayNum(PORTD, min_right);
    23c6:	83 e0       	ldi	r24, 0x03	; 3
    23c8:	6f 85       	ldd	r22, Y+15	; 0x0f
    23ca:	0e 94 51 10 	call	0x20a2	; 0x20a2 <H7seg_voidDisplayNum>

        if (L_u8Seconds % 2 == 0)
    23ce:	8d 89       	ldd	r24, Y+21	; 0x15
    23d0:	88 2f       	mov	r24, r24
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	81 70       	andi	r24, 0x01	; 1
    23d6:	90 70       	andi	r25, 0x00	; 0
    23d8:	00 97       	sbiw	r24, 0x00	; 0
    23da:	31 f4       	brne	.+12     	; 0x23e8 <H7seg_voidStartClock+0x88>
                {
                    MDIO_voidSetPinValue(PORTA, PIN7, HIGH); // Turn on the LED
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	67 e0       	ldi	r22, 0x07	; 7
    23e0:	41 e0       	ldi	r20, 0x01	; 1
    23e2:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_voidSetPinValue>
    23e6:	05 c0       	rjmp	.+10     	; 0x23f2 <H7seg_voidStartClock+0x92>
                }
                else
                {
                	MDIO_voidSetPinValue(PORTA, PIN7, LOW);  // Turn off the LED
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	67 e0       	ldi	r22, 0x07	; 7
    23ec:	40 e0       	ldi	r20, 0x00	; 0
    23ee:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_voidSetPinValue>
                }

        L_u8Seconds++;
    23f2:	8d 89       	ldd	r24, Y+21	; 0x15
    23f4:	8f 5f       	subi	r24, 0xFF	; 255
    23f6:	8d 8b       	std	Y+21, r24	; 0x15

        if (L_u8Seconds >= 60)
    23f8:	8d 89       	ldd	r24, Y+21	; 0x15
    23fa:	8c 33       	cpi	r24, 0x3C	; 60
    23fc:	78 f0       	brcs	.+30     	; 0x241c <H7seg_voidStartClock+0xbc>
        {
            L_u8Seconds = 0;
    23fe:	1d 8a       	std	Y+21, r1	; 0x15
            L_u8Minutes++;
    2400:	8c 89       	ldd	r24, Y+20	; 0x14
    2402:	8f 5f       	subi	r24, 0xFF	; 255
    2404:	8c 8b       	std	Y+20, r24	; 0x14

            if (L_u8Minutes >= 60)
    2406:	8c 89       	ldd	r24, Y+20	; 0x14
    2408:	8c 33       	cpi	r24, 0x3C	; 60
    240a:	40 f0       	brcs	.+16     	; 0x241c <H7seg_voidStartClock+0xbc>
            {
                L_u8Minutes = 0;
    240c:	1c 8a       	std	Y+20, r1	; 0x14
                L_u8Hours++;
    240e:	8b 89       	ldd	r24, Y+19	; 0x13
    2410:	8f 5f       	subi	r24, 0xFF	; 255
    2412:	8b 8b       	std	Y+19, r24	; 0x13

                if (L_u8Hours >= 24)
    2414:	8b 89       	ldd	r24, Y+19	; 0x13
    2416:	88 31       	cpi	r24, 0x18	; 24
    2418:	08 f0       	brcs	.+2      	; 0x241c <H7seg_voidStartClock+0xbc>
                {
                    L_u8Hours = 0;
    241a:	1b 8a       	std	Y+19, r1	; 0x13
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	aa e7       	ldi	r26, 0x7A	; 122
    2422:	b4 e4       	ldi	r27, 0x44	; 68
    2424:	8b 87       	std	Y+11, r24	; 0x0b
    2426:	9c 87       	std	Y+12, r25	; 0x0c
    2428:	ad 87       	std	Y+13, r26	; 0x0d
    242a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242c:	6b 85       	ldd	r22, Y+11	; 0x0b
    242e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2430:	8d 85       	ldd	r24, Y+13	; 0x0d
    2432:	9e 85       	ldd	r25, Y+14	; 0x0e
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	4a e7       	ldi	r20, 0x7A	; 122
    243a:	53 e4       	ldi	r21, 0x43	; 67
    243c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	8f 83       	std	Y+7, r24	; 0x07
    2446:	98 87       	std	Y+8, r25	; 0x08
    2448:	a9 87       	std	Y+9, r26	; 0x09
    244a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    244c:	6f 81       	ldd	r22, Y+7	; 0x07
    244e:	78 85       	ldd	r23, Y+8	; 0x08
    2450:	89 85       	ldd	r24, Y+9	; 0x09
    2452:	9a 85       	ldd	r25, Y+10	; 0x0a
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	40 e8       	ldi	r20, 0x80	; 128
    245a:	5f e3       	ldi	r21, 0x3F	; 63
    245c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2460:	88 23       	and	r24, r24
    2462:	2c f4       	brge	.+10     	; 0x246e <H7seg_voidStartClock+0x10e>
		__ticks = 1;
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	9e 83       	std	Y+6, r25	; 0x06
    246a:	8d 83       	std	Y+5, r24	; 0x05
    246c:	3f c0       	rjmp	.+126    	; 0x24ec <H7seg_voidStartClock+0x18c>
	else if (__tmp > 65535)
    246e:	6f 81       	ldd	r22, Y+7	; 0x07
    2470:	78 85       	ldd	r23, Y+8	; 0x08
    2472:	89 85       	ldd	r24, Y+9	; 0x09
    2474:	9a 85       	ldd	r25, Y+10	; 0x0a
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	3f ef       	ldi	r19, 0xFF	; 255
    247a:	4f e7       	ldi	r20, 0x7F	; 127
    247c:	57 e4       	ldi	r21, 0x47	; 71
    247e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2482:	18 16       	cp	r1, r24
    2484:	4c f5       	brge	.+82     	; 0x24d8 <H7seg_voidStartClock+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2486:	6b 85       	ldd	r22, Y+11	; 0x0b
    2488:	7c 85       	ldd	r23, Y+12	; 0x0c
    248a:	8d 85       	ldd	r24, Y+13	; 0x0d
    248c:	9e 85       	ldd	r25, Y+14	; 0x0e
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e2       	ldi	r20, 0x20	; 32
    2494:	51 e4       	ldi	r21, 0x41	; 65
    2496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	bc 01       	movw	r22, r24
    24a0:	cd 01       	movw	r24, r26
    24a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	9e 83       	std	Y+6, r25	; 0x06
    24ac:	8d 83       	std	Y+5, r24	; 0x05
    24ae:	0f c0       	rjmp	.+30     	; 0x24ce <H7seg_voidStartClock+0x16e>
    24b0:	89 e1       	ldi	r24, 0x19	; 25
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	9c 83       	std	Y+4, r25	; 0x04
    24b6:	8b 83       	std	Y+3, r24	; 0x03
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	f1 f7       	brne	.-4      	; 0x24bc <H7seg_voidStartClock+0x15c>
    24c0:	9c 83       	std	Y+4, r25	; 0x04
    24c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c4:	8d 81       	ldd	r24, Y+5	; 0x05
    24c6:	9e 81       	ldd	r25, Y+6	; 0x06
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	9e 83       	std	Y+6, r25	; 0x06
    24cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ce:	8d 81       	ldd	r24, Y+5	; 0x05
    24d0:	9e 81       	ldd	r25, Y+6	; 0x06
    24d2:	00 97       	sbiw	r24, 0x00	; 0
    24d4:	69 f7       	brne	.-38     	; 0x24b0 <H7seg_voidStartClock+0x150>
    24d6:	51 cf       	rjmp	.-350    	; 0x237a <H7seg_voidStartClock+0x1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d8:	6f 81       	ldd	r22, Y+7	; 0x07
    24da:	78 85       	ldd	r23, Y+8	; 0x08
    24dc:	89 85       	ldd	r24, Y+9	; 0x09
    24de:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	9e 83       	std	Y+6, r25	; 0x06
    24ea:	8d 83       	std	Y+5, r24	; 0x05
    24ec:	8d 81       	ldd	r24, Y+5	; 0x05
    24ee:	9e 81       	ldd	r25, Y+6	; 0x06
    24f0:	9a 83       	std	Y+2, r25	; 0x02
    24f2:	89 83       	std	Y+1, r24	; 0x01
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	9a 81       	ldd	r25, Y+2	; 0x02
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	f1 f7       	brne	.-4      	; 0x24f8 <H7seg_voidStartClock+0x198>
    24fc:	9a 83       	std	Y+2, r25	; 0x02
    24fe:	89 83       	std	Y+1, r24	; 0x01
    2500:	3c cf       	rjmp	.-392    	; 0x237a <H7seg_voidStartClock+0x1a>

00002502 <HLCD_voidSendCommand>:
#include "../../Lib/defines.h"
#include <util/delay.h>
#include "../../MCAL/DIO/DIO.h"

void HLCD_voidSendCommand(u8 A_u8cmd)
{
    2502:	df 93       	push	r29
    2504:	cf 93       	push	r28
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	6d 97       	sbiw	r28, 0x1d	; 29
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	f8 94       	cli
    2510:	de bf       	out	0x3e, r29	; 62
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	cd bf       	out	0x3d, r28	; 61
    2516:	8d 8f       	std	Y+29, r24	; 0x1d
	//Rs and R/W
	MDIO_voidSetPinDirection(Control_Port,PIN0,OUTPUT);
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	60 e0       	ldi	r22, 0x00	; 0
    251c:	41 e0       	ldi	r20, 0x01	; 1
    251e:	0e 94 2b 0b 	call	0x1656	; 0x1656 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(Control_Port,PIN1,OUTPUT);
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	61 e0       	ldi	r22, 0x01	; 1
    2526:	41 e0       	ldi	r20, 0x01	; 1
    2528:	0e 94 2b 0b 	call	0x1656	; 0x1656 <MDIO_voidSetPinDirection>

	MDIO_voidSetPinValue(Control_Port,PIN0,LOW);
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	60 e0       	ldi	r22, 0x00	; 0
    2530:	40 e0       	ldi	r20, 0x00	; 0
    2532:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Control_Port,PIN1,LOW);
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	61 e0       	ldi	r22, 0x01	; 1
    253a:	40 e0       	ldi	r20, 0x00	; 0
    253c:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_voidSetPinValue>

	//write data on data_port
	MDIO_voidSetPortDirection(Data_Port,OUTPUT);
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	61 e0       	ldi	r22, 0x01	; 1
    2544:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <MDIO_voidSetPortDirection>
	MDIO_voidSetPortValue(Data_Port,A_u8cmd);
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    254c:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <MDIO_voidSetPortValue>

	//Enable pin
	MDIO_voidSetPinDirection(Control_Port,PIN2,OUTPUT);
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	62 e0       	ldi	r22, 0x02	; 2
    2554:	41 e0       	ldi	r20, 0x01	; 1
    2556:	0e 94 2b 0b 	call	0x1656	; 0x1656 <MDIO_voidSetPinDirection>

	MDIO_voidSetPinValue(Control_Port,PIN2,HIGH);
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	62 e0       	ldi	r22, 0x02	; 2
    255e:	41 e0       	ldi	r20, 0x01	; 1
    2560:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_voidSetPinValue>
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	a0 e8       	ldi	r26, 0x80	; 128
    256a:	bf e3       	ldi	r27, 0x3F	; 63
    256c:	89 8f       	std	Y+25, r24	; 0x19
    256e:	9a 8f       	std	Y+26, r25	; 0x1a
    2570:	ab 8f       	std	Y+27, r26	; 0x1b
    2572:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2574:	69 8d       	ldd	r22, Y+25	; 0x19
    2576:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2578:	8b 8d       	ldd	r24, Y+27	; 0x1b
    257a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	4a e7       	ldi	r20, 0x7A	; 122
    2582:	53 e4       	ldi	r21, 0x43	; 67
    2584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	8d 8b       	std	Y+21, r24	; 0x15
    258e:	9e 8b       	std	Y+22, r25	; 0x16
    2590:	af 8b       	std	Y+23, r26	; 0x17
    2592:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2594:	6d 89       	ldd	r22, Y+21	; 0x15
    2596:	7e 89       	ldd	r23, Y+22	; 0x16
    2598:	8f 89       	ldd	r24, Y+23	; 0x17
    259a:	98 8d       	ldd	r25, Y+24	; 0x18
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	40 e8       	ldi	r20, 0x80	; 128
    25a2:	5f e3       	ldi	r21, 0x3F	; 63
    25a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a8:	88 23       	and	r24, r24
    25aa:	2c f4       	brge	.+10     	; 0x25b6 <HLCD_voidSendCommand+0xb4>
		__ticks = 1;
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	9c 8b       	std	Y+20, r25	; 0x14
    25b2:	8b 8b       	std	Y+19, r24	; 0x13
    25b4:	3f c0       	rjmp	.+126    	; 0x2634 <HLCD_voidSendCommand+0x132>
	else if (__tmp > 65535)
    25b6:	6d 89       	ldd	r22, Y+21	; 0x15
    25b8:	7e 89       	ldd	r23, Y+22	; 0x16
    25ba:	8f 89       	ldd	r24, Y+23	; 0x17
    25bc:	98 8d       	ldd	r25, Y+24	; 0x18
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	3f ef       	ldi	r19, 0xFF	; 255
    25c2:	4f e7       	ldi	r20, 0x7F	; 127
    25c4:	57 e4       	ldi	r21, 0x47	; 71
    25c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ca:	18 16       	cp	r1, r24
    25cc:	4c f5       	brge	.+82     	; 0x2620 <HLCD_voidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ce:	69 8d       	ldd	r22, Y+25	; 0x19
    25d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e2       	ldi	r20, 0x20	; 32
    25dc:	51 e4       	ldi	r21, 0x41	; 65
    25de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	bc 01       	movw	r22, r24
    25e8:	cd 01       	movw	r24, r26
    25ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	9c 8b       	std	Y+20, r25	; 0x14
    25f4:	8b 8b       	std	Y+19, r24	; 0x13
    25f6:	0f c0       	rjmp	.+30     	; 0x2616 <HLCD_voidSendCommand+0x114>
    25f8:	89 e1       	ldi	r24, 0x19	; 25
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	9a 8b       	std	Y+18, r25	; 0x12
    25fe:	89 8b       	std	Y+17, r24	; 0x11
    2600:	89 89       	ldd	r24, Y+17	; 0x11
    2602:	9a 89       	ldd	r25, Y+18	; 0x12
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <HLCD_voidSendCommand+0x102>
    2608:	9a 8b       	std	Y+18, r25	; 0x12
    260a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260c:	8b 89       	ldd	r24, Y+19	; 0x13
    260e:	9c 89       	ldd	r25, Y+20	; 0x14
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	9c 8b       	std	Y+20, r25	; 0x14
    2614:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2616:	8b 89       	ldd	r24, Y+19	; 0x13
    2618:	9c 89       	ldd	r25, Y+20	; 0x14
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	69 f7       	brne	.-38     	; 0x25f8 <HLCD_voidSendCommand+0xf6>
    261e:	14 c0       	rjmp	.+40     	; 0x2648 <HLCD_voidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2620:	6d 89       	ldd	r22, Y+21	; 0x15
    2622:	7e 89       	ldd	r23, Y+22	; 0x16
    2624:	8f 89       	ldd	r24, Y+23	; 0x17
    2626:	98 8d       	ldd	r25, Y+24	; 0x18
    2628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	9c 8b       	std	Y+20, r25	; 0x14
    2632:	8b 8b       	std	Y+19, r24	; 0x13
    2634:	8b 89       	ldd	r24, Y+19	; 0x13
    2636:	9c 89       	ldd	r25, Y+20	; 0x14
    2638:	98 8b       	std	Y+16, r25	; 0x10
    263a:	8f 87       	std	Y+15, r24	; 0x0f
    263c:	8f 85       	ldd	r24, Y+15	; 0x0f
    263e:	98 89       	ldd	r25, Y+16	; 0x10
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <HLCD_voidSendCommand+0x13e>
    2644:	98 8b       	std	Y+16, r25	; 0x10
    2646:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(Control_Port,PIN2,LOW);
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	62 e0       	ldi	r22, 0x02	; 2
    264c:	40 e0       	ldi	r20, 0x00	; 0
    264e:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_voidSetPinValue>
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	a0 e8       	ldi	r26, 0x80	; 128
    2658:	bf e3       	ldi	r27, 0x3F	; 63
    265a:	8b 87       	std	Y+11, r24	; 0x0b
    265c:	9c 87       	std	Y+12, r25	; 0x0c
    265e:	ad 87       	std	Y+13, r26	; 0x0d
    2660:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2662:	6b 85       	ldd	r22, Y+11	; 0x0b
    2664:	7c 85       	ldd	r23, Y+12	; 0x0c
    2666:	8d 85       	ldd	r24, Y+13	; 0x0d
    2668:	9e 85       	ldd	r25, Y+14	; 0x0e
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	4a e7       	ldi	r20, 0x7A	; 122
    2670:	53 e4       	ldi	r21, 0x43	; 67
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	8f 83       	std	Y+7, r24	; 0x07
    267c:	98 87       	std	Y+8, r25	; 0x08
    267e:	a9 87       	std	Y+9, r26	; 0x09
    2680:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2682:	6f 81       	ldd	r22, Y+7	; 0x07
    2684:	78 85       	ldd	r23, Y+8	; 0x08
    2686:	89 85       	ldd	r24, Y+9	; 0x09
    2688:	9a 85       	ldd	r25, Y+10	; 0x0a
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e8       	ldi	r20, 0x80	; 128
    2690:	5f e3       	ldi	r21, 0x3F	; 63
    2692:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2696:	88 23       	and	r24, r24
    2698:	2c f4       	brge	.+10     	; 0x26a4 <HLCD_voidSendCommand+0x1a2>
		__ticks = 1;
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	9e 83       	std	Y+6, r25	; 0x06
    26a0:	8d 83       	std	Y+5, r24	; 0x05
    26a2:	3f c0       	rjmp	.+126    	; 0x2722 <HLCD_voidSendCommand+0x220>
	else if (__tmp > 65535)
    26a4:	6f 81       	ldd	r22, Y+7	; 0x07
    26a6:	78 85       	ldd	r23, Y+8	; 0x08
    26a8:	89 85       	ldd	r24, Y+9	; 0x09
    26aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	3f ef       	ldi	r19, 0xFF	; 255
    26b0:	4f e7       	ldi	r20, 0x7F	; 127
    26b2:	57 e4       	ldi	r21, 0x47	; 71
    26b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b8:	18 16       	cp	r1, r24
    26ba:	4c f5       	brge	.+82     	; 0x270e <HLCD_voidSendCommand+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26be:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e2       	ldi	r20, 0x20	; 32
    26ca:	51 e4       	ldi	r21, 0x41	; 65
    26cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	bc 01       	movw	r22, r24
    26d6:	cd 01       	movw	r24, r26
    26d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	9e 83       	std	Y+6, r25	; 0x06
    26e2:	8d 83       	std	Y+5, r24	; 0x05
    26e4:	0f c0       	rjmp	.+30     	; 0x2704 <HLCD_voidSendCommand+0x202>
    26e6:	89 e1       	ldi	r24, 0x19	; 25
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	9c 83       	std	Y+4, r25	; 0x04
    26ec:	8b 83       	std	Y+3, r24	; 0x03
    26ee:	8b 81       	ldd	r24, Y+3	; 0x03
    26f0:	9c 81       	ldd	r25, Y+4	; 0x04
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <HLCD_voidSendCommand+0x1f0>
    26f6:	9c 83       	std	Y+4, r25	; 0x04
    26f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fa:	8d 81       	ldd	r24, Y+5	; 0x05
    26fc:	9e 81       	ldd	r25, Y+6	; 0x06
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	9e 83       	std	Y+6, r25	; 0x06
    2702:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2704:	8d 81       	ldd	r24, Y+5	; 0x05
    2706:	9e 81       	ldd	r25, Y+6	; 0x06
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	69 f7       	brne	.-38     	; 0x26e6 <HLCD_voidSendCommand+0x1e4>
    270c:	14 c0       	rjmp	.+40     	; 0x2736 <HLCD_voidSendCommand+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270e:	6f 81       	ldd	r22, Y+7	; 0x07
    2710:	78 85       	ldd	r23, Y+8	; 0x08
    2712:	89 85       	ldd	r24, Y+9	; 0x09
    2714:	9a 85       	ldd	r25, Y+10	; 0x0a
    2716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	9e 83       	std	Y+6, r25	; 0x06
    2720:	8d 83       	std	Y+5, r24	; 0x05
    2722:	8d 81       	ldd	r24, Y+5	; 0x05
    2724:	9e 81       	ldd	r25, Y+6	; 0x06
    2726:	9a 83       	std	Y+2, r25	; 0x02
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	9a 81       	ldd	r25, Y+2	; 0x02
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	f1 f7       	brne	.-4      	; 0x272e <HLCD_voidSendCommand+0x22c>
    2732:	9a 83       	std	Y+2, r25	; 0x02
    2734:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2736:	6d 96       	adiw	r28, 0x1d	; 29
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	cf 91       	pop	r28
    2744:	df 91       	pop	r29
    2746:	08 95       	ret

00002748 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8data)
{
    2748:	df 93       	push	r29
    274a:	cf 93       	push	r28
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	6d 97       	sbiw	r28, 0x1d	; 29
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	de bf       	out	0x3e, r29	; 62
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	cd bf       	out	0x3d, r28	; 61
    275c:	8d 8f       	std	Y+29, r24	; 0x1d
	//Rs and R/W
	MDIO_voidSetPinDirection(Control_Port,PIN0,OUTPUT);
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	60 e0       	ldi	r22, 0x00	; 0
    2762:	41 e0       	ldi	r20, 0x01	; 1
    2764:	0e 94 2b 0b 	call	0x1656	; 0x1656 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(Control_Port,PIN1,OUTPUT);
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	61 e0       	ldi	r22, 0x01	; 1
    276c:	41 e0       	ldi	r20, 0x01	; 1
    276e:	0e 94 2b 0b 	call	0x1656	; 0x1656 <MDIO_voidSetPinDirection>

	MDIO_voidSetPinValue(Control_Port,PIN0,HIGH);
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	60 e0       	ldi	r22, 0x00	; 0
    2776:	41 e0       	ldi	r20, 0x01	; 1
    2778:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Control_Port,PIN1,LOW);
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	61 e0       	ldi	r22, 0x01	; 1
    2780:	40 e0       	ldi	r20, 0x00	; 0
    2782:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_voidSetPinValue>

	//write data on data_port
	MDIO_voidSetPortDirection(Data_Port,OUTPUT);
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	61 e0       	ldi	r22, 0x01	; 1
    278a:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <MDIO_voidSetPortDirection>
	MDIO_voidSetPortValue(Data_Port,A_u8data);
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2792:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <MDIO_voidSetPortValue>

	//Enable pin
	MDIO_voidSetPinDirection(Control_Port,PIN2,OUTPUT);
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	62 e0       	ldi	r22, 0x02	; 2
    279a:	41 e0       	ldi	r20, 0x01	; 1
    279c:	0e 94 2b 0b 	call	0x1656	; 0x1656 <MDIO_voidSetPinDirection>

	MDIO_voidSetPinValue(Control_Port,PIN2,HIGH);
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	62 e0       	ldi	r22, 0x02	; 2
    27a4:	41 e0       	ldi	r20, 0x01	; 1
    27a6:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_voidSetPinValue>
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	a0 e8       	ldi	r26, 0x80	; 128
    27b0:	bf e3       	ldi	r27, 0x3F	; 63
    27b2:	89 8f       	std	Y+25, r24	; 0x19
    27b4:	9a 8f       	std	Y+26, r25	; 0x1a
    27b6:	ab 8f       	std	Y+27, r26	; 0x1b
    27b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ba:	69 8d       	ldd	r22, Y+25	; 0x19
    27bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	4a e7       	ldi	r20, 0x7A	; 122
    27c8:	53 e4       	ldi	r21, 0x43	; 67
    27ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	8d 8b       	std	Y+21, r24	; 0x15
    27d4:	9e 8b       	std	Y+22, r25	; 0x16
    27d6:	af 8b       	std	Y+23, r26	; 0x17
    27d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27da:	6d 89       	ldd	r22, Y+21	; 0x15
    27dc:	7e 89       	ldd	r23, Y+22	; 0x16
    27de:	8f 89       	ldd	r24, Y+23	; 0x17
    27e0:	98 8d       	ldd	r25, Y+24	; 0x18
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	40 e8       	ldi	r20, 0x80	; 128
    27e8:	5f e3       	ldi	r21, 0x3F	; 63
    27ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ee:	88 23       	and	r24, r24
    27f0:	2c f4       	brge	.+10     	; 0x27fc <HLCD_voidSendData+0xb4>
		__ticks = 1;
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	9c 8b       	std	Y+20, r25	; 0x14
    27f8:	8b 8b       	std	Y+19, r24	; 0x13
    27fa:	3f c0       	rjmp	.+126    	; 0x287a <HLCD_voidSendData+0x132>
	else if (__tmp > 65535)
    27fc:	6d 89       	ldd	r22, Y+21	; 0x15
    27fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2800:	8f 89       	ldd	r24, Y+23	; 0x17
    2802:	98 8d       	ldd	r25, Y+24	; 0x18
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	3f ef       	ldi	r19, 0xFF	; 255
    2808:	4f e7       	ldi	r20, 0x7F	; 127
    280a:	57 e4       	ldi	r21, 0x47	; 71
    280c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2810:	18 16       	cp	r1, r24
    2812:	4c f5       	brge	.+82     	; 0x2866 <HLCD_voidSendData+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2814:	69 8d       	ldd	r22, Y+25	; 0x19
    2816:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2818:	8b 8d       	ldd	r24, Y+27	; 0x1b
    281a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e2       	ldi	r20, 0x20	; 32
    2822:	51 e4       	ldi	r21, 0x41	; 65
    2824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	bc 01       	movw	r22, r24
    282e:	cd 01       	movw	r24, r26
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	9c 8b       	std	Y+20, r25	; 0x14
    283a:	8b 8b       	std	Y+19, r24	; 0x13
    283c:	0f c0       	rjmp	.+30     	; 0x285c <HLCD_voidSendData+0x114>
    283e:	89 e1       	ldi	r24, 0x19	; 25
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	9a 8b       	std	Y+18, r25	; 0x12
    2844:	89 8b       	std	Y+17, r24	; 0x11
    2846:	89 89       	ldd	r24, Y+17	; 0x11
    2848:	9a 89       	ldd	r25, Y+18	; 0x12
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	f1 f7       	brne	.-4      	; 0x284a <HLCD_voidSendData+0x102>
    284e:	9a 8b       	std	Y+18, r25	; 0x12
    2850:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2852:	8b 89       	ldd	r24, Y+19	; 0x13
    2854:	9c 89       	ldd	r25, Y+20	; 0x14
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	9c 8b       	std	Y+20, r25	; 0x14
    285a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285c:	8b 89       	ldd	r24, Y+19	; 0x13
    285e:	9c 89       	ldd	r25, Y+20	; 0x14
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	69 f7       	brne	.-38     	; 0x283e <HLCD_voidSendData+0xf6>
    2864:	14 c0       	rjmp	.+40     	; 0x288e <HLCD_voidSendData+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2866:	6d 89       	ldd	r22, Y+21	; 0x15
    2868:	7e 89       	ldd	r23, Y+22	; 0x16
    286a:	8f 89       	ldd	r24, Y+23	; 0x17
    286c:	98 8d       	ldd	r25, Y+24	; 0x18
    286e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	9c 8b       	std	Y+20, r25	; 0x14
    2878:	8b 8b       	std	Y+19, r24	; 0x13
    287a:	8b 89       	ldd	r24, Y+19	; 0x13
    287c:	9c 89       	ldd	r25, Y+20	; 0x14
    287e:	98 8b       	std	Y+16, r25	; 0x10
    2880:	8f 87       	std	Y+15, r24	; 0x0f
    2882:	8f 85       	ldd	r24, Y+15	; 0x0f
    2884:	98 89       	ldd	r25, Y+16	; 0x10
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	f1 f7       	brne	.-4      	; 0x2886 <HLCD_voidSendData+0x13e>
    288a:	98 8b       	std	Y+16, r25	; 0x10
    288c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(Control_Port,PIN2,LOW);
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	62 e0       	ldi	r22, 0x02	; 2
    2892:	40 e0       	ldi	r20, 0x00	; 0
    2894:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_voidSetPinValue>
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	a0 e8       	ldi	r26, 0x80	; 128
    289e:	bf e3       	ldi	r27, 0x3F	; 63
    28a0:	8b 87       	std	Y+11, r24	; 0x0b
    28a2:	9c 87       	std	Y+12, r25	; 0x0c
    28a4:	ad 87       	std	Y+13, r26	; 0x0d
    28a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	4a e7       	ldi	r20, 0x7A	; 122
    28b6:	53 e4       	ldi	r21, 0x43	; 67
    28b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	8f 83       	std	Y+7, r24	; 0x07
    28c2:	98 87       	std	Y+8, r25	; 0x08
    28c4:	a9 87       	std	Y+9, r26	; 0x09
    28c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28c8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ca:	78 85       	ldd	r23, Y+8	; 0x08
    28cc:	89 85       	ldd	r24, Y+9	; 0x09
    28ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	40 e8       	ldi	r20, 0x80	; 128
    28d6:	5f e3       	ldi	r21, 0x3F	; 63
    28d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28dc:	88 23       	and	r24, r24
    28de:	2c f4       	brge	.+10     	; 0x28ea <HLCD_voidSendData+0x1a2>
		__ticks = 1;
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	9e 83       	std	Y+6, r25	; 0x06
    28e6:	8d 83       	std	Y+5, r24	; 0x05
    28e8:	3f c0       	rjmp	.+126    	; 0x2968 <HLCD_voidSendData+0x220>
	else if (__tmp > 65535)
    28ea:	6f 81       	ldd	r22, Y+7	; 0x07
    28ec:	78 85       	ldd	r23, Y+8	; 0x08
    28ee:	89 85       	ldd	r24, Y+9	; 0x09
    28f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	3f ef       	ldi	r19, 0xFF	; 255
    28f6:	4f e7       	ldi	r20, 0x7F	; 127
    28f8:	57 e4       	ldi	r21, 0x47	; 71
    28fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28fe:	18 16       	cp	r1, r24
    2900:	4c f5       	brge	.+82     	; 0x2954 <HLCD_voidSendData+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2902:	6b 85       	ldd	r22, Y+11	; 0x0b
    2904:	7c 85       	ldd	r23, Y+12	; 0x0c
    2906:	8d 85       	ldd	r24, Y+13	; 0x0d
    2908:	9e 85       	ldd	r25, Y+14	; 0x0e
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e2       	ldi	r20, 0x20	; 32
    2910:	51 e4       	ldi	r21, 0x41	; 65
    2912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	bc 01       	movw	r22, r24
    291c:	cd 01       	movw	r24, r26
    291e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	9e 83       	std	Y+6, r25	; 0x06
    2928:	8d 83       	std	Y+5, r24	; 0x05
    292a:	0f c0       	rjmp	.+30     	; 0x294a <HLCD_voidSendData+0x202>
    292c:	89 e1       	ldi	r24, 0x19	; 25
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	9c 83       	std	Y+4, r25	; 0x04
    2932:	8b 83       	std	Y+3, r24	; 0x03
    2934:	8b 81       	ldd	r24, Y+3	; 0x03
    2936:	9c 81       	ldd	r25, Y+4	; 0x04
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	f1 f7       	brne	.-4      	; 0x2938 <HLCD_voidSendData+0x1f0>
    293c:	9c 83       	std	Y+4, r25	; 0x04
    293e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2940:	8d 81       	ldd	r24, Y+5	; 0x05
    2942:	9e 81       	ldd	r25, Y+6	; 0x06
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	9e 83       	std	Y+6, r25	; 0x06
    2948:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294a:	8d 81       	ldd	r24, Y+5	; 0x05
    294c:	9e 81       	ldd	r25, Y+6	; 0x06
    294e:	00 97       	sbiw	r24, 0x00	; 0
    2950:	69 f7       	brne	.-38     	; 0x292c <HLCD_voidSendData+0x1e4>
    2952:	14 c0       	rjmp	.+40     	; 0x297c <HLCD_voidSendData+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2954:	6f 81       	ldd	r22, Y+7	; 0x07
    2956:	78 85       	ldd	r23, Y+8	; 0x08
    2958:	89 85       	ldd	r24, Y+9	; 0x09
    295a:	9a 85       	ldd	r25, Y+10	; 0x0a
    295c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	9e 83       	std	Y+6, r25	; 0x06
    2966:	8d 83       	std	Y+5, r24	; 0x05
    2968:	8d 81       	ldd	r24, Y+5	; 0x05
    296a:	9e 81       	ldd	r25, Y+6	; 0x06
    296c:	9a 83       	std	Y+2, r25	; 0x02
    296e:	89 83       	std	Y+1, r24	; 0x01
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	9a 81       	ldd	r25, Y+2	; 0x02
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	f1 f7       	brne	.-4      	; 0x2974 <HLCD_voidSendData+0x22c>
    2978:	9a 83       	std	Y+2, r25	; 0x02
    297a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    297c:	6d 96       	adiw	r28, 0x1d	; 29
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	cf 91       	pop	r28
    298a:	df 91       	pop	r29
    298c:	08 95       	ret

0000298e <HLCD_void8bitInit>:

void HLCD_void8bitInit()
{
    298e:	df 93       	push	r29
    2990:	cf 93       	push	r28
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
    2996:	e8 97       	sbiw	r28, 0x38	; 56
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	f8 94       	cli
    299c:	de bf       	out	0x3e, r29	; 62
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	cd bf       	out	0x3d, r28	; 61
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	ac e0       	ldi	r26, 0x0C	; 12
    29a8:	b2 e4       	ldi	r27, 0x42	; 66
    29aa:	8d ab       	std	Y+53, r24	; 0x35
    29ac:	9e ab       	std	Y+54, r25	; 0x36
    29ae:	af ab       	std	Y+55, r26	; 0x37
    29b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b2:	6d a9       	ldd	r22, Y+53	; 0x35
    29b4:	7e a9       	ldd	r23, Y+54	; 0x36
    29b6:	8f a9       	ldd	r24, Y+55	; 0x37
    29b8:	98 ad       	ldd	r25, Y+56	; 0x38
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	4a e7       	ldi	r20, 0x7A	; 122
    29c0:	53 e4       	ldi	r21, 0x43	; 67
    29c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	89 ab       	std	Y+49, r24	; 0x31
    29cc:	9a ab       	std	Y+50, r25	; 0x32
    29ce:	ab ab       	std	Y+51, r26	; 0x33
    29d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29d2:	69 a9       	ldd	r22, Y+49	; 0x31
    29d4:	7a a9       	ldd	r23, Y+50	; 0x32
    29d6:	8b a9       	ldd	r24, Y+51	; 0x33
    29d8:	9c a9       	ldd	r25, Y+52	; 0x34
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	40 e8       	ldi	r20, 0x80	; 128
    29e0:	5f e3       	ldi	r21, 0x3F	; 63
    29e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29e6:	88 23       	and	r24, r24
    29e8:	2c f4       	brge	.+10     	; 0x29f4 <HLCD_void8bitInit+0x66>
		__ticks = 1;
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	98 ab       	std	Y+48, r25	; 0x30
    29f0:	8f a7       	std	Y+47, r24	; 0x2f
    29f2:	3f c0       	rjmp	.+126    	; 0x2a72 <HLCD_void8bitInit+0xe4>
	else if (__tmp > 65535)
    29f4:	69 a9       	ldd	r22, Y+49	; 0x31
    29f6:	7a a9       	ldd	r23, Y+50	; 0x32
    29f8:	8b a9       	ldd	r24, Y+51	; 0x33
    29fa:	9c a9       	ldd	r25, Y+52	; 0x34
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	3f ef       	ldi	r19, 0xFF	; 255
    2a00:	4f e7       	ldi	r20, 0x7F	; 127
    2a02:	57 e4       	ldi	r21, 0x47	; 71
    2a04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a08:	18 16       	cp	r1, r24
    2a0a:	4c f5       	brge	.+82     	; 0x2a5e <HLCD_void8bitInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a0c:	6d a9       	ldd	r22, Y+53	; 0x35
    2a0e:	7e a9       	ldd	r23, Y+54	; 0x36
    2a10:	8f a9       	ldd	r24, Y+55	; 0x37
    2a12:	98 ad       	ldd	r25, Y+56	; 0x38
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e2       	ldi	r20, 0x20	; 32
    2a1a:	51 e4       	ldi	r21, 0x41	; 65
    2a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	bc 01       	movw	r22, r24
    2a26:	cd 01       	movw	r24, r26
    2a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	98 ab       	std	Y+48, r25	; 0x30
    2a32:	8f a7       	std	Y+47, r24	; 0x2f
    2a34:	0f c0       	rjmp	.+30     	; 0x2a54 <HLCD_void8bitInit+0xc6>
    2a36:	89 e1       	ldi	r24, 0x19	; 25
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	9e a7       	std	Y+46, r25	; 0x2e
    2a3c:	8d a7       	std	Y+45, r24	; 0x2d
    2a3e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a40:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	f1 f7       	brne	.-4      	; 0x2a42 <HLCD_void8bitInit+0xb4>
    2a46:	9e a7       	std	Y+46, r25	; 0x2e
    2a48:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a4c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	98 ab       	std	Y+48, r25	; 0x30
    2a52:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a54:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a56:	98 a9       	ldd	r25, Y+48	; 0x30
    2a58:	00 97       	sbiw	r24, 0x00	; 0
    2a5a:	69 f7       	brne	.-38     	; 0x2a36 <HLCD_void8bitInit+0xa8>
    2a5c:	14 c0       	rjmp	.+40     	; 0x2a86 <HLCD_void8bitInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5e:	69 a9       	ldd	r22, Y+49	; 0x31
    2a60:	7a a9       	ldd	r23, Y+50	; 0x32
    2a62:	8b a9       	ldd	r24, Y+51	; 0x33
    2a64:	9c a9       	ldd	r25, Y+52	; 0x34
    2a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	98 ab       	std	Y+48, r25	; 0x30
    2a70:	8f a7       	std	Y+47, r24	; 0x2f
    2a72:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a74:	98 a9       	ldd	r25, Y+48	; 0x30
    2a76:	9c a7       	std	Y+44, r25	; 0x2c
    2a78:	8b a7       	std	Y+43, r24	; 0x2b
    2a7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a7e:	01 97       	sbiw	r24, 0x01	; 1
    2a80:	f1 f7       	brne	.-4      	; 0x2a7e <HLCD_void8bitInit+0xf0>
    2a82:	9c a7       	std	Y+44, r25	; 0x2c
    2a84:	8b a7       	std	Y+43, r24	; 0x2b
	 //Delay on power on
	  _delay_ms(35);

	  //Set function
	  HLCD_voidSendCommand(LCD_FunctionSet);
    2a86:	8c e3       	ldi	r24, 0x3C	; 60
    2a88:	0e 94 81 12 	call	0x2502	; 0x2502 <HLCD_voidSendCommand>
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	a0 e8       	ldi	r26, 0x80	; 128
    2a92:	bf e3       	ldi	r27, 0x3F	; 63
    2a94:	8f a3       	std	Y+39, r24	; 0x27
    2a96:	98 a7       	std	Y+40, r25	; 0x28
    2a98:	a9 a7       	std	Y+41, r26	; 0x29
    2a9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9c:	6f a1       	ldd	r22, Y+39	; 0x27
    2a9e:	78 a5       	ldd	r23, Y+40	; 0x28
    2aa0:	89 a5       	ldd	r24, Y+41	; 0x29
    2aa2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a e7       	ldi	r20, 0x7A	; 122
    2aaa:	53 e4       	ldi	r21, 0x43	; 67
    2aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	8b a3       	std	Y+35, r24	; 0x23
    2ab6:	9c a3       	std	Y+36, r25	; 0x24
    2ab8:	ad a3       	std	Y+37, r26	; 0x25
    2aba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2abc:	6b a1       	ldd	r22, Y+35	; 0x23
    2abe:	7c a1       	ldd	r23, Y+36	; 0x24
    2ac0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ac2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e8       	ldi	r20, 0x80	; 128
    2aca:	5f e3       	ldi	r21, 0x3F	; 63
    2acc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ad0:	88 23       	and	r24, r24
    2ad2:	2c f4       	brge	.+10     	; 0x2ade <HLCD_void8bitInit+0x150>
		__ticks = 1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9a a3       	std	Y+34, r25	; 0x22
    2ada:	89 a3       	std	Y+33, r24	; 0x21
    2adc:	3f c0       	rjmp	.+126    	; 0x2b5c <HLCD_void8bitInit+0x1ce>
	else if (__tmp > 65535)
    2ade:	6b a1       	ldd	r22, Y+35	; 0x23
    2ae0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ae2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ae4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	3f ef       	ldi	r19, 0xFF	; 255
    2aea:	4f e7       	ldi	r20, 0x7F	; 127
    2aec:	57 e4       	ldi	r21, 0x47	; 71
    2aee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2af2:	18 16       	cp	r1, r24
    2af4:	4c f5       	brge	.+82     	; 0x2b48 <HLCD_void8bitInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af6:	6f a1       	ldd	r22, Y+39	; 0x27
    2af8:	78 a5       	ldd	r23, Y+40	; 0x28
    2afa:	89 a5       	ldd	r24, Y+41	; 0x29
    2afc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e2       	ldi	r20, 0x20	; 32
    2b04:	51 e4       	ldi	r21, 0x41	; 65
    2b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9a a3       	std	Y+34, r25	; 0x22
    2b1c:	89 a3       	std	Y+33, r24	; 0x21
    2b1e:	0f c0       	rjmp	.+30     	; 0x2b3e <HLCD_void8bitInit+0x1b0>
    2b20:	89 e1       	ldi	r24, 0x19	; 25
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	98 a3       	std	Y+32, r25	; 0x20
    2b26:	8f 8f       	std	Y+31, r24	; 0x1f
    2b28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b2a:	98 a1       	ldd	r25, Y+32	; 0x20
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <HLCD_void8bitInit+0x19e>
    2b30:	98 a3       	std	Y+32, r25	; 0x20
    2b32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b34:	89 a1       	ldd	r24, Y+33	; 0x21
    2b36:	9a a1       	ldd	r25, Y+34	; 0x22
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	9a a3       	std	Y+34, r25	; 0x22
    2b3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b40:	9a a1       	ldd	r25, Y+34	; 0x22
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	69 f7       	brne	.-38     	; 0x2b20 <HLCD_void8bitInit+0x192>
    2b46:	14 c0       	rjmp	.+40     	; 0x2b70 <HLCD_void8bitInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b48:	6b a1       	ldd	r22, Y+35	; 0x23
    2b4a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b4c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b4e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	9a a3       	std	Y+34, r25	; 0x22
    2b5a:	89 a3       	std	Y+33, r24	; 0x21
    2b5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b60:	9e 8f       	std	Y+30, r25	; 0x1e
    2b62:	8d 8f       	std	Y+29, r24	; 0x1d
    2b64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <HLCD_void8bitInit+0x1da>
    2b6c:	9e 8f       	std	Y+30, r25	; 0x1e
    2b6e:	8d 8f       	std	Y+29, r24	; 0x1d
	  _delay_ms(1);

	  //Display ON/OFF
	  HLCD_voidSendCommand(LCD_DisplayOnOff);
    2b70:	8c e0       	ldi	r24, 0x0C	; 12
    2b72:	0e 94 81 12 	call	0x2502	; 0x2502 <HLCD_voidSendCommand>
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	a0 e8       	ldi	r26, 0x80	; 128
    2b7c:	bf e3       	ldi	r27, 0x3F	; 63
    2b7e:	89 8f       	std	Y+25, r24	; 0x19
    2b80:	9a 8f       	std	Y+26, r25	; 0x1a
    2b82:	ab 8f       	std	Y+27, r26	; 0x1b
    2b84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b86:	69 8d       	ldd	r22, Y+25	; 0x19
    2b88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	4a e7       	ldi	r20, 0x7A	; 122
    2b94:	53 e4       	ldi	r21, 0x43	; 67
    2b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	8d 8b       	std	Y+21, r24	; 0x15
    2ba0:	9e 8b       	std	Y+22, r25	; 0x16
    2ba2:	af 8b       	std	Y+23, r26	; 0x17
    2ba4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ba6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba8:	7e 89       	ldd	r23, Y+22	; 0x16
    2baa:	8f 89       	ldd	r24, Y+23	; 0x17
    2bac:	98 8d       	ldd	r25, Y+24	; 0x18
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	40 e8       	ldi	r20, 0x80	; 128
    2bb4:	5f e3       	ldi	r21, 0x3F	; 63
    2bb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bba:	88 23       	and	r24, r24
    2bbc:	2c f4       	brge	.+10     	; 0x2bc8 <HLCD_void8bitInit+0x23a>
		__ticks = 1;
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	9c 8b       	std	Y+20, r25	; 0x14
    2bc4:	8b 8b       	std	Y+19, r24	; 0x13
    2bc6:	3f c0       	rjmp	.+126    	; 0x2c46 <HLCD_void8bitInit+0x2b8>
	else if (__tmp > 65535)
    2bc8:	6d 89       	ldd	r22, Y+21	; 0x15
    2bca:	7e 89       	ldd	r23, Y+22	; 0x16
    2bcc:	8f 89       	ldd	r24, Y+23	; 0x17
    2bce:	98 8d       	ldd	r25, Y+24	; 0x18
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	3f ef       	ldi	r19, 0xFF	; 255
    2bd4:	4f e7       	ldi	r20, 0x7F	; 127
    2bd6:	57 e4       	ldi	r21, 0x47	; 71
    2bd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bdc:	18 16       	cp	r1, r24
    2bde:	4c f5       	brge	.+82     	; 0x2c32 <HLCD_void8bitInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be0:	69 8d       	ldd	r22, Y+25	; 0x19
    2be2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2be4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2be6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	40 e2       	ldi	r20, 0x20	; 32
    2bee:	51 e4       	ldi	r21, 0x41	; 65
    2bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	bc 01       	movw	r22, r24
    2bfa:	cd 01       	movw	r24, r26
    2bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	9c 8b       	std	Y+20, r25	; 0x14
    2c06:	8b 8b       	std	Y+19, r24	; 0x13
    2c08:	0f c0       	rjmp	.+30     	; 0x2c28 <HLCD_void8bitInit+0x29a>
    2c0a:	89 e1       	ldi	r24, 0x19	; 25
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	9a 8b       	std	Y+18, r25	; 0x12
    2c10:	89 8b       	std	Y+17, r24	; 0x11
    2c12:	89 89       	ldd	r24, Y+17	; 0x11
    2c14:	9a 89       	ldd	r25, Y+18	; 0x12
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <HLCD_void8bitInit+0x288>
    2c1a:	9a 8b       	std	Y+18, r25	; 0x12
    2c1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c20:	9c 89       	ldd	r25, Y+20	; 0x14
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	9c 8b       	std	Y+20, r25	; 0x14
    2c26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c28:	8b 89       	ldd	r24, Y+19	; 0x13
    2c2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c2c:	00 97       	sbiw	r24, 0x00	; 0
    2c2e:	69 f7       	brne	.-38     	; 0x2c0a <HLCD_void8bitInit+0x27c>
    2c30:	14 c0       	rjmp	.+40     	; 0x2c5a <HLCD_void8bitInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c32:	6d 89       	ldd	r22, Y+21	; 0x15
    2c34:	7e 89       	ldd	r23, Y+22	; 0x16
    2c36:	8f 89       	ldd	r24, Y+23	; 0x17
    2c38:	98 8d       	ldd	r25, Y+24	; 0x18
    2c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	9c 8b       	std	Y+20, r25	; 0x14
    2c44:	8b 8b       	std	Y+19, r24	; 0x13
    2c46:	8b 89       	ldd	r24, Y+19	; 0x13
    2c48:	9c 89       	ldd	r25, Y+20	; 0x14
    2c4a:	98 8b       	std	Y+16, r25	; 0x10
    2c4c:	8f 87       	std	Y+15, r24	; 0x0f
    2c4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c50:	98 89       	ldd	r25, Y+16	; 0x10
    2c52:	01 97       	sbiw	r24, 0x01	; 1
    2c54:	f1 f7       	brne	.-4      	; 0x2c52 <HLCD_void8bitInit+0x2c4>
    2c56:	98 8b       	std	Y+16, r25	; 0x10
    2c58:	8f 87       	std	Y+15, r24	; 0x0f
	  _delay_ms(1);

	  //Display Clear
	  HLCD_voidSendCommand(LCD_DisplayClear);
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	0e 94 81 12 	call	0x2502	; 0x2502 <HLCD_voidSendCommand>
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	a0 e0       	ldi	r26, 0x00	; 0
    2c66:	b0 e4       	ldi	r27, 0x40	; 64
    2c68:	8b 87       	std	Y+11, r24	; 0x0b
    2c6a:	9c 87       	std	Y+12, r25	; 0x0c
    2c6c:	ad 87       	std	Y+13, r26	; 0x0d
    2c6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	4a e7       	ldi	r20, 0x7A	; 122
    2c7e:	53 e4       	ldi	r21, 0x43	; 67
    2c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	8f 83       	std	Y+7, r24	; 0x07
    2c8a:	98 87       	std	Y+8, r25	; 0x08
    2c8c:	a9 87       	std	Y+9, r26	; 0x09
    2c8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c90:	6f 81       	ldd	r22, Y+7	; 0x07
    2c92:	78 85       	ldd	r23, Y+8	; 0x08
    2c94:	89 85       	ldd	r24, Y+9	; 0x09
    2c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	40 e8       	ldi	r20, 0x80	; 128
    2c9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ca0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ca4:	88 23       	and	r24, r24
    2ca6:	2c f4       	brge	.+10     	; 0x2cb2 <HLCD_void8bitInit+0x324>
		__ticks = 1;
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	9e 83       	std	Y+6, r25	; 0x06
    2cae:	8d 83       	std	Y+5, r24	; 0x05
    2cb0:	3f c0       	rjmp	.+126    	; 0x2d30 <HLCD_void8bitInit+0x3a2>
	else if (__tmp > 65535)
    2cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb4:	78 85       	ldd	r23, Y+8	; 0x08
    2cb6:	89 85       	ldd	r24, Y+9	; 0x09
    2cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	3f ef       	ldi	r19, 0xFF	; 255
    2cbe:	4f e7       	ldi	r20, 0x7F	; 127
    2cc0:	57 e4       	ldi	r21, 0x47	; 71
    2cc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cc6:	18 16       	cp	r1, r24
    2cc8:	4c f5       	brge	.+82     	; 0x2d1c <HLCD_void8bitInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ccc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	40 e2       	ldi	r20, 0x20	; 32
    2cd8:	51 e4       	ldi	r21, 0x41	; 65
    2cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	bc 01       	movw	r22, r24
    2ce4:	cd 01       	movw	r24, r26
    2ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	9e 83       	std	Y+6, r25	; 0x06
    2cf0:	8d 83       	std	Y+5, r24	; 0x05
    2cf2:	0f c0       	rjmp	.+30     	; 0x2d12 <HLCD_void8bitInit+0x384>
    2cf4:	89 e1       	ldi	r24, 0x19	; 25
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	9c 83       	std	Y+4, r25	; 0x04
    2cfa:	8b 83       	std	Y+3, r24	; 0x03
    2cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <HLCD_void8bitInit+0x372>
    2d04:	9c 83       	std	Y+4, r25	; 0x04
    2d06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d08:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	9e 83       	std	Y+6, r25	; 0x06
    2d10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d12:	8d 81       	ldd	r24, Y+5	; 0x05
    2d14:	9e 81       	ldd	r25, Y+6	; 0x06
    2d16:	00 97       	sbiw	r24, 0x00	; 0
    2d18:	69 f7       	brne	.-38     	; 0x2cf4 <HLCD_void8bitInit+0x366>
    2d1a:	14 c0       	rjmp	.+40     	; 0x2d44 <HLCD_void8bitInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d1e:	78 85       	ldd	r23, Y+8	; 0x08
    2d20:	89 85       	ldd	r24, Y+9	; 0x09
    2d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	9e 83       	std	Y+6, r25	; 0x06
    2d2e:	8d 83       	std	Y+5, r24	; 0x05
    2d30:	8d 81       	ldd	r24, Y+5	; 0x05
    2d32:	9e 81       	ldd	r25, Y+6	; 0x06
    2d34:	9a 83       	std	Y+2, r25	; 0x02
    2d36:	89 83       	std	Y+1, r24	; 0x01
    2d38:	89 81       	ldd	r24, Y+1	; 0x01
    2d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	f1 f7       	brne	.-4      	; 0x2d3c <HLCD_void8bitInit+0x3ae>
    2d40:	9a 83       	std	Y+2, r25	; 0x02
    2d42:	89 83       	std	Y+1, r24	; 0x01
	  _delay_ms(2);

	  //Entry Mode Set
	  HLCD_voidSendCommand(LCD_EntryMode);
    2d44:	86 e0       	ldi	r24, 0x06	; 6
    2d46:	0e 94 81 12 	call	0x2502	; 0x2502 <HLCD_voidSendCommand>

}
    2d4a:	e8 96       	adiw	r28, 0x38	; 56
    2d4c:	0f b6       	in	r0, 0x3f	; 63
    2d4e:	f8 94       	cli
    2d50:	de bf       	out	0x3e, r29	; 62
    2d52:	0f be       	out	0x3f, r0	; 63
    2d54:	cd bf       	out	0x3d, r28	; 61
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	08 95       	ret

00002d5c <HLCD_voidClear>:

void HLCD_voidClear()
{
    2d5c:	df 93       	push	r29
    2d5e:	cf 93       	push	r28
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	2e 97       	sbiw	r28, 0x0e	; 14
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	f8 94       	cli
    2d6a:	de bf       	out	0x3e, r29	; 62
    2d6c:	0f be       	out	0x3f, r0	; 63
    2d6e:	cd bf       	out	0x3d, r28	; 61
	 HLCD_voidSendCommand(LCD_DisplayClear);
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	0e 94 81 12 	call	0x2502	; 0x2502 <HLCD_voidSendCommand>
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	a0 e0       	ldi	r26, 0x00	; 0
    2d7c:	b0 e4       	ldi	r27, 0x40	; 64
    2d7e:	8b 87       	std	Y+11, r24	; 0x0b
    2d80:	9c 87       	std	Y+12, r25	; 0x0c
    2d82:	ad 87       	std	Y+13, r26	; 0x0d
    2d84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	4a e7       	ldi	r20, 0x7A	; 122
    2d94:	53 e4       	ldi	r21, 0x43	; 67
    2d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	8f 83       	std	Y+7, r24	; 0x07
    2da0:	98 87       	std	Y+8, r25	; 0x08
    2da2:	a9 87       	std	Y+9, r26	; 0x09
    2da4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2da6:	6f 81       	ldd	r22, Y+7	; 0x07
    2da8:	78 85       	ldd	r23, Y+8	; 0x08
    2daa:	89 85       	ldd	r24, Y+9	; 0x09
    2dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	40 e8       	ldi	r20, 0x80	; 128
    2db4:	5f e3       	ldi	r21, 0x3F	; 63
    2db6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dba:	88 23       	and	r24, r24
    2dbc:	2c f4       	brge	.+10     	; 0x2dc8 <HLCD_voidClear+0x6c>
		__ticks = 1;
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	9e 83       	std	Y+6, r25	; 0x06
    2dc4:	8d 83       	std	Y+5, r24	; 0x05
    2dc6:	3f c0       	rjmp	.+126    	; 0x2e46 <HLCD_voidClear+0xea>
	else if (__tmp > 65535)
    2dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dca:	78 85       	ldd	r23, Y+8	; 0x08
    2dcc:	89 85       	ldd	r24, Y+9	; 0x09
    2dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	3f ef       	ldi	r19, 0xFF	; 255
    2dd4:	4f e7       	ldi	r20, 0x7F	; 127
    2dd6:	57 e4       	ldi	r21, 0x47	; 71
    2dd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ddc:	18 16       	cp	r1, r24
    2dde:	4c f5       	brge	.+82     	; 0x2e32 <HLCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2de2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2de4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2de6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	40 e2       	ldi	r20, 0x20	; 32
    2dee:	51 e4       	ldi	r21, 0x41	; 65
    2df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	bc 01       	movw	r22, r24
    2dfa:	cd 01       	movw	r24, r26
    2dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	9e 83       	std	Y+6, r25	; 0x06
    2e06:	8d 83       	std	Y+5, r24	; 0x05
    2e08:	0f c0       	rjmp	.+30     	; 0x2e28 <HLCD_voidClear+0xcc>
    2e0a:	89 e1       	ldi	r24, 0x19	; 25
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	9c 83       	std	Y+4, r25	; 0x04
    2e10:	8b 83       	std	Y+3, r24	; 0x03
    2e12:	8b 81       	ldd	r24, Y+3	; 0x03
    2e14:	9c 81       	ldd	r25, Y+4	; 0x04
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	f1 f7       	brne	.-4      	; 0x2e16 <HLCD_voidClear+0xba>
    2e1a:	9c 83       	std	Y+4, r25	; 0x04
    2e1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e20:	9e 81       	ldd	r25, Y+6	; 0x06
    2e22:	01 97       	sbiw	r24, 0x01	; 1
    2e24:	9e 83       	std	Y+6, r25	; 0x06
    2e26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e28:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e2c:	00 97       	sbiw	r24, 0x00	; 0
    2e2e:	69 f7       	brne	.-38     	; 0x2e0a <HLCD_voidClear+0xae>
    2e30:	14 c0       	rjmp	.+40     	; 0x2e5a <HLCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e32:	6f 81       	ldd	r22, Y+7	; 0x07
    2e34:	78 85       	ldd	r23, Y+8	; 0x08
    2e36:	89 85       	ldd	r24, Y+9	; 0x09
    2e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	9e 83       	std	Y+6, r25	; 0x06
    2e44:	8d 83       	std	Y+5, r24	; 0x05
    2e46:	8d 81       	ldd	r24, Y+5	; 0x05
    2e48:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4a:	9a 83       	std	Y+2, r25	; 0x02
    2e4c:	89 83       	std	Y+1, r24	; 0x01
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	9a 81       	ldd	r25, Y+2	; 0x02
    2e52:	01 97       	sbiw	r24, 0x01	; 1
    2e54:	f1 f7       	brne	.-4      	; 0x2e52 <HLCD_voidClear+0xf6>
    2e56:	9a 83       	std	Y+2, r25	; 0x02
    2e58:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);
}
    2e5a:	2e 96       	adiw	r28, 0x0e	; 14
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
    2e66:	cf 91       	pop	r28
    2e68:	df 91       	pop	r29
    2e6a:	08 95       	ret

00002e6c <HLCD_voidSetCursor>:
void HLCD_voidSetCursor(u8 A_u8LineNum,u8 A_u8LinePos)
{
    2e6c:	df 93       	push	r29
    2e6e:	cf 93       	push	r28
    2e70:	00 d0       	rcall	.+0      	; 0x2e72 <HLCD_voidSetCursor+0x6>
    2e72:	00 d0       	rcall	.+0      	; 0x2e74 <HLCD_voidSetCursor+0x8>
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
    2e78:	89 83       	std	Y+1, r24	; 0x01
    2e7a:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8LineNum)
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	28 2f       	mov	r18, r24
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	3c 83       	std	Y+4, r19	; 0x04
    2e84:	2b 83       	std	Y+3, r18	; 0x03
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8a:	81 30       	cpi	r24, 0x01	; 1
    2e8c:	91 05       	cpc	r25, r1
    2e8e:	31 f0       	breq	.+12     	; 0x2e9c <HLCD_voidSetCursor+0x30>
    2e90:	2b 81       	ldd	r18, Y+3	; 0x03
    2e92:	3c 81       	ldd	r19, Y+4	; 0x04
    2e94:	22 30       	cpi	r18, 0x02	; 2
    2e96:	31 05       	cpc	r19, r1
    2e98:	31 f0       	breq	.+12     	; 0x2ea6 <HLCD_voidSetCursor+0x3a>
    2e9a:	09 c0       	rjmp	.+18     	; 0x2eae <HLCD_voidSetCursor+0x42>
	{
		case LCD_LINE_1: HLCD_voidSendCommand(0x80 + 0 + A_u8LinePos); break;
    2e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9e:	80 58       	subi	r24, 0x80	; 128
    2ea0:	0e 94 81 12 	call	0x2502	; 0x2502 <HLCD_voidSendCommand>
    2ea4:	04 c0       	rjmp	.+8      	; 0x2eae <HLCD_voidSetCursor+0x42>
		case LCD_LINE_2: HLCD_voidSendCommand(0x80 + 64 + A_u8LinePos); break;
    2ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea8:	80 54       	subi	r24, 0x40	; 64
    2eaa:	0e 94 81 12 	call	0x2502	; 0x2502 <HLCD_voidSendCommand>
	}
}
    2eae:	0f 90       	pop	r0
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	0f 90       	pop	r0
    2eb6:	cf 91       	pop	r28
    2eb8:	df 91       	pop	r29
    2eba:	08 95       	ret

00002ebc <HLCD_voidSendString>:
void HLCD_voidSendString(u8 *A_u8PtrString)
{
    2ebc:	df 93       	push	r29
    2ebe:	cf 93       	push	r28
    2ec0:	00 d0       	rcall	.+0      	; 0x2ec2 <HLCD_voidSendString+0x6>
    2ec2:	cd b7       	in	r28, 0x3d	; 61
    2ec4:	de b7       	in	r29, 0x3e	; 62
    2ec6:	9a 83       	std	Y+2, r25	; 0x02
    2ec8:	89 83       	std	Y+1, r24	; 0x01
    2eca:	0b c0       	rjmp	.+22     	; 0x2ee2 <HLCD_voidSendString+0x26>
	while (*A_u8PtrString !='\0')
	{
		HLCD_voidSendData(*A_u8PtrString ++);
    2ecc:	e9 81       	ldd	r30, Y+1	; 0x01
    2ece:	fa 81       	ldd	r31, Y+2	; 0x02
    2ed0:	20 81       	ld	r18, Z
    2ed2:	89 81       	ldd	r24, Y+1	; 0x01
    2ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed6:	01 96       	adiw	r24, 0x01	; 1
    2ed8:	9a 83       	std	Y+2, r25	; 0x02
    2eda:	89 83       	std	Y+1, r24	; 0x01
    2edc:	82 2f       	mov	r24, r18
    2ede:	0e 94 a4 13 	call	0x2748	; 0x2748 <HLCD_voidSendData>
		case LCD_LINE_2: HLCD_voidSendCommand(0x80 + 64 + A_u8LinePos); break;
	}
}
void HLCD_voidSendString(u8 *A_u8PtrString)
{
	while (*A_u8PtrString !='\0')
    2ee2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ee6:	80 81       	ld	r24, Z
    2ee8:	88 23       	and	r24, r24
    2eea:	81 f7       	brne	.-32     	; 0x2ecc <HLCD_voidSendString+0x10>
	{
		HLCD_voidSendData(*A_u8PtrString ++);
	}
}
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	cf 91       	pop	r28
    2ef2:	df 91       	pop	r29
    2ef4:	08 95       	ret

00002ef6 <HLCD_voidDisplayChar>:

void HLCD_voidDisplayChar(u8 A_u8Char)
{
    2ef6:	df 93       	push	r29
    2ef8:	cf 93       	push	r28
    2efa:	0f 92       	push	r0
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
    2f00:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidSendData(A_u8Char);
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	0e 94 a4 13 	call	0x2748	; 0x2748 <HLCD_voidSendData>
}
    2f08:	0f 90       	pop	r0
    2f0a:	cf 91       	pop	r28
    2f0c:	df 91       	pop	r29
    2f0e:	08 95       	ret

00002f10 <HLCD_voidDisplayNum>:

void HLCD_voidDisplayNum(s32 A_s32Number)
{
    2f10:	ef 92       	push	r14
    2f12:	ff 92       	push	r15
    2f14:	0f 93       	push	r16
    2f16:	1f 93       	push	r17
    2f18:	df 93       	push	r29
    2f1a:	cf 93       	push	r28
    2f1c:	cd b7       	in	r28, 0x3d	; 61
    2f1e:	de b7       	in	r29, 0x3e	; 62
    2f20:	29 97       	sbiw	r28, 0x09	; 9
    2f22:	0f b6       	in	r0, 0x3f	; 63
    2f24:	f8 94       	cli
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	0f be       	out	0x3f, r0	; 63
    2f2a:	cd bf       	out	0x3d, r28	; 61
    2f2c:	6e 83       	std	Y+6, r22	; 0x06
    2f2e:	7f 83       	std	Y+7, r23	; 0x07
    2f30:	88 87       	std	Y+8, r24	; 0x08
    2f32:	99 87       	std	Y+9, r25	; 0x09
	if(A_s32Number==0)
    2f34:	8e 81       	ldd	r24, Y+6	; 0x06
    2f36:	9f 81       	ldd	r25, Y+7	; 0x07
    2f38:	a8 85       	ldd	r26, Y+8	; 0x08
    2f3a:	b9 85       	ldd	r27, Y+9	; 0x09
    2f3c:	00 97       	sbiw	r24, 0x00	; 0
    2f3e:	a1 05       	cpc	r26, r1
    2f40:	b1 05       	cpc	r27, r1
    2f42:	21 f4       	brne	.+8      	; 0x2f4c <HLCD_voidDisplayNum+0x3c>
	{
		HLCD_voidDisplayChar('0');
    2f44:	80 e3       	ldi	r24, 0x30	; 48
    2f46:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <HLCD_voidDisplayChar>
    2f4a:	ba c0       	rjmp	.+372    	; 0x30c0 <HLCD_voidDisplayNum+0x1b0>
		return;
	}
	u32 L_u32Num=0;
    2f4c:	1a 82       	std	Y+2, r1	; 0x02
    2f4e:	1b 82       	std	Y+3, r1	; 0x03
    2f50:	1c 82       	std	Y+4, r1	; 0x04
    2f52:	1d 82       	std	Y+5, r1	; 0x05
	u8 flag=0;
    2f54:	19 82       	std	Y+1, r1	; 0x01
	if (A_s32Number < 0)
    2f56:	8e 81       	ldd	r24, Y+6	; 0x06
    2f58:	9f 81       	ldd	r25, Y+7	; 0x07
    2f5a:	a8 85       	ldd	r26, Y+8	; 0x08
    2f5c:	b9 85       	ldd	r27, Y+9	; 0x09
    2f5e:	bb 23       	and	r27, r27
    2f60:	44 f5       	brge	.+80     	; 0x2fb2 <HLCD_voidDisplayNum+0xa2>
	{
		HLCD_voidDisplayChar('-');
    2f62:	8d e2       	ldi	r24, 0x2D	; 45
    2f64:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <HLCD_voidDisplayChar>
		A_s32Number*=-1;
    2f68:	8e 81       	ldd	r24, Y+6	; 0x06
    2f6a:	9f 81       	ldd	r25, Y+7	; 0x07
    2f6c:	a8 85       	ldd	r26, Y+8	; 0x08
    2f6e:	b9 85       	ldd	r27, Y+9	; 0x09
    2f70:	b0 95       	com	r27
    2f72:	a0 95       	com	r26
    2f74:	90 95       	com	r25
    2f76:	81 95       	neg	r24
    2f78:	9f 4f       	sbci	r25, 0xFF	; 255
    2f7a:	af 4f       	sbci	r26, 0xFF	; 255
    2f7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f7e:	8e 83       	std	Y+6, r24	; 0x06
    2f80:	9f 83       	std	Y+7, r25	; 0x07
    2f82:	a8 87       	std	Y+8, r26	; 0x08
    2f84:	b9 87       	std	Y+9, r27	; 0x09
    2f86:	15 c0       	rjmp	.+42     	; 0x2fb2 <HLCD_voidDisplayNum+0xa2>
	}
	while ((A_s32Number % 10) == 0)
		{
			flag++;
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	8f 5f       	subi	r24, 0xFF	; 255
    2f8c:	89 83       	std	Y+1, r24	; 0x01
			A_s32Number/=10;
    2f8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f90:	9f 81       	ldd	r25, Y+7	; 0x07
    2f92:	a8 85       	ldd	r26, Y+8	; 0x08
    2f94:	b9 85       	ldd	r27, Y+9	; 0x09
    2f96:	2a e0       	ldi	r18, 0x0A	; 10
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e0       	ldi	r20, 0x00	; 0
    2f9c:	50 e0       	ldi	r21, 0x00	; 0
    2f9e:	bc 01       	movw	r22, r24
    2fa0:	cd 01       	movw	r24, r26
    2fa2:	0e 94 26 1c 	call	0x384c	; 0x384c <__divmodsi4>
    2fa6:	da 01       	movw	r26, r20
    2fa8:	c9 01       	movw	r24, r18
    2faa:	8e 83       	std	Y+6, r24	; 0x06
    2fac:	9f 83       	std	Y+7, r25	; 0x07
    2fae:	a8 87       	std	Y+8, r26	; 0x08
    2fb0:	b9 87       	std	Y+9, r27	; 0x09
	if (A_s32Number < 0)
	{
		HLCD_voidDisplayChar('-');
		A_s32Number*=-1;
	}
	while ((A_s32Number % 10) == 0)
    2fb2:	8e 81       	ldd	r24, Y+6	; 0x06
    2fb4:	9f 81       	ldd	r25, Y+7	; 0x07
    2fb6:	a8 85       	ldd	r26, Y+8	; 0x08
    2fb8:	b9 85       	ldd	r27, Y+9	; 0x09
    2fba:	2a e0       	ldi	r18, 0x0A	; 10
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e0       	ldi	r20, 0x00	; 0
    2fc0:	50 e0       	ldi	r21, 0x00	; 0
    2fc2:	bc 01       	movw	r22, r24
    2fc4:	cd 01       	movw	r24, r26
    2fc6:	0e 94 26 1c 	call	0x384c	; 0x384c <__divmodsi4>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	00 97       	sbiw	r24, 0x00	; 0
    2fd0:	a1 05       	cpc	r26, r1
    2fd2:	b1 05       	cpc	r27, r1
    2fd4:	c9 f2       	breq	.-78     	; 0x2f88 <HLCD_voidDisplayNum+0x78>
    2fd6:	36 c0       	rjmp	.+108    	; 0x3044 <HLCD_voidDisplayNum+0x134>
			flag++;
			A_s32Number/=10;
		}
	while (A_s32Number !=0)
	{
		L_u32Num=((L_u32Num*10)+(A_s32Number%10));
    2fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fda:	9b 81       	ldd	r25, Y+3	; 0x03
    2fdc:	ac 81       	ldd	r26, Y+4	; 0x04
    2fde:	bd 81       	ldd	r27, Y+5	; 0x05
    2fe0:	2a e0       	ldi	r18, 0x0A	; 10
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	40 e0       	ldi	r20, 0x00	; 0
    2fe6:	50 e0       	ldi	r21, 0x00	; 0
    2fe8:	bc 01       	movw	r22, r24
    2fea:	cd 01       	movw	r24, r26
    2fec:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__mulsi3>
    2ff0:	7b 01       	movw	r14, r22
    2ff2:	8c 01       	movw	r16, r24
    2ff4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ff6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ff8:	a8 85       	ldd	r26, Y+8	; 0x08
    2ffa:	b9 85       	ldd	r27, Y+9	; 0x09
    2ffc:	2a e0       	ldi	r18, 0x0A	; 10
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	40 e0       	ldi	r20, 0x00	; 0
    3002:	50 e0       	ldi	r21, 0x00	; 0
    3004:	bc 01       	movw	r22, r24
    3006:	cd 01       	movw	r24, r26
    3008:	0e 94 26 1c 	call	0x384c	; 0x384c <__divmodsi4>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	8e 0d       	add	r24, r14
    3012:	9f 1d       	adc	r25, r15
    3014:	a0 1f       	adc	r26, r16
    3016:	b1 1f       	adc	r27, r17
    3018:	8a 83       	std	Y+2, r24	; 0x02
    301a:	9b 83       	std	Y+3, r25	; 0x03
    301c:	ac 83       	std	Y+4, r26	; 0x04
    301e:	bd 83       	std	Y+5, r27	; 0x05
		A_s32Number/=10;
    3020:	8e 81       	ldd	r24, Y+6	; 0x06
    3022:	9f 81       	ldd	r25, Y+7	; 0x07
    3024:	a8 85       	ldd	r26, Y+8	; 0x08
    3026:	b9 85       	ldd	r27, Y+9	; 0x09
    3028:	2a e0       	ldi	r18, 0x0A	; 10
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	40 e0       	ldi	r20, 0x00	; 0
    302e:	50 e0       	ldi	r21, 0x00	; 0
    3030:	bc 01       	movw	r22, r24
    3032:	cd 01       	movw	r24, r26
    3034:	0e 94 26 1c 	call	0x384c	; 0x384c <__divmodsi4>
    3038:	da 01       	movw	r26, r20
    303a:	c9 01       	movw	r24, r18
    303c:	8e 83       	std	Y+6, r24	; 0x06
    303e:	9f 83       	std	Y+7, r25	; 0x07
    3040:	a8 87       	std	Y+8, r26	; 0x08
    3042:	b9 87       	std	Y+9, r27	; 0x09
	while ((A_s32Number % 10) == 0)
		{
			flag++;
			A_s32Number/=10;
		}
	while (A_s32Number !=0)
    3044:	8e 81       	ldd	r24, Y+6	; 0x06
    3046:	9f 81       	ldd	r25, Y+7	; 0x07
    3048:	a8 85       	ldd	r26, Y+8	; 0x08
    304a:	b9 85       	ldd	r27, Y+9	; 0x09
    304c:	00 97       	sbiw	r24, 0x00	; 0
    304e:	a1 05       	cpc	r26, r1
    3050:	b1 05       	cpc	r27, r1
    3052:	11 f6       	brne	.-124    	; 0x2fd8 <HLCD_voidDisplayNum+0xc8>
    3054:	23 c0       	rjmp	.+70     	; 0x309c <HLCD_voidDisplayNum+0x18c>
		L_u32Num=((L_u32Num*10)+(A_s32Number%10));
		A_s32Number/=10;
	}
	while (L_u32Num >0)
	{
		HLCD_voidSendData((L_u32Num%10)+48);
    3056:	8a 81       	ldd	r24, Y+2	; 0x02
    3058:	9b 81       	ldd	r25, Y+3	; 0x03
    305a:	ac 81       	ldd	r26, Y+4	; 0x04
    305c:	bd 81       	ldd	r27, Y+5	; 0x05
    305e:	2a e0       	ldi	r18, 0x0A	; 10
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	40 e0       	ldi	r20, 0x00	; 0
    3064:	50 e0       	ldi	r21, 0x00	; 0
    3066:	bc 01       	movw	r22, r24
    3068:	cd 01       	movw	r24, r26
    306a:	0e 94 04 1c 	call	0x3808	; 0x3808 <__udivmodsi4>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	80 5d       	subi	r24, 0xD0	; 208
    3074:	0e 94 a4 13 	call	0x2748	; 0x2748 <HLCD_voidSendData>
		L_u32Num/=10;
    3078:	8a 81       	ldd	r24, Y+2	; 0x02
    307a:	9b 81       	ldd	r25, Y+3	; 0x03
    307c:	ac 81       	ldd	r26, Y+4	; 0x04
    307e:	bd 81       	ldd	r27, Y+5	; 0x05
    3080:	2a e0       	ldi	r18, 0x0A	; 10
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	40 e0       	ldi	r20, 0x00	; 0
    3086:	50 e0       	ldi	r21, 0x00	; 0
    3088:	bc 01       	movw	r22, r24
    308a:	cd 01       	movw	r24, r26
    308c:	0e 94 04 1c 	call	0x3808	; 0x3808 <__udivmodsi4>
    3090:	da 01       	movw	r26, r20
    3092:	c9 01       	movw	r24, r18
    3094:	8a 83       	std	Y+2, r24	; 0x02
    3096:	9b 83       	std	Y+3, r25	; 0x03
    3098:	ac 83       	std	Y+4, r26	; 0x04
    309a:	bd 83       	std	Y+5, r27	; 0x05
	while (A_s32Number !=0)
	{
		L_u32Num=((L_u32Num*10)+(A_s32Number%10));
		A_s32Number/=10;
	}
	while (L_u32Num >0)
    309c:	8a 81       	ldd	r24, Y+2	; 0x02
    309e:	9b 81       	ldd	r25, Y+3	; 0x03
    30a0:	ac 81       	ldd	r26, Y+4	; 0x04
    30a2:	bd 81       	ldd	r27, Y+5	; 0x05
    30a4:	00 97       	sbiw	r24, 0x00	; 0
    30a6:	a1 05       	cpc	r26, r1
    30a8:	b1 05       	cpc	r27, r1
    30aa:	a9 f6       	brne	.-86     	; 0x3056 <HLCD_voidDisplayNum+0x146>
    30ac:	06 c0       	rjmp	.+12     	; 0x30ba <HLCD_voidDisplayNum+0x1aa>
		HLCD_voidSendData((L_u32Num%10)+48);
		L_u32Num/=10;
	}
	while (flag !=0)
	{
		HLCD_voidDisplayChar('0');
    30ae:	80 e3       	ldi	r24, 0x30	; 48
    30b0:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <HLCD_voidDisplayChar>
		flag--;
    30b4:	89 81       	ldd	r24, Y+1	; 0x01
    30b6:	81 50       	subi	r24, 0x01	; 1
    30b8:	89 83       	std	Y+1, r24	; 0x01
	while (L_u32Num >0)
	{
		HLCD_voidSendData((L_u32Num%10)+48);
		L_u32Num/=10;
	}
	while (flag !=0)
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	88 23       	and	r24, r24
    30be:	b9 f7       	brne	.-18     	; 0x30ae <HLCD_voidDisplayNum+0x19e>
	{
		HLCD_voidDisplayChar('0');
		flag--;
	}
}
    30c0:	29 96       	adiw	r28, 0x09	; 9
    30c2:	0f b6       	in	r0, 0x3f	; 63
    30c4:	f8 94       	cli
    30c6:	de bf       	out	0x3e, r29	; 62
    30c8:	0f be       	out	0x3f, r0	; 63
    30ca:	cd bf       	out	0x3d, r28	; 61
    30cc:	cf 91       	pop	r28
    30ce:	df 91       	pop	r29
    30d0:	1f 91       	pop	r17
    30d2:	0f 91       	pop	r16
    30d4:	ff 90       	pop	r15
    30d6:	ef 90       	pop	r14
    30d8:	08 95       	ret

000030da <HLCD_voidSaveCustomChar>:

void HLCD_voidSaveCustomChar (u8 A_u8CGRAM_Index,u8 *A_u8CustomArray)
{
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	00 d0       	rcall	.+0      	; 0x30e0 <HLCD_voidSaveCustomChar+0x6>
    30e0:	00 d0       	rcall	.+0      	; 0x30e2 <HLCD_voidSaveCustomChar+0x8>
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	8a 83       	std	Y+2, r24	; 0x02
    30e8:	7c 83       	std	Y+4, r23	; 0x04
    30ea:	6b 83       	std	Y+3, r22	; 0x03
	HLCD_voidSendCommand(CGRAM_Init + (A_u8CGRAM_Index * CGRAM_AvailableChars));
    30ec:	8a 81       	ldd	r24, Y+2	; 0x02
    30ee:	88 2f       	mov	r24, r24
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	08 96       	adiw	r24, 0x08	; 8
    30f4:	88 0f       	add	r24, r24
    30f6:	99 1f       	adc	r25, r25
    30f8:	88 0f       	add	r24, r24
    30fa:	99 1f       	adc	r25, r25
    30fc:	88 0f       	add	r24, r24
    30fe:	99 1f       	adc	r25, r25
    3100:	0e 94 81 12 	call	0x2502	; 0x2502 <HLCD_voidSendCommand>

	for (u8 L_u8Index=0; L_u8Index<CGRAM_AvailableChars; L_u8Index++)
    3104:	19 82       	std	Y+1, r1	; 0x01
    3106:	0e c0       	rjmp	.+28     	; 0x3124 <HLCD_voidSaveCustomChar+0x4a>
	{
		HLCD_voidSendData(A_u8CustomArray[L_u8Index]);
    3108:	89 81       	ldd	r24, Y+1	; 0x01
    310a:	28 2f       	mov	r18, r24
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	8b 81       	ldd	r24, Y+3	; 0x03
    3110:	9c 81       	ldd	r25, Y+4	; 0x04
    3112:	fc 01       	movw	r30, r24
    3114:	e2 0f       	add	r30, r18
    3116:	f3 1f       	adc	r31, r19
    3118:	80 81       	ld	r24, Z
    311a:	0e 94 a4 13 	call	0x2748	; 0x2748 <HLCD_voidSendData>

void HLCD_voidSaveCustomChar (u8 A_u8CGRAM_Index,u8 *A_u8CustomArray)
{
	HLCD_voidSendCommand(CGRAM_Init + (A_u8CGRAM_Index * CGRAM_AvailableChars));

	for (u8 L_u8Index=0; L_u8Index<CGRAM_AvailableChars; L_u8Index++)
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	8f 5f       	subi	r24, 0xFF	; 255
    3122:	89 83       	std	Y+1, r24	; 0x01
    3124:	89 81       	ldd	r24, Y+1	; 0x01
    3126:	88 30       	cpi	r24, 0x08	; 8
    3128:	78 f3       	brcs	.-34     	; 0x3108 <HLCD_voidSaveCustomChar+0x2e>
	{
		HLCD_voidSendData(A_u8CustomArray[L_u8Index]);
	}
	HLCD_voidSendCommand(0x80);
    312a:	80 e8       	ldi	r24, 0x80	; 128
    312c:	0e 94 81 12 	call	0x2502	; 0x2502 <HLCD_voidSendCommand>
}
    3130:	0f 90       	pop	r0
    3132:	0f 90       	pop	r0
    3134:	0f 90       	pop	r0
    3136:	0f 90       	pop	r0
    3138:	cf 91       	pop	r28
    313a:	df 91       	pop	r29
    313c:	08 95       	ret

0000313e <HLCD_voidDisplayCustomChar>:

void HLCD_voidDisplayCustomChar (u8 A_u8CGRAM_Index)
{
    313e:	df 93       	push	r29
    3140:	cf 93       	push	r28
    3142:	0f 92       	push	r0
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62
    3148:	89 83       	std	Y+1, r24	; 0x01
	if(A_u8CGRAM_Index<8)
    314a:	89 81       	ldd	r24, Y+1	; 0x01
    314c:	88 30       	cpi	r24, 0x08	; 8
    314e:	18 f4       	brcc	.+6      	; 0x3156 <HLCD_voidDisplayCustomChar+0x18>
	{
		HLCD_voidSendData(A_u8CGRAM_Index);
    3150:	89 81       	ldd	r24, Y+1	; 0x01
    3152:	0e 94 a4 13 	call	0x2748	; 0x2748 <HLCD_voidSendData>
	}
}
    3156:	0f 90       	pop	r0
    3158:	cf 91       	pop	r28
    315a:	df 91       	pop	r29
    315c:	08 95       	ret

0000315e <HKPD_voidInit>:
		{'1','2','3','-'},
		{'c','0','=','+'}
							};

void HKPD_voidInit(u8 A_u8PortNum)
{
    315e:	df 93       	push	r29
    3160:	cf 93       	push	r28
    3162:	0f 92       	push	r0
    3164:	cd b7       	in	r28, 0x3d	; 61
    3166:	de b7       	in	r29, 0x3e	; 62
    3168:	89 83       	std	Y+1, r24	; 0x01
	G_u8PortNum=A_u8PortNum;
    316a:	89 81       	ldd	r24, Y+1	; 0x01
    316c:	80 93 91 00 	sts	0x0091, r24
	MDIO_voidSetPortDirection(G_u8PortNum,0X0F);
    3170:	80 91 91 00 	lds	r24, 0x0091
    3174:	6f e0       	ldi	r22, 0x0F	; 15
    3176:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <MDIO_voidSetPortDirection>
	MDIO_voidSetPortValue(G_u8PortNum,0XFF);
    317a:	80 91 91 00 	lds	r24, 0x0091
    317e:	6f ef       	ldi	r22, 0xFF	; 255
    3180:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <MDIO_voidSetPortValue>
}
    3184:	0f 90       	pop	r0
    3186:	cf 91       	pop	r28
    3188:	df 91       	pop	r29
    318a:	08 95       	ret

0000318c <HKPD_u8GetKeyPressed>:
u8 HKPD_u8GetKeyPressed()
{
    318c:	df 93       	push	r29
    318e:	cf 93       	push	r28
    3190:	cd b7       	in	r28, 0x3d	; 61
    3192:	de b7       	in	r29, 0x3e	; 62
    3194:	61 97       	sbiw	r28, 0x11	; 17
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	f8 94       	cli
    319a:	de bf       	out	0x3e, r29	; 62
    319c:	0f be       	out	0x3f, r0	; 63
    319e:	cd bf       	out	0x3d, r28	; 61
	u8 L_u8PressedKey=' ';
    31a0:	80 e2       	ldi	r24, 0x20	; 32
    31a2:	89 8b       	std	Y+17, r24	; 0x11
	for(u8 col=0; col<ColNumber; col++)
    31a4:	18 8a       	std	Y+16, r1	; 0x10
    31a6:	b2 c0       	rjmp	.+356    	; 0x330c <HKPD_u8GetKeyPressed+0x180>
	{
		MDIO_voidSetPinValue(G_u8PortNum,col,LOW);
    31a8:	80 91 91 00 	lds	r24, 0x0091
    31ac:	68 89       	ldd	r22, Y+16	; 0x10
    31ae:	40 e0       	ldi	r20, 0x00	; 0
    31b0:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_voidSetPinValue>
		for(u8 row=0; row<RowNumber; row++)
    31b4:	1f 86       	std	Y+15, r1	; 0x0f
    31b6:	9d c0       	rjmp	.+314    	; 0x32f2 <HKPD_u8GetKeyPressed+0x166>
		{
			if(MDIO_u8GetPinValue(G_u8PortNum,row+ColNumber)==LOW)
    31b8:	20 91 91 00 	lds	r18, 0x0091
    31bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    31be:	98 2f       	mov	r25, r24
    31c0:	9c 5f       	subi	r25, 0xFC	; 252
    31c2:	82 2f       	mov	r24, r18
    31c4:	69 2f       	mov	r22, r25
    31c6:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <MDIO_u8GetPinValue>
    31ca:	88 23       	and	r24, r24
    31cc:	91 f4       	brne	.+36     	; 0x31f2 <HKPD_u8GetKeyPressed+0x66>
			{
				L_u8PressedKey=G_u8Grid[row][col];
    31ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    31d0:	48 2f       	mov	r20, r24
    31d2:	50 e0       	ldi	r21, 0x00	; 0
    31d4:	88 89       	ldd	r24, Y+16	; 0x10
    31d6:	28 2f       	mov	r18, r24
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	ca 01       	movw	r24, r20
    31dc:	88 0f       	add	r24, r24
    31de:	99 1f       	adc	r25, r25
    31e0:	88 0f       	add	r24, r24
    31e2:	99 1f       	adc	r25, r25
    31e4:	82 0f       	add	r24, r18
    31e6:	93 1f       	adc	r25, r19
    31e8:	fc 01       	movw	r30, r24
    31ea:	ee 58       	subi	r30, 0x8E	; 142
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	80 81       	ld	r24, Z
    31f0:	89 8b       	std	Y+17, r24	; 0x11
			}
			while(MDIO_u8GetPinValue(G_u8PortNum,row+ColNumber)==LOW) {}
    31f2:	20 91 91 00 	lds	r18, 0x0091
    31f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    31f8:	98 2f       	mov	r25, r24
    31fa:	9c 5f       	subi	r25, 0xFC	; 252
    31fc:	82 2f       	mov	r24, r18
    31fe:	69 2f       	mov	r22, r25
    3200:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <MDIO_u8GetPinValue>
    3204:	88 23       	and	r24, r24
    3206:	a9 f3       	breq	.-22     	; 0x31f2 <HKPD_u8GetKeyPressed+0x66>
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	a0 e2       	ldi	r26, 0x20	; 32
    320e:	b1 e4       	ldi	r27, 0x41	; 65
    3210:	8b 87       	std	Y+11, r24	; 0x0b
    3212:	9c 87       	std	Y+12, r25	; 0x0c
    3214:	ad 87       	std	Y+13, r26	; 0x0d
    3216:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3218:	6b 85       	ldd	r22, Y+11	; 0x0b
    321a:	7c 85       	ldd	r23, Y+12	; 0x0c
    321c:	8d 85       	ldd	r24, Y+13	; 0x0d
    321e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	4a e7       	ldi	r20, 0x7A	; 122
    3226:	53 e4       	ldi	r21, 0x43	; 67
    3228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	8f 83       	std	Y+7, r24	; 0x07
    3232:	98 87       	std	Y+8, r25	; 0x08
    3234:	a9 87       	std	Y+9, r26	; 0x09
    3236:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3238:	6f 81       	ldd	r22, Y+7	; 0x07
    323a:	78 85       	ldd	r23, Y+8	; 0x08
    323c:	89 85       	ldd	r24, Y+9	; 0x09
    323e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	40 e8       	ldi	r20, 0x80	; 128
    3246:	5f e3       	ldi	r21, 0x3F	; 63
    3248:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    324c:	88 23       	and	r24, r24
    324e:	2c f4       	brge	.+10     	; 0x325a <HKPD_u8GetKeyPressed+0xce>
		__ticks = 1;
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	9e 83       	std	Y+6, r25	; 0x06
    3256:	8d 83       	std	Y+5, r24	; 0x05
    3258:	3f c0       	rjmp	.+126    	; 0x32d8 <HKPD_u8GetKeyPressed+0x14c>
	else if (__tmp > 65535)
    325a:	6f 81       	ldd	r22, Y+7	; 0x07
    325c:	78 85       	ldd	r23, Y+8	; 0x08
    325e:	89 85       	ldd	r24, Y+9	; 0x09
    3260:	9a 85       	ldd	r25, Y+10	; 0x0a
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	3f ef       	ldi	r19, 0xFF	; 255
    3266:	4f e7       	ldi	r20, 0x7F	; 127
    3268:	57 e4       	ldi	r21, 0x47	; 71
    326a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    326e:	18 16       	cp	r1, r24
    3270:	4c f5       	brge	.+82     	; 0x32c4 <HKPD_u8GetKeyPressed+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3272:	6b 85       	ldd	r22, Y+11	; 0x0b
    3274:	7c 85       	ldd	r23, Y+12	; 0x0c
    3276:	8d 85       	ldd	r24, Y+13	; 0x0d
    3278:	9e 85       	ldd	r25, Y+14	; 0x0e
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e2       	ldi	r20, 0x20	; 32
    3280:	51 e4       	ldi	r21, 0x41	; 65
    3282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	bc 01       	movw	r22, r24
    328c:	cd 01       	movw	r24, r26
    328e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	9e 83       	std	Y+6, r25	; 0x06
    3298:	8d 83       	std	Y+5, r24	; 0x05
    329a:	0f c0       	rjmp	.+30     	; 0x32ba <HKPD_u8GetKeyPressed+0x12e>
    329c:	89 e1       	ldi	r24, 0x19	; 25
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	9c 83       	std	Y+4, r25	; 0x04
    32a2:	8b 83       	std	Y+3, r24	; 0x03
    32a4:	8b 81       	ldd	r24, Y+3	; 0x03
    32a6:	9c 81       	ldd	r25, Y+4	; 0x04
    32a8:	01 97       	sbiw	r24, 0x01	; 1
    32aa:	f1 f7       	brne	.-4      	; 0x32a8 <HKPD_u8GetKeyPressed+0x11c>
    32ac:	9c 83       	std	Y+4, r25	; 0x04
    32ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b0:	8d 81       	ldd	r24, Y+5	; 0x05
    32b2:	9e 81       	ldd	r25, Y+6	; 0x06
    32b4:	01 97       	sbiw	r24, 0x01	; 1
    32b6:	9e 83       	std	Y+6, r25	; 0x06
    32b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ba:	8d 81       	ldd	r24, Y+5	; 0x05
    32bc:	9e 81       	ldd	r25, Y+6	; 0x06
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	69 f7       	brne	.-38     	; 0x329c <HKPD_u8GetKeyPressed+0x110>
    32c2:	14 c0       	rjmp	.+40     	; 0x32ec <HKPD_u8GetKeyPressed+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c4:	6f 81       	ldd	r22, Y+7	; 0x07
    32c6:	78 85       	ldd	r23, Y+8	; 0x08
    32c8:	89 85       	ldd	r24, Y+9	; 0x09
    32ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    32cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	9e 83       	std	Y+6, r25	; 0x06
    32d6:	8d 83       	std	Y+5, r24	; 0x05
    32d8:	8d 81       	ldd	r24, Y+5	; 0x05
    32da:	9e 81       	ldd	r25, Y+6	; 0x06
    32dc:	9a 83       	std	Y+2, r25	; 0x02
    32de:	89 83       	std	Y+1, r24	; 0x01
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	9a 81       	ldd	r25, Y+2	; 0x02
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	f1 f7       	brne	.-4      	; 0x32e4 <HKPD_u8GetKeyPressed+0x158>
    32e8:	9a 83       	std	Y+2, r25	; 0x02
    32ea:	89 83       	std	Y+1, r24	; 0x01
{
	u8 L_u8PressedKey=' ';
	for(u8 col=0; col<ColNumber; col++)
	{
		MDIO_voidSetPinValue(G_u8PortNum,col,LOW);
		for(u8 row=0; row<RowNumber; row++)
    32ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ee:	8f 5f       	subi	r24, 0xFF	; 255
    32f0:	8f 87       	std	Y+15, r24	; 0x0f
    32f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    32f4:	84 30       	cpi	r24, 0x04	; 4
    32f6:	08 f4       	brcc	.+2      	; 0x32fa <HKPD_u8GetKeyPressed+0x16e>
    32f8:	5f cf       	rjmp	.-322    	; 0x31b8 <HKPD_u8GetKeyPressed+0x2c>
			}
			while(MDIO_u8GetPinValue(G_u8PortNum,row+ColNumber)==LOW) {}
			_delay_ms(10);

		}
		MDIO_voidSetPinValue(G_u8PortNum,col,HIGH);
    32fa:	80 91 91 00 	lds	r24, 0x0091
    32fe:	68 89       	ldd	r22, Y+16	; 0x10
    3300:	41 e0       	ldi	r20, 0x01	; 1
    3302:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_voidSetPinValue>
	MDIO_voidSetPortValue(G_u8PortNum,0XFF);
}
u8 HKPD_u8GetKeyPressed()
{
	u8 L_u8PressedKey=' ';
	for(u8 col=0; col<ColNumber; col++)
    3306:	88 89       	ldd	r24, Y+16	; 0x10
    3308:	8f 5f       	subi	r24, 0xFF	; 255
    330a:	88 8b       	std	Y+16, r24	; 0x10
    330c:	88 89       	ldd	r24, Y+16	; 0x10
    330e:	84 30       	cpi	r24, 0x04	; 4
    3310:	08 f4       	brcc	.+2      	; 0x3314 <HKPD_u8GetKeyPressed+0x188>
    3312:	4a cf       	rjmp	.-364    	; 0x31a8 <HKPD_u8GetKeyPressed+0x1c>
			_delay_ms(10);

		}
		MDIO_voidSetPinValue(G_u8PortNum,col,HIGH);
	}
	return L_u8PressedKey;
    3314:	89 89       	ldd	r24, Y+17	; 0x11
}
    3316:	61 96       	adiw	r28, 0x11	; 17
    3318:	0f b6       	in	r0, 0x3f	; 63
    331a:	f8 94       	cli
    331c:	de bf       	out	0x3e, r29	; 62
    331e:	0f be       	out	0x3f, r0	; 63
    3320:	cd bf       	out	0x3d, r28	; 61
    3322:	cf 91       	pop	r28
    3324:	df 91       	pop	r29
    3326:	08 95       	ret

00003328 <HDCM_voidInitPort>:
#include "DC_Motor.h"
#include "../../MCAL/DIO/DIO.h"


void HDCM_voidInitPort(u8 A_u8PortNum)
{
    3328:	df 93       	push	r29
    332a:	cf 93       	push	r28
    332c:	0f 92       	push	r0
    332e:	cd b7       	in	r28, 0x3d	; 61
    3330:	de b7       	in	r29, 0x3e	; 62
    3332:	89 83       	std	Y+1, r24	; 0x01
	G_u8PortNum=A_u8PortNum;
    3334:	89 81       	ldd	r24, Y+1	; 0x01
    3336:	80 93 91 00 	sts	0x0091, r24
	MDIO_voidSetPinDirection(G_u8PortNum , PIN0 , OUTPUT);
    333a:	80 91 91 00 	lds	r24, 0x0091
    333e:	60 e0       	ldi	r22, 0x00	; 0
    3340:	41 e0       	ldi	r20, 0x01	; 1
    3342:	0e 94 2b 0b 	call	0x1656	; 0x1656 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(G_u8PortNum , PIN1 , OUTPUT);
    3346:	80 91 91 00 	lds	r24, 0x0091
    334a:	61 e0       	ldi	r22, 0x01	; 1
    334c:	41 e0       	ldi	r20, 0x01	; 1
    334e:	0e 94 2b 0b 	call	0x1656	; 0x1656 <MDIO_voidSetPinDirection>
}
    3352:	0f 90       	pop	r0
    3354:	cf 91       	pop	r28
    3356:	df 91       	pop	r29
    3358:	08 95       	ret

0000335a <HDCM_voidRotateClockWise>:
void HDCM_voidRotateClockWise()
{
    335a:	df 93       	push	r29
    335c:	cf 93       	push	r28
    335e:	cd b7       	in	r28, 0x3d	; 61
    3360:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(G_u8PortNum , PIN0 , HIGH);
    3362:	80 91 91 00 	lds	r24, 0x0091
    3366:	60 e0       	ldi	r22, 0x00	; 0
    3368:	41 e0       	ldi	r20, 0x01	; 1
    336a:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(G_u8PortNum , PIN1 , LOW);
    336e:	80 91 91 00 	lds	r24, 0x0091
    3372:	61 e0       	ldi	r22, 0x01	; 1
    3374:	40 e0       	ldi	r20, 0x00	; 0
    3376:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_voidSetPinValue>
}
    337a:	cf 91       	pop	r28
    337c:	df 91       	pop	r29
    337e:	08 95       	ret

00003380 <HDCM_voidRotateAntiClockWise>:
void HDCM_voidRotateAntiClockWise()
{
    3380:	df 93       	push	r29
    3382:	cf 93       	push	r28
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(PORTD , PIN0 , LOW);
    3388:	83 e0       	ldi	r24, 0x03	; 3
    338a:	60 e0       	ldi	r22, 0x00	; 0
    338c:	40 e0       	ldi	r20, 0x00	; 0
    338e:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(PORTD , PIN1 , HIGH);
    3392:	83 e0       	ldi	r24, 0x03	; 3
    3394:	61 e0       	ldi	r22, 0x01	; 1
    3396:	41 e0       	ldi	r20, 0x01	; 1
    3398:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_voidSetPinValue>
}
    339c:	cf 91       	pop	r28
    339e:	df 91       	pop	r29
    33a0:	08 95       	ret

000033a2 <main>:
#include "../MCAL/TIMER1_PWM/TIMER1_PWM.h"
#include "../MCAL/DIO/DIO.h"
#include <util/delay.h>

int main()
{
    33a2:	df 93       	push	r29
    33a4:	cf 93       	push	r28
    33a6:	cd b7       	in	r28, 0x3d	; 61
    33a8:	de b7       	in	r29, 0x3e	; 62
    33aa:	ec 97       	sbiw	r28, 0x3c	; 60
    33ac:	0f b6       	in	r0, 0x3f	; 63
    33ae:	f8 94       	cli
    33b0:	de bf       	out	0x3e, r29	; 62
    33b2:	0f be       	out	0x3f, r0	; 63
    33b4:	cd bf       	out	0x3d, r28	; 61
    MDIO_voidSetPinDirection(PORTD, PIN5, HIGH);
    33b6:	83 e0       	ldi	r24, 0x03	; 3
    33b8:	65 e0       	ldi	r22, 0x05	; 5
    33ba:	41 e0       	ldi	r20, 0x01	; 1
    33bc:	0e 94 2b 0b 	call	0x1656	; 0x1656 <MDIO_voidSetPinDirection>

    MTIMR1_voidTimer1Init();
    33c0:	0e 94 36 07 	call	0xe6c	; 0xe6c <MTIMR1_voidTimer1Init>
    MTIMR1_voidSetICR(20000);
    33c4:	80 e2       	ldi	r24, 0x20	; 32
    33c6:	9e e4       	ldi	r25, 0x4E	; 78
    33c8:	0e 94 7c 07 	call	0xef8	; 0xef8 <MTIMR1_voidSetICR>

    while (1)
    {
        for (u16 i = 1000; i <= 2000; i+=10)
    33cc:	88 ee       	ldi	r24, 0xE8	; 232
    33ce:	93 e0       	ldi	r25, 0x03	; 3
    33d0:	9c af       	std	Y+60, r25	; 0x3c
    33d2:	8b af       	std	Y+59, r24	; 0x3b
    33d4:	7b c0       	rjmp	.+246    	; 0x34cc <main+0x12a>
        {
            MTIMR1_voidTimer1SetCompMatchA(i);
    33d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    33d8:	9c ad       	ldd	r25, Y+60	; 0x3c
    33da:	0e 94 8e 07 	call	0xf1c	; 0xf1c <MTIMR1_voidTimer1SetCompMatchA>
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	a8 ec       	ldi	r26, 0xC8	; 200
    33e4:	b2 e4       	ldi	r27, 0x42	; 66
    33e6:	8d ab       	std	Y+53, r24	; 0x35
    33e8:	9e ab       	std	Y+54, r25	; 0x36
    33ea:	af ab       	std	Y+55, r26	; 0x37
    33ec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ee:	6d a9       	ldd	r22, Y+53	; 0x35
    33f0:	7e a9       	ldd	r23, Y+54	; 0x36
    33f2:	8f a9       	ldd	r24, Y+55	; 0x37
    33f4:	98 ad       	ldd	r25, Y+56	; 0x38
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	4a e7       	ldi	r20, 0x7A	; 122
    33fc:	53 e4       	ldi	r21, 0x43	; 67
    33fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	89 ab       	std	Y+49, r24	; 0x31
    3408:	9a ab       	std	Y+50, r25	; 0x32
    340a:	ab ab       	std	Y+51, r26	; 0x33
    340c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    340e:	69 a9       	ldd	r22, Y+49	; 0x31
    3410:	7a a9       	ldd	r23, Y+50	; 0x32
    3412:	8b a9       	ldd	r24, Y+51	; 0x33
    3414:	9c a9       	ldd	r25, Y+52	; 0x34
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	40 e8       	ldi	r20, 0x80	; 128
    341c:	5f e3       	ldi	r21, 0x3F	; 63
    341e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3422:	88 23       	and	r24, r24
    3424:	2c f4       	brge	.+10     	; 0x3430 <main+0x8e>
		__ticks = 1;
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	98 ab       	std	Y+48, r25	; 0x30
    342c:	8f a7       	std	Y+47, r24	; 0x2f
    342e:	3f c0       	rjmp	.+126    	; 0x34ae <main+0x10c>
	else if (__tmp > 65535)
    3430:	69 a9       	ldd	r22, Y+49	; 0x31
    3432:	7a a9       	ldd	r23, Y+50	; 0x32
    3434:	8b a9       	ldd	r24, Y+51	; 0x33
    3436:	9c a9       	ldd	r25, Y+52	; 0x34
    3438:	20 e0       	ldi	r18, 0x00	; 0
    343a:	3f ef       	ldi	r19, 0xFF	; 255
    343c:	4f e7       	ldi	r20, 0x7F	; 127
    343e:	57 e4       	ldi	r21, 0x47	; 71
    3440:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3444:	18 16       	cp	r1, r24
    3446:	4c f5       	brge	.+82     	; 0x349a <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3448:	6d a9       	ldd	r22, Y+53	; 0x35
    344a:	7e a9       	ldd	r23, Y+54	; 0x36
    344c:	8f a9       	ldd	r24, Y+55	; 0x37
    344e:	98 ad       	ldd	r25, Y+56	; 0x38
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	40 e2       	ldi	r20, 0x20	; 32
    3456:	51 e4       	ldi	r21, 0x41	; 65
    3458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345c:	dc 01       	movw	r26, r24
    345e:	cb 01       	movw	r24, r22
    3460:	bc 01       	movw	r22, r24
    3462:	cd 01       	movw	r24, r26
    3464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	98 ab       	std	Y+48, r25	; 0x30
    346e:	8f a7       	std	Y+47, r24	; 0x2f
    3470:	0f c0       	rjmp	.+30     	; 0x3490 <main+0xee>
    3472:	89 e1       	ldi	r24, 0x19	; 25
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	9e a7       	std	Y+46, r25	; 0x2e
    3478:	8d a7       	std	Y+45, r24	; 0x2d
    347a:	8d a5       	ldd	r24, Y+45	; 0x2d
    347c:	9e a5       	ldd	r25, Y+46	; 0x2e
    347e:	01 97       	sbiw	r24, 0x01	; 1
    3480:	f1 f7       	brne	.-4      	; 0x347e <main+0xdc>
    3482:	9e a7       	std	Y+46, r25	; 0x2e
    3484:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3486:	8f a5       	ldd	r24, Y+47	; 0x2f
    3488:	98 a9       	ldd	r25, Y+48	; 0x30
    348a:	01 97       	sbiw	r24, 0x01	; 1
    348c:	98 ab       	std	Y+48, r25	; 0x30
    348e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3490:	8f a5       	ldd	r24, Y+47	; 0x2f
    3492:	98 a9       	ldd	r25, Y+48	; 0x30
    3494:	00 97       	sbiw	r24, 0x00	; 0
    3496:	69 f7       	brne	.-38     	; 0x3472 <main+0xd0>
    3498:	14 c0       	rjmp	.+40     	; 0x34c2 <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    349a:	69 a9       	ldd	r22, Y+49	; 0x31
    349c:	7a a9       	ldd	r23, Y+50	; 0x32
    349e:	8b a9       	ldd	r24, Y+51	; 0x33
    34a0:	9c a9       	ldd	r25, Y+52	; 0x34
    34a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a6:	dc 01       	movw	r26, r24
    34a8:	cb 01       	movw	r24, r22
    34aa:	98 ab       	std	Y+48, r25	; 0x30
    34ac:	8f a7       	std	Y+47, r24	; 0x2f
    34ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    34b0:	98 a9       	ldd	r25, Y+48	; 0x30
    34b2:	9c a7       	std	Y+44, r25	; 0x2c
    34b4:	8b a7       	std	Y+43, r24	; 0x2b
    34b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    34b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    34ba:	01 97       	sbiw	r24, 0x01	; 1
    34bc:	f1 f7       	brne	.-4      	; 0x34ba <main+0x118>
    34be:	9c a7       	std	Y+44, r25	; 0x2c
    34c0:	8b a7       	std	Y+43, r24	; 0x2b
    MTIMR1_voidTimer1Init();
    MTIMR1_voidSetICR(20000);

    while (1)
    {
        for (u16 i = 1000; i <= 2000; i+=10)
    34c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    34c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    34c6:	0a 96       	adiw	r24, 0x0a	; 10
    34c8:	9c af       	std	Y+60, r25	; 0x3c
    34ca:	8b af       	std	Y+59, r24	; 0x3b
    34cc:	8b ad       	ldd	r24, Y+59	; 0x3b
    34ce:	9c ad       	ldd	r25, Y+60	; 0x3c
    34d0:	27 e0       	ldi	r18, 0x07	; 7
    34d2:	81 3d       	cpi	r24, 0xD1	; 209
    34d4:	92 07       	cpc	r25, r18
    34d6:	08 f4       	brcc	.+2      	; 0x34da <main+0x138>
    34d8:	7e cf       	rjmp	.-260    	; 0x33d6 <main+0x34>
    34da:	80 e0       	ldi	r24, 0x00	; 0
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	aa e7       	ldi	r26, 0x7A	; 122
    34e0:	b4 e4       	ldi	r27, 0x44	; 68
    34e2:	8f a3       	std	Y+39, r24	; 0x27
    34e4:	98 a7       	std	Y+40, r25	; 0x28
    34e6:	a9 a7       	std	Y+41, r26	; 0x29
    34e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ea:	6f a1       	ldd	r22, Y+39	; 0x27
    34ec:	78 a5       	ldd	r23, Y+40	; 0x28
    34ee:	89 a5       	ldd	r24, Y+41	; 0x29
    34f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	4a e7       	ldi	r20, 0x7A	; 122
    34f8:	53 e4       	ldi	r21, 0x43	; 67
    34fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fe:	dc 01       	movw	r26, r24
    3500:	cb 01       	movw	r24, r22
    3502:	8b a3       	std	Y+35, r24	; 0x23
    3504:	9c a3       	std	Y+36, r25	; 0x24
    3506:	ad a3       	std	Y+37, r26	; 0x25
    3508:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    350a:	6b a1       	ldd	r22, Y+35	; 0x23
    350c:	7c a1       	ldd	r23, Y+36	; 0x24
    350e:	8d a1       	ldd	r24, Y+37	; 0x25
    3510:	9e a1       	ldd	r25, Y+38	; 0x26
    3512:	20 e0       	ldi	r18, 0x00	; 0
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	40 e8       	ldi	r20, 0x80	; 128
    3518:	5f e3       	ldi	r21, 0x3F	; 63
    351a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    351e:	88 23       	and	r24, r24
    3520:	2c f4       	brge	.+10     	; 0x352c <main+0x18a>
		__ticks = 1;
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	9a a3       	std	Y+34, r25	; 0x22
    3528:	89 a3       	std	Y+33, r24	; 0x21
    352a:	3f c0       	rjmp	.+126    	; 0x35aa <main+0x208>
	else if (__tmp > 65535)
    352c:	6b a1       	ldd	r22, Y+35	; 0x23
    352e:	7c a1       	ldd	r23, Y+36	; 0x24
    3530:	8d a1       	ldd	r24, Y+37	; 0x25
    3532:	9e a1       	ldd	r25, Y+38	; 0x26
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	3f ef       	ldi	r19, 0xFF	; 255
    3538:	4f e7       	ldi	r20, 0x7F	; 127
    353a:	57 e4       	ldi	r21, 0x47	; 71
    353c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3540:	18 16       	cp	r1, r24
    3542:	4c f5       	brge	.+82     	; 0x3596 <main+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3544:	6f a1       	ldd	r22, Y+39	; 0x27
    3546:	78 a5       	ldd	r23, Y+40	; 0x28
    3548:	89 a5       	ldd	r24, Y+41	; 0x29
    354a:	9a a5       	ldd	r25, Y+42	; 0x2a
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	40 e2       	ldi	r20, 0x20	; 32
    3552:	51 e4       	ldi	r21, 0x41	; 65
    3554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3558:	dc 01       	movw	r26, r24
    355a:	cb 01       	movw	r24, r22
    355c:	bc 01       	movw	r22, r24
    355e:	cd 01       	movw	r24, r26
    3560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	9a a3       	std	Y+34, r25	; 0x22
    356a:	89 a3       	std	Y+33, r24	; 0x21
    356c:	0f c0       	rjmp	.+30     	; 0x358c <main+0x1ea>
    356e:	89 e1       	ldi	r24, 0x19	; 25
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	98 a3       	std	Y+32, r25	; 0x20
    3574:	8f 8f       	std	Y+31, r24	; 0x1f
    3576:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3578:	98 a1       	ldd	r25, Y+32	; 0x20
    357a:	01 97       	sbiw	r24, 0x01	; 1
    357c:	f1 f7       	brne	.-4      	; 0x357a <main+0x1d8>
    357e:	98 a3       	std	Y+32, r25	; 0x20
    3580:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3582:	89 a1       	ldd	r24, Y+33	; 0x21
    3584:	9a a1       	ldd	r25, Y+34	; 0x22
    3586:	01 97       	sbiw	r24, 0x01	; 1
    3588:	9a a3       	std	Y+34, r25	; 0x22
    358a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    358c:	89 a1       	ldd	r24, Y+33	; 0x21
    358e:	9a a1       	ldd	r25, Y+34	; 0x22
    3590:	00 97       	sbiw	r24, 0x00	; 0
    3592:	69 f7       	brne	.-38     	; 0x356e <main+0x1cc>
    3594:	14 c0       	rjmp	.+40     	; 0x35be <main+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3596:	6b a1       	ldd	r22, Y+35	; 0x23
    3598:	7c a1       	ldd	r23, Y+36	; 0x24
    359a:	8d a1       	ldd	r24, Y+37	; 0x25
    359c:	9e a1       	ldd	r25, Y+38	; 0x26
    359e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	9a a3       	std	Y+34, r25	; 0x22
    35a8:	89 a3       	std	Y+33, r24	; 0x21
    35aa:	89 a1       	ldd	r24, Y+33	; 0x21
    35ac:	9a a1       	ldd	r25, Y+34	; 0x22
    35ae:	9e 8f       	std	Y+30, r25	; 0x1e
    35b0:	8d 8f       	std	Y+29, r24	; 0x1d
    35b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35b6:	01 97       	sbiw	r24, 0x01	; 1
    35b8:	f1 f7       	brne	.-4      	; 0x35b6 <main+0x214>
    35ba:	9e 8f       	std	Y+30, r25	; 0x1e
    35bc:	8d 8f       	std	Y+29, r24	; 0x1d
            _delay_ms(100);
        }

        _delay_ms(1000);

        for (u16 i = 2000; i >= 1000; i-=10)
    35be:	80 ed       	ldi	r24, 0xD0	; 208
    35c0:	97 e0       	ldi	r25, 0x07	; 7
    35c2:	9a af       	std	Y+58, r25	; 0x3a
    35c4:	89 af       	std	Y+57, r24	; 0x39
    35c6:	7b c0       	rjmp	.+246    	; 0x36be <main+0x31c>
        {
            MTIMR1_voidTimer1SetCompMatchA(i);
    35c8:	89 ad       	ldd	r24, Y+57	; 0x39
    35ca:	9a ad       	ldd	r25, Y+58	; 0x3a
    35cc:	0e 94 8e 07 	call	0xf1c	; 0xf1c <MTIMR1_voidTimer1SetCompMatchA>
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	a8 ec       	ldi	r26, 0xC8	; 200
    35d6:	b2 e4       	ldi	r27, 0x42	; 66
    35d8:	89 8f       	std	Y+25, r24	; 0x19
    35da:	9a 8f       	std	Y+26, r25	; 0x1a
    35dc:	ab 8f       	std	Y+27, r26	; 0x1b
    35de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35e0:	69 8d       	ldd	r22, Y+25	; 0x19
    35e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35e8:	20 e0       	ldi	r18, 0x00	; 0
    35ea:	30 e0       	ldi	r19, 0x00	; 0
    35ec:	4a e7       	ldi	r20, 0x7A	; 122
    35ee:	53 e4       	ldi	r21, 0x43	; 67
    35f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	8d 8b       	std	Y+21, r24	; 0x15
    35fa:	9e 8b       	std	Y+22, r25	; 0x16
    35fc:	af 8b       	std	Y+23, r26	; 0x17
    35fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3600:	6d 89       	ldd	r22, Y+21	; 0x15
    3602:	7e 89       	ldd	r23, Y+22	; 0x16
    3604:	8f 89       	ldd	r24, Y+23	; 0x17
    3606:	98 8d       	ldd	r25, Y+24	; 0x18
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	40 e8       	ldi	r20, 0x80	; 128
    360e:	5f e3       	ldi	r21, 0x3F	; 63
    3610:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3614:	88 23       	and	r24, r24
    3616:	2c f4       	brge	.+10     	; 0x3622 <main+0x280>
		__ticks = 1;
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	9c 8b       	std	Y+20, r25	; 0x14
    361e:	8b 8b       	std	Y+19, r24	; 0x13
    3620:	3f c0       	rjmp	.+126    	; 0x36a0 <main+0x2fe>
	else if (__tmp > 65535)
    3622:	6d 89       	ldd	r22, Y+21	; 0x15
    3624:	7e 89       	ldd	r23, Y+22	; 0x16
    3626:	8f 89       	ldd	r24, Y+23	; 0x17
    3628:	98 8d       	ldd	r25, Y+24	; 0x18
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	3f ef       	ldi	r19, 0xFF	; 255
    362e:	4f e7       	ldi	r20, 0x7F	; 127
    3630:	57 e4       	ldi	r21, 0x47	; 71
    3632:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3636:	18 16       	cp	r1, r24
    3638:	4c f5       	brge	.+82     	; 0x368c <main+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    363a:	69 8d       	ldd	r22, Y+25	; 0x19
    363c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    363e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3640:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3642:	20 e0       	ldi	r18, 0x00	; 0
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	40 e2       	ldi	r20, 0x20	; 32
    3648:	51 e4       	ldi	r21, 0x41	; 65
    364a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	bc 01       	movw	r22, r24
    3654:	cd 01       	movw	r24, r26
    3656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	9c 8b       	std	Y+20, r25	; 0x14
    3660:	8b 8b       	std	Y+19, r24	; 0x13
    3662:	0f c0       	rjmp	.+30     	; 0x3682 <main+0x2e0>
    3664:	89 e1       	ldi	r24, 0x19	; 25
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	9a 8b       	std	Y+18, r25	; 0x12
    366a:	89 8b       	std	Y+17, r24	; 0x11
    366c:	89 89       	ldd	r24, Y+17	; 0x11
    366e:	9a 89       	ldd	r25, Y+18	; 0x12
    3670:	01 97       	sbiw	r24, 0x01	; 1
    3672:	f1 f7       	brne	.-4      	; 0x3670 <main+0x2ce>
    3674:	9a 8b       	std	Y+18, r25	; 0x12
    3676:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3678:	8b 89       	ldd	r24, Y+19	; 0x13
    367a:	9c 89       	ldd	r25, Y+20	; 0x14
    367c:	01 97       	sbiw	r24, 0x01	; 1
    367e:	9c 8b       	std	Y+20, r25	; 0x14
    3680:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3682:	8b 89       	ldd	r24, Y+19	; 0x13
    3684:	9c 89       	ldd	r25, Y+20	; 0x14
    3686:	00 97       	sbiw	r24, 0x00	; 0
    3688:	69 f7       	brne	.-38     	; 0x3664 <main+0x2c2>
    368a:	14 c0       	rjmp	.+40     	; 0x36b4 <main+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    368c:	6d 89       	ldd	r22, Y+21	; 0x15
    368e:	7e 89       	ldd	r23, Y+22	; 0x16
    3690:	8f 89       	ldd	r24, Y+23	; 0x17
    3692:	98 8d       	ldd	r25, Y+24	; 0x18
    3694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	9c 8b       	std	Y+20, r25	; 0x14
    369e:	8b 8b       	std	Y+19, r24	; 0x13
    36a0:	8b 89       	ldd	r24, Y+19	; 0x13
    36a2:	9c 89       	ldd	r25, Y+20	; 0x14
    36a4:	98 8b       	std	Y+16, r25	; 0x10
    36a6:	8f 87       	std	Y+15, r24	; 0x0f
    36a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    36aa:	98 89       	ldd	r25, Y+16	; 0x10
    36ac:	01 97       	sbiw	r24, 0x01	; 1
    36ae:	f1 f7       	brne	.-4      	; 0x36ac <main+0x30a>
    36b0:	98 8b       	std	Y+16, r25	; 0x10
    36b2:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(100);
        }

        _delay_ms(1000);

        for (u16 i = 2000; i >= 1000; i-=10)
    36b4:	89 ad       	ldd	r24, Y+57	; 0x39
    36b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    36b8:	0a 97       	sbiw	r24, 0x0a	; 10
    36ba:	9a af       	std	Y+58, r25	; 0x3a
    36bc:	89 af       	std	Y+57, r24	; 0x39
    36be:	89 ad       	ldd	r24, Y+57	; 0x39
    36c0:	9a ad       	ldd	r25, Y+58	; 0x3a
    36c2:	23 e0       	ldi	r18, 0x03	; 3
    36c4:	88 3e       	cpi	r24, 0xE8	; 232
    36c6:	92 07       	cpc	r25, r18
    36c8:	08 f0       	brcs	.+2      	; 0x36cc <main+0x32a>
    36ca:	7e cf       	rjmp	.-260    	; 0x35c8 <main+0x226>
    36cc:	80 e0       	ldi	r24, 0x00	; 0
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	aa e7       	ldi	r26, 0x7A	; 122
    36d2:	b4 e4       	ldi	r27, 0x44	; 68
    36d4:	8b 87       	std	Y+11, r24	; 0x0b
    36d6:	9c 87       	std	Y+12, r25	; 0x0c
    36d8:	ad 87       	std	Y+13, r26	; 0x0d
    36da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    36de:	7c 85       	ldd	r23, Y+12	; 0x0c
    36e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    36e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    36e4:	20 e0       	ldi	r18, 0x00	; 0
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	4a e7       	ldi	r20, 0x7A	; 122
    36ea:	53 e4       	ldi	r21, 0x43	; 67
    36ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	8f 83       	std	Y+7, r24	; 0x07
    36f6:	98 87       	std	Y+8, r25	; 0x08
    36f8:	a9 87       	std	Y+9, r26	; 0x09
    36fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36fc:	6f 81       	ldd	r22, Y+7	; 0x07
    36fe:	78 85       	ldd	r23, Y+8	; 0x08
    3700:	89 85       	ldd	r24, Y+9	; 0x09
    3702:	9a 85       	ldd	r25, Y+10	; 0x0a
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	40 e8       	ldi	r20, 0x80	; 128
    370a:	5f e3       	ldi	r21, 0x3F	; 63
    370c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3710:	88 23       	and	r24, r24
    3712:	2c f4       	brge	.+10     	; 0x371e <main+0x37c>
		__ticks = 1;
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	9e 83       	std	Y+6, r25	; 0x06
    371a:	8d 83       	std	Y+5, r24	; 0x05
    371c:	3f c0       	rjmp	.+126    	; 0x379c <main+0x3fa>
	else if (__tmp > 65535)
    371e:	6f 81       	ldd	r22, Y+7	; 0x07
    3720:	78 85       	ldd	r23, Y+8	; 0x08
    3722:	89 85       	ldd	r24, Y+9	; 0x09
    3724:	9a 85       	ldd	r25, Y+10	; 0x0a
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	3f ef       	ldi	r19, 0xFF	; 255
    372a:	4f e7       	ldi	r20, 0x7F	; 127
    372c:	57 e4       	ldi	r21, 0x47	; 71
    372e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3732:	18 16       	cp	r1, r24
    3734:	4c f5       	brge	.+82     	; 0x3788 <main+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3736:	6b 85       	ldd	r22, Y+11	; 0x0b
    3738:	7c 85       	ldd	r23, Y+12	; 0x0c
    373a:	8d 85       	ldd	r24, Y+13	; 0x0d
    373c:	9e 85       	ldd	r25, Y+14	; 0x0e
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	40 e2       	ldi	r20, 0x20	; 32
    3744:	51 e4       	ldi	r21, 0x41	; 65
    3746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    374a:	dc 01       	movw	r26, r24
    374c:	cb 01       	movw	r24, r22
    374e:	bc 01       	movw	r22, r24
    3750:	cd 01       	movw	r24, r26
    3752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	9e 83       	std	Y+6, r25	; 0x06
    375c:	8d 83       	std	Y+5, r24	; 0x05
    375e:	0f c0       	rjmp	.+30     	; 0x377e <main+0x3dc>
    3760:	89 e1       	ldi	r24, 0x19	; 25
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	9c 83       	std	Y+4, r25	; 0x04
    3766:	8b 83       	std	Y+3, r24	; 0x03
    3768:	8b 81       	ldd	r24, Y+3	; 0x03
    376a:	9c 81       	ldd	r25, Y+4	; 0x04
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	f1 f7       	brne	.-4      	; 0x376c <main+0x3ca>
    3770:	9c 83       	std	Y+4, r25	; 0x04
    3772:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3774:	8d 81       	ldd	r24, Y+5	; 0x05
    3776:	9e 81       	ldd	r25, Y+6	; 0x06
    3778:	01 97       	sbiw	r24, 0x01	; 1
    377a:	9e 83       	std	Y+6, r25	; 0x06
    377c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    377e:	8d 81       	ldd	r24, Y+5	; 0x05
    3780:	9e 81       	ldd	r25, Y+6	; 0x06
    3782:	00 97       	sbiw	r24, 0x00	; 0
    3784:	69 f7       	brne	.-38     	; 0x3760 <main+0x3be>
    3786:	22 ce       	rjmp	.-956    	; 0x33cc <main+0x2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3788:	6f 81       	ldd	r22, Y+7	; 0x07
    378a:	78 85       	ldd	r23, Y+8	; 0x08
    378c:	89 85       	ldd	r24, Y+9	; 0x09
    378e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3794:	dc 01       	movw	r26, r24
    3796:	cb 01       	movw	r24, r22
    3798:	9e 83       	std	Y+6, r25	; 0x06
    379a:	8d 83       	std	Y+5, r24	; 0x05
    379c:	8d 81       	ldd	r24, Y+5	; 0x05
    379e:	9e 81       	ldd	r25, Y+6	; 0x06
    37a0:	9a 83       	std	Y+2, r25	; 0x02
    37a2:	89 83       	std	Y+1, r24	; 0x01
    37a4:	89 81       	ldd	r24, Y+1	; 0x01
    37a6:	9a 81       	ldd	r25, Y+2	; 0x02
    37a8:	01 97       	sbiw	r24, 0x01	; 1
    37aa:	f1 f7       	brne	.-4      	; 0x37a8 <main+0x406>
    37ac:	9a 83       	std	Y+2, r25	; 0x02
    37ae:	89 83       	std	Y+1, r24	; 0x01
    37b0:	0d ce       	rjmp	.-998    	; 0x33cc <main+0x2a>

000037b2 <__mulsi3>:
    37b2:	62 9f       	mul	r22, r18
    37b4:	d0 01       	movw	r26, r0
    37b6:	73 9f       	mul	r23, r19
    37b8:	f0 01       	movw	r30, r0
    37ba:	82 9f       	mul	r24, r18
    37bc:	e0 0d       	add	r30, r0
    37be:	f1 1d       	adc	r31, r1
    37c0:	64 9f       	mul	r22, r20
    37c2:	e0 0d       	add	r30, r0
    37c4:	f1 1d       	adc	r31, r1
    37c6:	92 9f       	mul	r25, r18
    37c8:	f0 0d       	add	r31, r0
    37ca:	83 9f       	mul	r24, r19
    37cc:	f0 0d       	add	r31, r0
    37ce:	74 9f       	mul	r23, r20
    37d0:	f0 0d       	add	r31, r0
    37d2:	65 9f       	mul	r22, r21
    37d4:	f0 0d       	add	r31, r0
    37d6:	99 27       	eor	r25, r25
    37d8:	72 9f       	mul	r23, r18
    37da:	b0 0d       	add	r27, r0
    37dc:	e1 1d       	adc	r30, r1
    37de:	f9 1f       	adc	r31, r25
    37e0:	63 9f       	mul	r22, r19
    37e2:	b0 0d       	add	r27, r0
    37e4:	e1 1d       	adc	r30, r1
    37e6:	f9 1f       	adc	r31, r25
    37e8:	bd 01       	movw	r22, r26
    37ea:	cf 01       	movw	r24, r30
    37ec:	11 24       	eor	r1, r1
    37ee:	08 95       	ret

000037f0 <__udivmodqi4>:
    37f0:	99 1b       	sub	r25, r25
    37f2:	79 e0       	ldi	r23, 0x09	; 9
    37f4:	04 c0       	rjmp	.+8      	; 0x37fe <__udivmodqi4_ep>

000037f6 <__udivmodqi4_loop>:
    37f6:	99 1f       	adc	r25, r25
    37f8:	96 17       	cp	r25, r22
    37fa:	08 f0       	brcs	.+2      	; 0x37fe <__udivmodqi4_ep>
    37fc:	96 1b       	sub	r25, r22

000037fe <__udivmodqi4_ep>:
    37fe:	88 1f       	adc	r24, r24
    3800:	7a 95       	dec	r23
    3802:	c9 f7       	brne	.-14     	; 0x37f6 <__udivmodqi4_loop>
    3804:	80 95       	com	r24
    3806:	08 95       	ret

00003808 <__udivmodsi4>:
    3808:	a1 e2       	ldi	r26, 0x21	; 33
    380a:	1a 2e       	mov	r1, r26
    380c:	aa 1b       	sub	r26, r26
    380e:	bb 1b       	sub	r27, r27
    3810:	fd 01       	movw	r30, r26
    3812:	0d c0       	rjmp	.+26     	; 0x382e <__udivmodsi4_ep>

00003814 <__udivmodsi4_loop>:
    3814:	aa 1f       	adc	r26, r26
    3816:	bb 1f       	adc	r27, r27
    3818:	ee 1f       	adc	r30, r30
    381a:	ff 1f       	adc	r31, r31
    381c:	a2 17       	cp	r26, r18
    381e:	b3 07       	cpc	r27, r19
    3820:	e4 07       	cpc	r30, r20
    3822:	f5 07       	cpc	r31, r21
    3824:	20 f0       	brcs	.+8      	; 0x382e <__udivmodsi4_ep>
    3826:	a2 1b       	sub	r26, r18
    3828:	b3 0b       	sbc	r27, r19
    382a:	e4 0b       	sbc	r30, r20
    382c:	f5 0b       	sbc	r31, r21

0000382e <__udivmodsi4_ep>:
    382e:	66 1f       	adc	r22, r22
    3830:	77 1f       	adc	r23, r23
    3832:	88 1f       	adc	r24, r24
    3834:	99 1f       	adc	r25, r25
    3836:	1a 94       	dec	r1
    3838:	69 f7       	brne	.-38     	; 0x3814 <__udivmodsi4_loop>
    383a:	60 95       	com	r22
    383c:	70 95       	com	r23
    383e:	80 95       	com	r24
    3840:	90 95       	com	r25
    3842:	9b 01       	movw	r18, r22
    3844:	ac 01       	movw	r20, r24
    3846:	bd 01       	movw	r22, r26
    3848:	cf 01       	movw	r24, r30
    384a:	08 95       	ret

0000384c <__divmodsi4>:
    384c:	97 fb       	bst	r25, 7
    384e:	09 2e       	mov	r0, r25
    3850:	05 26       	eor	r0, r21
    3852:	0e d0       	rcall	.+28     	; 0x3870 <__divmodsi4_neg1>
    3854:	57 fd       	sbrc	r21, 7
    3856:	04 d0       	rcall	.+8      	; 0x3860 <__divmodsi4_neg2>
    3858:	d7 df       	rcall	.-82     	; 0x3808 <__udivmodsi4>
    385a:	0a d0       	rcall	.+20     	; 0x3870 <__divmodsi4_neg1>
    385c:	00 1c       	adc	r0, r0
    385e:	38 f4       	brcc	.+14     	; 0x386e <__divmodsi4_exit>

00003860 <__divmodsi4_neg2>:
    3860:	50 95       	com	r21
    3862:	40 95       	com	r20
    3864:	30 95       	com	r19
    3866:	21 95       	neg	r18
    3868:	3f 4f       	sbci	r19, 0xFF	; 255
    386a:	4f 4f       	sbci	r20, 0xFF	; 255
    386c:	5f 4f       	sbci	r21, 0xFF	; 255

0000386e <__divmodsi4_exit>:
    386e:	08 95       	ret

00003870 <__divmodsi4_neg1>:
    3870:	f6 f7       	brtc	.-4      	; 0x386e <__divmodsi4_exit>
    3872:	90 95       	com	r25
    3874:	80 95       	com	r24
    3876:	70 95       	com	r23
    3878:	61 95       	neg	r22
    387a:	7f 4f       	sbci	r23, 0xFF	; 255
    387c:	8f 4f       	sbci	r24, 0xFF	; 255
    387e:	9f 4f       	sbci	r25, 0xFF	; 255
    3880:	08 95       	ret

00003882 <__prologue_saves__>:
    3882:	2f 92       	push	r2
    3884:	3f 92       	push	r3
    3886:	4f 92       	push	r4
    3888:	5f 92       	push	r5
    388a:	6f 92       	push	r6
    388c:	7f 92       	push	r7
    388e:	8f 92       	push	r8
    3890:	9f 92       	push	r9
    3892:	af 92       	push	r10
    3894:	bf 92       	push	r11
    3896:	cf 92       	push	r12
    3898:	df 92       	push	r13
    389a:	ef 92       	push	r14
    389c:	ff 92       	push	r15
    389e:	0f 93       	push	r16
    38a0:	1f 93       	push	r17
    38a2:	cf 93       	push	r28
    38a4:	df 93       	push	r29
    38a6:	cd b7       	in	r28, 0x3d	; 61
    38a8:	de b7       	in	r29, 0x3e	; 62
    38aa:	ca 1b       	sub	r28, r26
    38ac:	db 0b       	sbc	r29, r27
    38ae:	0f b6       	in	r0, 0x3f	; 63
    38b0:	f8 94       	cli
    38b2:	de bf       	out	0x3e, r29	; 62
    38b4:	0f be       	out	0x3f, r0	; 63
    38b6:	cd bf       	out	0x3d, r28	; 61
    38b8:	09 94       	ijmp

000038ba <__epilogue_restores__>:
    38ba:	2a 88       	ldd	r2, Y+18	; 0x12
    38bc:	39 88       	ldd	r3, Y+17	; 0x11
    38be:	48 88       	ldd	r4, Y+16	; 0x10
    38c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    38c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    38c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    38c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    38c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    38ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    38cc:	b9 84       	ldd	r11, Y+9	; 0x09
    38ce:	c8 84       	ldd	r12, Y+8	; 0x08
    38d0:	df 80       	ldd	r13, Y+7	; 0x07
    38d2:	ee 80       	ldd	r14, Y+6	; 0x06
    38d4:	fd 80       	ldd	r15, Y+5	; 0x05
    38d6:	0c 81       	ldd	r16, Y+4	; 0x04
    38d8:	1b 81       	ldd	r17, Y+3	; 0x03
    38da:	aa 81       	ldd	r26, Y+2	; 0x02
    38dc:	b9 81       	ldd	r27, Y+1	; 0x01
    38de:	ce 0f       	add	r28, r30
    38e0:	d1 1d       	adc	r29, r1
    38e2:	0f b6       	in	r0, 0x3f	; 63
    38e4:	f8 94       	cli
    38e6:	de bf       	out	0x3e, r29	; 62
    38e8:	0f be       	out	0x3f, r0	; 63
    38ea:	cd bf       	out	0x3d, r28	; 61
    38ec:	ed 01       	movw	r28, r26
    38ee:	08 95       	ret

000038f0 <_exit>:
    38f0:	f8 94       	cli

000038f2 <__stop_program>:
    38f2:	ff cf       	rjmp	.-2      	; 0x38f2 <__stop_program>

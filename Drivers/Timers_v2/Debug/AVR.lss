
AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003804  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00003804  00003898  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800082  00800082  000038ba  2**0
                  ALLOC
  3 .stab         00003c84  00000000  00000000  000038bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000181e  00000000  00000000  00007540  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000900e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ac57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bb42  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c8f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ca50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ccdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d4ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <main>
      8a:	0c 94 00 1c 	jmp	0x3800	; 0x3800 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e5 1b 	jmp	0x37ca	; 0x37ca <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f1 1b 	jmp	0x37e2	; 0x37e2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f1 1b 	jmp	0x37e2	; 0x37e2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e5 1b 	jmp	0x37ca	; 0x37ca <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f1 1b 	jmp	0x37e2	; 0x37e2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f1 1b 	jmp	0x37e2	; 0x37e2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f1 1b 	jmp	0x37e2	; 0x37e2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d9 1b 	jmp	0x37b2	; 0x37b2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f5 1b 	jmp	0x37ea	; 0x37ea <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MUART_voidInit>:
#include "UART_config.h"
#include "../../Lib/Bit_Maths.h"
#include <util/delay.h>

void MUART_voidInit()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* Enable RX and TX */
		SET_BIT(UCSRB , UCSRB_RXEN);
     b4e:	aa e2       	ldi	r26, 0x2A	; 42
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ea e2       	ldi	r30, 0x2A	; 42
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 61       	ori	r24, 0x10	; 16
     b5a:	8c 93       	st	X, r24
		SET_BIT(UCSRB , UCSRB_TXEN);
     b5c:	aa e2       	ldi	r26, 0x2A	; 42
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ea e2       	ldi	r30, 0x2A	; 42
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	8c 93       	st	X, r24

		/* Set to 8 bit mode
		 * No parity
	 	 * One stop bit */
		UCSRC = 0b10000110  ;
     b6a:	e0 e4       	ldi	r30, 0x40	; 64
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	86 e8       	ldi	r24, 0x86	; 134
     b70:	80 83       	st	Z, r24

		/* Set buad rate to 9600 */
		UBRRL = 51 ;
     b72:	e9 e2       	ldi	r30, 0x29	; 41
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	83 e3       	ldi	r24, 0x33	; 51
     b78:	80 83       	st	Z, r24
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <MUART_voidTransmitData>:
void MUART_voidTransmitData(u8 A_u8Data)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	00 d0       	rcall	.+0      	; 0xb86 <MUART_voidTransmitData+0x6>
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	89 83       	std	Y+1, r24	; 0x01
	//wait for empty transmit buffer
	while (GET_BIT(UCSRA , UCSRA_UDRE) == 0){}
     b8c:	eb e2       	ldi	r30, 0x2B	; 43
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z

	//put data into the buffer (send data)
	UDR = A_u8Data ;
     b92:	ec e2       	ldi	r30, 0x2C	; 44
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	80 83       	st	Z, r24
}
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	cf 91       	pop	r28
     ba0:	df 91       	pop	r29
     ba2:	08 95       	ret

00000ba4 <MUART_u8RecieveData>:
u8 MUART_u8RecieveData ()
{
     ba4:	df 93       	push	r29
     ba6:	cf 93       	push	r28
     ba8:	0f 92       	push	r0
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
	//wait for data to be recieved
	while (GET_BIT(UCSRA , UCSRA_RXC) == 0){}
     bae:	eb e2       	ldi	r30, 0x2B	; 43
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z

	//get and return the return data from buffer
	return UDR ;
     bb4:	ec e2       	ldi	r30, 0x2C	; 44
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z

}
     bba:	0f 90       	pop	r0
     bbc:	cf 91       	pop	r28
     bbe:	df 91       	pop	r29
     bc0:	08 95       	ret

00000bc2 <MUART_voidSetBaudRate>:
void MUART_voidSetBaudRate(u32 A_u32BaudRate)
{
     bc2:	df 93       	push	r29
     bc4:	cf 93       	push	r28
     bc6:	00 d0       	rcall	.+0      	; 0xbc8 <MUART_voidSetBaudRate+0x6>
     bc8:	00 d0       	rcall	.+0      	; 0xbca <MUART_voidSetBaudRate+0x8>
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	69 83       	std	Y+1, r22	; 0x01
     bd0:	7a 83       	std	Y+2, r23	; 0x02
     bd2:	8b 83       	std	Y+3, r24	; 0x03
     bd4:	9c 83       	std	Y+4, r25	; 0x04
	UBRRL=A_u32BaudRate;
     bd6:	e9 e2       	ldi	r30, 0x29	; 41
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	80 83       	st	Z, r24
}
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <MUART_voidSendString>:

void MUART_voidSendString (u8 *A_StrPtr)
{
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	60 97       	sbiw	r28, 0x10	; 16
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	de bf       	out	0x3e, r29	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	cd bf       	out	0x3d, r28	; 61
     c00:	98 8b       	std	Y+16, r25	; 0x10
     c02:	8f 87       	std	Y+15, r24	; 0x0f
     c04:	7d c0       	rjmp	.+250    	; 0xd00 <MUART_voidSendString+0x114>
	while (*A_StrPtr != '\0')
		{
		MUART_voidTransmitData(*A_StrPtr ++);
     c06:	ef 85       	ldd	r30, Y+15	; 0x0f
     c08:	f8 89       	ldd	r31, Y+16	; 0x10
     c0a:	20 81       	ld	r18, Z
     c0c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c0e:	98 89       	ldd	r25, Y+16	; 0x10
     c10:	01 96       	adiw	r24, 0x01	; 1
     c12:	98 8b       	std	Y+16, r25	; 0x10
     c14:	8f 87       	std	Y+15, r24	; 0x0f
     c16:	82 2f       	mov	r24, r18
     c18:	0e 94 c0 05 	call	0xb80	; 0xb80 <MUART_voidTransmitData>
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a8 e4       	ldi	r26, 0x48	; 72
     c22:	b3 e4       	ldi	r27, 0x43	; 67
     c24:	8b 87       	std	Y+11, r24	; 0x0b
     c26:	9c 87       	std	Y+12, r25	; 0x0c
     c28:	ad 87       	std	Y+13, r26	; 0x0d
     c2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     c2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     c30:	8d 85       	ldd	r24, Y+13	; 0x0d
     c32:	9e 85       	ldd	r25, Y+14	; 0x0e
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	4a e7       	ldi	r20, 0x7A	; 122
     c3a:	53 e4       	ldi	r21, 0x43	; 67
     c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c40:	dc 01       	movw	r26, r24
     c42:	cb 01       	movw	r24, r22
     c44:	8f 83       	std	Y+7, r24	; 0x07
     c46:	98 87       	std	Y+8, r25	; 0x08
     c48:	a9 87       	std	Y+9, r26	; 0x09
     c4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c4c:	6f 81       	ldd	r22, Y+7	; 0x07
     c4e:	78 85       	ldd	r23, Y+8	; 0x08
     c50:	89 85       	ldd	r24, Y+9	; 0x09
     c52:	9a 85       	ldd	r25, Y+10	; 0x0a
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	40 e8       	ldi	r20, 0x80	; 128
     c5a:	5f e3       	ldi	r21, 0x3F	; 63
     c5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c60:	88 23       	and	r24, r24
     c62:	2c f4       	brge	.+10     	; 0xc6e <MUART_voidSendString+0x82>
		__ticks = 1;
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	9e 83       	std	Y+6, r25	; 0x06
     c6a:	8d 83       	std	Y+5, r24	; 0x05
     c6c:	3f c0       	rjmp	.+126    	; 0xcec <MUART_voidSendString+0x100>
	else if (__tmp > 65535)
     c6e:	6f 81       	ldd	r22, Y+7	; 0x07
     c70:	78 85       	ldd	r23, Y+8	; 0x08
     c72:	89 85       	ldd	r24, Y+9	; 0x09
     c74:	9a 85       	ldd	r25, Y+10	; 0x0a
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	3f ef       	ldi	r19, 0xFF	; 255
     c7a:	4f e7       	ldi	r20, 0x7F	; 127
     c7c:	57 e4       	ldi	r21, 0x47	; 71
     c7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c82:	18 16       	cp	r1, r24
     c84:	4c f5       	brge	.+82     	; 0xcd8 <MUART_voidSendString+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c86:	6b 85       	ldd	r22, Y+11	; 0x0b
     c88:	7c 85       	ldd	r23, Y+12	; 0x0c
     c8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	40 e2       	ldi	r20, 0x20	; 32
     c94:	51 e4       	ldi	r21, 0x41	; 65
     c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c9a:	dc 01       	movw	r26, r24
     c9c:	cb 01       	movw	r24, r22
     c9e:	bc 01       	movw	r22, r24
     ca0:	cd 01       	movw	r24, r26
     ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	9e 83       	std	Y+6, r25	; 0x06
     cac:	8d 83       	std	Y+5, r24	; 0x05
     cae:	0f c0       	rjmp	.+30     	; 0xcce <MUART_voidSendString+0xe2>
     cb0:	89 e1       	ldi	r24, 0x19	; 25
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	9c 83       	std	Y+4, r25	; 0x04
     cb6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	9c 81       	ldd	r25, Y+4	; 0x04
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <MUART_voidSendString+0xd0>
     cc0:	9c 83       	std	Y+4, r25	; 0x04
     cc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cc4:	8d 81       	ldd	r24, Y+5	; 0x05
     cc6:	9e 81       	ldd	r25, Y+6	; 0x06
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	9e 83       	std	Y+6, r25	; 0x06
     ccc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cce:	8d 81       	ldd	r24, Y+5	; 0x05
     cd0:	9e 81       	ldd	r25, Y+6	; 0x06
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	69 f7       	brne	.-38     	; 0xcb0 <MUART_voidSendString+0xc4>
     cd6:	14 c0       	rjmp	.+40     	; 0xd00 <MUART_voidSendString+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cd8:	6f 81       	ldd	r22, Y+7	; 0x07
     cda:	78 85       	ldd	r23, Y+8	; 0x08
     cdc:	89 85       	ldd	r24, Y+9	; 0x09
     cde:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ce4:	dc 01       	movw	r26, r24
     ce6:	cb 01       	movw	r24, r22
     ce8:	9e 83       	std	Y+6, r25	; 0x06
     cea:	8d 83       	std	Y+5, r24	; 0x05
     cec:	8d 81       	ldd	r24, Y+5	; 0x05
     cee:	9e 81       	ldd	r25, Y+6	; 0x06
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	f1 f7       	brne	.-4      	; 0xcf8 <MUART_voidSendString+0x10c>
     cfc:	9a 83       	std	Y+2, r25	; 0x02
     cfe:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=A_u32BaudRate;
}

void MUART_voidSendString (u8 *A_StrPtr)
{
	while (*A_StrPtr != '\0')
     d00:	ef 85       	ldd	r30, Y+15	; 0x0f
     d02:	f8 89       	ldd	r31, Y+16	; 0x10
     d04:	80 81       	ld	r24, Z
     d06:	88 23       	and	r24, r24
     d08:	09 f0       	breq	.+2      	; 0xd0c <MUART_voidSendString+0x120>
     d0a:	7d cf       	rjmp	.-262    	; 0xc06 <MUART_voidSendString+0x1a>
		{
		MUART_voidTransmitData(*A_StrPtr ++);
		_delay_ms(200);
		}
}
     d0c:	60 96       	adiw	r28, 0x10	; 16
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	08 95       	ret

00000d1e <MUART_voidRecieveString>:
u8* MUART_voidRecieveString ()
{
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	e4 97       	sbiw	r28, 0x34	; 52
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
	u8 ReceivedString[50]; // max length=50 chars
	u8 i = 0;
     d32:	1a 82       	std	Y+2, r1	; 0x02
	u8 ReceivedChar;

	do {
		ReceivedChar = MUART_u8RecieveData();
     d34:	0e 94 d2 05 	call	0xba4	; 0xba4 <MUART_u8RecieveData>
     d38:	89 83       	std	Y+1, r24	; 0x01

		if (ReceivedChar != '\r' && ReceivedChar != '\n')
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	8d 30       	cpi	r24, 0x0D	; 13
     d3e:	81 f0       	breq	.+32     	; 0xd60 <MUART_voidRecieveString+0x42>
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	8a 30       	cpi	r24, 0x0A	; 10
     d44:	69 f0       	breq	.+26     	; 0xd60 <MUART_voidRecieveString+0x42>
		{
			ReceivedString[i] = ReceivedChar;
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	ce 01       	movw	r24, r28
     d4e:	03 96       	adiw	r24, 0x03	; 3
     d50:	fc 01       	movw	r30, r24
     d52:	e2 0f       	add	r30, r18
     d54:	f3 1f       	adc	r31, r19
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	80 83       	st	Z, r24
			i++;
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	8f 5f       	subi	r24, 0xFF	; 255
     d5e:	8a 83       	std	Y+2, r24	; 0x02
		}
	} while (ReceivedChar != '\r');
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	8d 30       	cpi	r24, 0x0D	; 13
     d64:	39 f7       	brne	.-50     	; 0xd34 <MUART_voidRecieveString+0x16>

	ReceivedString[i] = '\0';
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	ce 01       	movw	r24, r28
     d6e:	03 96       	adiw	r24, 0x03	; 3
     d70:	fc 01       	movw	r30, r24
     d72:	e2 0f       	add	r30, r18
     d74:	f3 1f       	adc	r31, r19
     d76:	10 82       	st	Z, r1
	return ReceivedString;
     d78:	ce 01       	movw	r24, r28
     d7a:	03 96       	adiw	r24, 0x03	; 3
}
     d7c:	e4 96       	adiw	r28, 0x34	; 52
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <MUART_voidSendNumber>:

void MUART_voidSendNumber(u32 A_u32Number)
{
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	61 97       	sbiw	r28, 0x11	; 17
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	6e 87       	std	Y+14, r22	; 0x0e
     da4:	7f 87       	std	Y+15, r23	; 0x0f
     da6:	88 8b       	std	Y+16, r24	; 0x10
     da8:	99 8b       	std	Y+17, r25	; 0x11
	if (A_u32Number == 0) {
     daa:	8e 85       	ldd	r24, Y+14	; 0x0e
     dac:	9f 85       	ldd	r25, Y+15	; 0x0f
     dae:	a8 89       	ldd	r26, Y+16	; 0x10
     db0:	b9 89       	ldd	r27, Y+17	; 0x11
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	a1 05       	cpc	r26, r1
     db6:	b1 05       	cpc	r27, r1
     db8:	21 f4       	brne	.+8      	; 0xdc2 <MUART_voidSendNumber+0x34>
	        MUART_voidTransmitData('0');
     dba:	80 e3       	ldi	r24, 0x30	; 48
     dbc:	0e 94 c0 05 	call	0xb80	; 0xb80 <MUART_voidTransmitData>
     dc0:	4c c0       	rjmp	.+152    	; 0xe5a <MUART_voidSendNumber+0xcc>
	        return;
	    }

	    u8 NumberString[11];
	    u8 i = 0;
     dc2:	1a 82       	std	Y+2, r1	; 0x02
     dc4:	30 c0       	rjmp	.+96     	; 0xe26 <MUART_voidSendNumber+0x98>

	    while (A_u32Number > 0) {
	        u8 digit = A_u32Number % 10;
     dc6:	8e 85       	ldd	r24, Y+14	; 0x0e
     dc8:	9f 85       	ldd	r25, Y+15	; 0x0f
     dca:	a8 89       	ldd	r26, Y+16	; 0x10
     dcc:	b9 89       	ldd	r27, Y+17	; 0x11
     dce:	2a e0       	ldi	r18, 0x0A	; 10
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	bc 01       	movw	r22, r24
     dd8:	cd 01       	movw	r24, r26
     dda:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__udivmodsi4>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	89 83       	std	Y+1, r24	; 0x01
	        NumberString[i] = digit + '0';
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	48 2f       	mov	r20, r24
     dee:	40 5d       	subi	r20, 0xD0	; 208
     df0:	ce 01       	movw	r24, r28
     df2:	03 96       	adiw	r24, 0x03	; 3
     df4:	fc 01       	movw	r30, r24
     df6:	e2 0f       	add	r30, r18
     df8:	f3 1f       	adc	r31, r19
     dfa:	40 83       	st	Z, r20
	        A_u32Number /= 10;
     dfc:	8e 85       	ldd	r24, Y+14	; 0x0e
     dfe:	9f 85       	ldd	r25, Y+15	; 0x0f
     e00:	a8 89       	ldd	r26, Y+16	; 0x10
     e02:	b9 89       	ldd	r27, Y+17	; 0x11
     e04:	2a e0       	ldi	r18, 0x0A	; 10
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e0       	ldi	r20, 0x00	; 0
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	bc 01       	movw	r22, r24
     e0e:	cd 01       	movw	r24, r26
     e10:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__udivmodsi4>
     e14:	da 01       	movw	r26, r20
     e16:	c9 01       	movw	r24, r18
     e18:	8e 87       	std	Y+14, r24	; 0x0e
     e1a:	9f 87       	std	Y+15, r25	; 0x0f
     e1c:	a8 8b       	std	Y+16, r26	; 0x10
     e1e:	b9 8b       	std	Y+17, r27	; 0x11
	        i++;
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	8a 83       	std	Y+2, r24	; 0x02
	    }

	    u8 NumberString[11];
	    u8 i = 0;

	    while (A_u32Number > 0) {
     e26:	8e 85       	ldd	r24, Y+14	; 0x0e
     e28:	9f 85       	ldd	r25, Y+15	; 0x0f
     e2a:	a8 89       	ldd	r26, Y+16	; 0x10
     e2c:	b9 89       	ldd	r27, Y+17	; 0x11
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	a1 05       	cpc	r26, r1
     e32:	b1 05       	cpc	r27, r1
     e34:	41 f6       	brne	.-112    	; 0xdc6 <MUART_voidSendNumber+0x38>
     e36:	0e c0       	rjmp	.+28     	; 0xe54 <MUART_voidSendNumber+0xc6>
	        A_u32Number /= 10;
	        i++;
	    }

	    while (i > 0) {
	        i--;
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	81 50       	subi	r24, 0x01	; 1
     e3c:	8a 83       	std	Y+2, r24	; 0x02
	        MUART_voidTransmitData(NumberString[i]);
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	ce 01       	movw	r24, r28
     e46:	03 96       	adiw	r24, 0x03	; 3
     e48:	fc 01       	movw	r30, r24
     e4a:	e2 0f       	add	r30, r18
     e4c:	f3 1f       	adc	r31, r19
     e4e:	80 81       	ld	r24, Z
     e50:	0e 94 c0 05 	call	0xb80	; 0xb80 <MUART_voidTransmitData>
	        NumberString[i] = digit + '0';
	        A_u32Number /= 10;
	        i++;
	    }

	    while (i > 0) {
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	88 23       	and	r24, r24
     e58:	79 f7       	brne	.-34     	; 0xe38 <MUART_voidSendNumber+0xaa>
	        i--;
	        MUART_voidTransmitData(NumberString[i]);
	    }
}
     e5a:	61 96       	adiw	r28, 0x11	; 17
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <MTIMER_voidInit>:
volatile u32 G_u16OverFlowCount;

static void (*PvoidFuncCallBack[3])(void);

void MTIMER_voidInit(u8 A_u8TimerNum)
{
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	0f 92       	push	r0
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	89 83       	std	Y+1, r24	; 0x01
	if (A_u8TimerNum==0){
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	88 23       	and	r24, r24
     e7c:	e9 f4       	brne	.+58     	; 0xeb8 <MTIMER_voidInit+0x4c>
		else if(	TIMER_WaveGenerationMODE == TIMER_WaveGenerationMODE_CTC){
			CLR_BIT(TIMER_TCCR0,TIMER_TIMER0_TCCR0_WGM00);
			SET_BIT(TIMER_TCCR0,TIMER_TIMER0_TCCR0_WGM01);
		}
		else if(	TIMER_WaveGenerationMODE == TIMER_WaveGenerationMODE_FASTPWM){
			SET_BIT(TIMER_TCCR0,TIMER_TIMER0_TCCR0_WGM00);
     e7e:	a3 e5       	ldi	r26, 0x53	; 83
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e3 e5       	ldi	r30, 0x53	; 83
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	80 64       	ori	r24, 0x40	; 64
     e8a:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR0,TIMER_TIMER0_TCCR0_WGM01);
     e8c:	a3 e5       	ldi	r26, 0x53	; 83
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e3 e5       	ldi	r30, 0x53	; 83
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	88 60       	ori	r24, 0x08	; 8
     e98:	8c 93       	st	X, r24

			if (TIMER_OutputCompareMODE_FastPWM ==TIMER_OutputCompareMODE_FastPWM_CLEAR){
			CLR_BIT(TIMER_TCCR0,TIMER_TIMER0_TCCR0_COM00);
     e9a:	a3 e5       	ldi	r26, 0x53	; 83
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e3 e5       	ldi	r30, 0x53	; 83
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	8f 7e       	andi	r24, 0xEF	; 239
     ea6:	8c 93       	st	X, r24
			SET_BIT(TIMER_TCCR0,TIMER_TIMER0_TCCR0_COM01);
     ea8:	a3 e5       	ldi	r26, 0x53	; 83
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e3 e5       	ldi	r30, 0x53	; 83
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 62       	ori	r24, 0x20	; 32
     eb4:	8c 93       	st	X, r24
     eb6:	1f c0       	rjmp	.+62     	; 0xef6 <MTIMER_voidInit+0x8a>
			SET_BIT(TIMER_TCCR0,TIMER_TIMER0_TCCR0_COM00);
			SET_BIT(TIMER_TCCR0,TIMER_TIMER0_TCCR0_COM01);
			}
		}
}
	else if (A_u8TimerNum==2)
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	82 30       	cpi	r24, 0x02	; 2
     ebc:	e1 f4       	brne	.+56     	; 0xef6 <MTIMER_voidInit+0x8a>
				else if(	TIMER_WaveGenerationMODE == TIMER_WaveGenerationMODE_CTC){
					CLR_BIT(TIMER_TCCR2,TIMER_TIMER2_TCCR2_WGM20);
					SET_BIT(TIMER_TCCR2,TIMER_TIMER2_TCCR2_WGM21);
				}
				else if(	TIMER_WaveGenerationMODE == TIMER_WaveGenerationMODE_FASTPWM){
					SET_BIT(TIMER_TCCR2,TIMER_TIMER2_TCCR2_WGM20);
     ebe:	a5 e4       	ldi	r26, 0x45	; 69
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e5 e4       	ldi	r30, 0x45	; 69
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	80 64       	ori	r24, 0x40	; 64
     eca:	8c 93       	st	X, r24
					SET_BIT(TIMER_TCCR2,TIMER_TIMER2_TCCR2_WGM21);
     ecc:	a5 e4       	ldi	r26, 0x45	; 69
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e5 e4       	ldi	r30, 0x45	; 69
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	88 60       	ori	r24, 0x08	; 8
     ed8:	8c 93       	st	X, r24

					if (TIMER_OutputCompareMODE_FastPWM ==TIMER_OutputCompareMODE_FastPWM_CLEAR){
					CLR_BIT(TIMER_TCCR2,TIMER_TIMER2_TCCR2_COM20);
     eda:	a5 e4       	ldi	r26, 0x45	; 69
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e5 e4       	ldi	r30, 0x45	; 69
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	8f 7e       	andi	r24, 0xEF	; 239
     ee6:	8c 93       	st	X, r24
					SET_BIT(TIMER_TCCR2,TIMER_TIMER2_TCCR2_COM21);
     ee8:	a5 e4       	ldi	r26, 0x45	; 69
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e5 e4       	ldi	r30, 0x45	; 69
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	80 62       	ori	r24, 0x20	; 32
     ef4:	8c 93       	st	X, r24
					SET_BIT(TIMER_TCCR2,TIMER_TIMER2_TCCR2_COM20);
					SET_BIT(TIMER_TCCR2,TIMER_TIMER2_TCCR2_COM21);
					}
				}
	}
}
     ef6:	0f 90       	pop	r0
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <MTIMER_voidStart>:




void MTIMER_voidStart(u8 A_u8TimerNum)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	00 d0       	rcall	.+0      	; 0xf04 <MTIMER_voidStart+0x6>
     f04:	0f 92       	push	r0
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	89 83       	std	Y+1, r24	; 0x01
	//pre scalar
	switch(A_u8TimerNum)
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	3b 83       	std	Y+3, r19	; 0x03
     f14:	2a 83       	std	Y+2, r18	; 0x02
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	9b 81       	ldd	r25, Y+3	; 0x03
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	31 f0       	breq	.+12     	; 0xf2a <MTIMER_voidStart+0x2c>
     f1e:	2a 81       	ldd	r18, Y+2	; 0x02
     f20:	3b 81       	ldd	r19, Y+3	; 0x03
     f22:	22 30       	cpi	r18, 0x02	; 2
     f24:	31 05       	cpc	r19, r1
     f26:	51 f0       	breq	.+20     	; 0xf3c <MTIMER_voidStart+0x3e>
     f28:	11 c0       	rjmp	.+34     	; 0xf4c <MTIMER_voidStart+0x4e>
	{
	case 0:
	         TIMER_TCCR0= (TIMER_TCCR0 & 0xf8) | (TIMER_PRESCALER & 0x07);
     f2a:	a3 e5       	ldi	r26, 0x53	; 83
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e3 e5       	ldi	r30, 0x53	; 83
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	88 7f       	andi	r24, 0xF8	; 248
     f36:	83 60       	ori	r24, 0x03	; 3
     f38:	8c 93       	st	X, r24
     f3a:	08 c0       	rjmp	.+16     	; 0xf4c <MTIMER_voidStart+0x4e>
	         break;
	case 2:
			 TIMER_TCCR2= (TIMER_TCCR2 & 0xf8) | (TIMER_PRESCALER & 0x07);
     f3c:	a5 e4       	ldi	r26, 0x45	; 69
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e5 e4       	ldi	r30, 0x45	; 69
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	88 7f       	andi	r24, 0xF8	; 248
     f48:	83 60       	ori	r24, 0x03	; 3
     f4a:	8c 93       	st	X, r24
			 break;
	}
}
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	08 95       	ret

00000f58 <MTIMR_voidSetCompareMatch>:

void MTIMR_voidSetCompareMatch(u8 A_u8TimerNum,u8 A_u8Value)
{
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <MTIMR_voidSetCompareMatch+0x6>
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <MTIMR_voidSetCompareMatch+0x8>
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8TimerNum){
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	3c 83       	std	Y+4, r19	; 0x04
     f70:	2b 83       	std	Y+3, r18	; 0x03
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	9c 81       	ldd	r25, Y+4	; 0x04
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	31 f0       	breq	.+12     	; 0xf86 <MTIMR_voidSetCompareMatch+0x2e>
     f7a:	2b 81       	ldd	r18, Y+3	; 0x03
     f7c:	3c 81       	ldd	r19, Y+4	; 0x04
     f7e:	22 30       	cpi	r18, 0x02	; 2
     f80:	31 05       	cpc	r19, r1
     f82:	31 f0       	breq	.+12     	; 0xf90 <MTIMR_voidSetCompareMatch+0x38>
     f84:	09 c0       	rjmp	.+18     	; 0xf98 <MTIMR_voidSetCompareMatch+0x40>
	case TIMER_TIMER0:
		TIMER_OCR0=A_u8Value;
     f86:	ec e5       	ldi	r30, 0x5C	; 92
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	80 83       	st	Z, r24
     f8e:	04 c0       	rjmp	.+8      	; 0xf98 <MTIMR_voidSetCompareMatch+0x40>
		break;

	case TIMER_TIMER2:
		TIMER_OCR2=A_u8Value;
     f90:	e3 e4       	ldi	r30, 0x43	; 67
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	80 83       	st	Z, r24
		break;
	}
}
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <MTIMER_voidEnable>:
void MTIMER_voidEnable(u8 A_u8TimerNumber)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	00 d0       	rcall	.+0      	; 0xfac <MTIMER_voidEnable+0x6>
     fac:	0f 92       	push	r0
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8TimerNumber)
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	3b 83       	std	Y+3, r19	; 0x03
     fbc:	2a 83       	std	Y+2, r18	; 0x02
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	9b 81       	ldd	r25, Y+3	; 0x03
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	91 05       	cpc	r25, r1
     fc6:	31 f1       	breq	.+76     	; 0x1014 <MTIMER_voidEnable+0x6e>
     fc8:	2a 81       	ldd	r18, Y+2	; 0x02
     fca:	3b 81       	ldd	r19, Y+3	; 0x03
     fcc:	22 30       	cpi	r18, 0x02	; 2
     fce:	31 05       	cpc	r19, r1
     fd0:	99 f0       	breq	.+38     	; 0xff8 <MTIMER_voidEnable+0x52>
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	9b 81       	ldd	r25, Y+3	; 0x03
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	e9 f4       	brne	.+58     	; 0x1014 <MTIMER_voidEnable+0x6e>
		{
		case 0:
			//enable
			SET_BIT(TIMER_TIMSK,0);
     fda:	a9 e5       	ldi	r26, 0x59	; 89
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e9 e5       	ldi	r30, 0x59	; 89
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	81 60       	ori	r24, 0x01	; 1
     fe6:	8c 93       	st	X, r24
			SET_BIT(TIMER_TIMSK,1);
     fe8:	a9 e5       	ldi	r26, 0x59	; 89
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e9 e5       	ldi	r30, 0x59	; 89
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	82 60       	ori	r24, 0x02	; 2
     ff4:	8c 93       	st	X, r24
     ff6:	0e c0       	rjmp	.+28     	; 0x1014 <MTIMER_voidEnable+0x6e>

		case 1:
			break;

		case 2:
			SET_BIT(TIMER_TIMSK,6);
     ff8:	a9 e5       	ldi	r26, 0x59	; 89
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e9 e5       	ldi	r30, 0x59	; 89
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	80 64       	ori	r24, 0x40	; 64
    1004:	8c 93       	st	X, r24
			SET_BIT(TIMER_TIMSK,7);
    1006:	a9 e5       	ldi	r26, 0x59	; 89
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e9 e5       	ldi	r30, 0x59	; 89
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	80 68       	ori	r24, 0x80	; 128
    1012:	8c 93       	st	X, r24
			break;
		}
}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <MTIMER_voidDisable>:

void MTIMER_voidDisable(u8 A_u8TimerNumber)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	0f 92       	push	r0
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8TimerNumber)
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	88 2f       	mov	r24, r24
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	39 f4       	brne	.+14     	; 0x1044 <MTIMER_voidDisable+0x24>
			{
			case 0:
				//disable
				CLR_BIT(TIMER_TIMSK,0);
    1036:	a9 e5       	ldi	r26, 0x59	; 89
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e9 e5       	ldi	r30, 0x59	; 89
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	8e 7f       	andi	r24, 0xFE	; 254
    1042:	8c 93       	st	X, r24
				break;

			case 2:
				break;
			}
}
    1044:	0f 90       	pop	r0
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <MTIMER_voidSetPreLoad>:

void MTIMER_voidSetPreLoad(u8 A_u8PreLoad)
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	0f 92       	push	r0
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	89 83       	std	Y+1, r24	; 0x01
	//preload
	TIMER_TCNT0= A_u8PreLoad;
    1058:	e2 e5       	ldi	r30, 0x52	; 82
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	80 83       	st	Z, r24
}
    1060:	0f 90       	pop	r0
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <MTIMER_voidSetCounts>:

void MTIMER_voidSetCounts(u32 A_u8Counts)
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	00 d0       	rcall	.+0      	; 0x106e <MTIMER_voidSetCounts+0x6>
    106e:	00 d0       	rcall	.+0      	; 0x1070 <MTIMER_voidSetCounts+0x8>
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	69 83       	std	Y+1, r22	; 0x01
    1076:	7a 83       	std	Y+2, r23	; 0x02
    1078:	8b 83       	std	Y+3, r24	; 0x03
    107a:	9c 83       	std	Y+4, r25	; 0x04
	G_u16OverFlowCount=A_u8Counts;
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	9a 81       	ldd	r25, Y+2	; 0x02
    1080:	ab 81       	ldd	r26, Y+3	; 0x03
    1082:	bc 81       	ldd	r27, Y+4	; 0x04
    1084:	80 93 8a 00 	sts	0x008A, r24
    1088:	90 93 8b 00 	sts	0x008B, r25
    108c:	a0 93 8c 00 	sts	0x008C, r26
    1090:	b0 93 8d 00 	sts	0x008D, r27
}
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <MTimer_voidSetCallBack>:

void MTimer_voidSetCallBack(u8 A_u8TimerNumber, void (*A_FuncPtr)(void))
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <MTimer_voidSetCallBack+0x6>
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <MTimer_voidSetCallBack+0x8>
    10aa:	0f 92       	push	r0
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	7b 83       	std	Y+3, r23	; 0x03
    10b4:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8TimerNumber)
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3d 83       	std	Y+5, r19	; 0x05
    10be:	2c 83       	std	Y+4, r18	; 0x04
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	9d 81       	ldd	r25, Y+5	; 0x05
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	91 05       	cpc	r25, r1
    10c8:	81 f0       	breq	.+32     	; 0x10ea <MTimer_voidSetCallBack+0x48>
    10ca:	2c 81       	ldd	r18, Y+4	; 0x04
    10cc:	3d 81       	ldd	r19, Y+5	; 0x05
    10ce:	22 30       	cpi	r18, 0x02	; 2
    10d0:	31 05       	cpc	r19, r1
    10d2:	91 f0       	breq	.+36     	; 0x10f8 <MTimer_voidSetCallBack+0x56>
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	9d 81       	ldd	r25, Y+5	; 0x05
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	a1 f4       	brne	.+40     	; 0x1104 <MTimer_voidSetCallBack+0x62>
		{
		case 0:
			PvoidFuncCallBack[0] = A_FuncPtr;
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	9b 81       	ldd	r25, Y+3	; 0x03
    10e0:	90 93 85 00 	sts	0x0085, r25
    10e4:	80 93 84 00 	sts	0x0084, r24
    10e8:	0d c0       	rjmp	.+26     	; 0x1104 <MTimer_voidSetCallBack+0x62>
			break;

		case 1:
			PvoidFuncCallBack[1] = A_FuncPtr;
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	9b 81       	ldd	r25, Y+3	; 0x03
    10ee:	90 93 87 00 	sts	0x0087, r25
    10f2:	80 93 86 00 	sts	0x0086, r24
    10f6:	06 c0       	rjmp	.+12     	; 0x1104 <MTimer_voidSetCallBack+0x62>
			break;

		case 2:
			PvoidFuncCallBack[2] = A_FuncPtr;
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	9b 81       	ldd	r25, Y+3	; 0x03
    10fc:	90 93 89 00 	sts	0x0089, r25
    1100:	80 93 88 00 	sts	0x0088, r24
			break;
		}

}
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <__vector_10>:
//		PvoidFuncCallBack[0]();
//	}
//}
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    1114:	1f 92       	push	r1
    1116:	0f 92       	push	r0
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	0f 92       	push	r0
    111c:	11 24       	eor	r1, r1
    111e:	2f 93       	push	r18
    1120:	3f 93       	push	r19
    1122:	4f 93       	push	r20
    1124:	5f 93       	push	r21
    1126:	6f 93       	push	r22
    1128:	7f 93       	push	r23
    112a:	8f 93       	push	r24
    112c:	9f 93       	push	r25
    112e:	af 93       	push	r26
    1130:	bf 93       	push	r27
    1132:	ef 93       	push	r30
    1134:	ff 93       	push	r31
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62

	PvoidFuncCallBack[0]();
    113e:	e0 91 84 00 	lds	r30, 0x0084
    1142:	f0 91 85 00 	lds	r31, 0x0085
    1146:	09 95       	icall
}
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	ff 91       	pop	r31
    114e:	ef 91       	pop	r30
    1150:	bf 91       	pop	r27
    1152:	af 91       	pop	r26
    1154:	9f 91       	pop	r25
    1156:	8f 91       	pop	r24
    1158:	7f 91       	pop	r23
    115a:	6f 91       	pop	r22
    115c:	5f 91       	pop	r21
    115e:	4f 91       	pop	r20
    1160:	3f 91       	pop	r19
    1162:	2f 91       	pop	r18
    1164:	0f 90       	pop	r0
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	0f 90       	pop	r0
    116a:	1f 90       	pop	r1
    116c:	18 95       	reti

0000116e <__vector_4>:

void __vector_4 (void) __attribute__((signal));
void __vector_4 (void)
{
    116e:	1f 92       	push	r1
    1170:	0f 92       	push	r0
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	0f 92       	push	r0
    1176:	11 24       	eor	r1, r1
    1178:	2f 93       	push	r18
    117a:	3f 93       	push	r19
    117c:	4f 93       	push	r20
    117e:	5f 93       	push	r21
    1180:	6f 93       	push	r22
    1182:	7f 93       	push	r23
    1184:	8f 93       	push	r24
    1186:	9f 93       	push	r25
    1188:	af 93       	push	r26
    118a:	bf 93       	push	r27
    118c:	ef 93       	push	r30
    118e:	ff 93       	push	r31
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62

	PvoidFuncCallBack[2]();
    1198:	e0 91 88 00 	lds	r30, 0x0088
    119c:	f0 91 89 00 	lds	r31, 0x0089
    11a0:	09 95       	icall
}
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	ff 91       	pop	r31
    11a8:	ef 91       	pop	r30
    11aa:	bf 91       	pop	r27
    11ac:	af 91       	pop	r26
    11ae:	9f 91       	pop	r25
    11b0:	8f 91       	pop	r24
    11b2:	7f 91       	pop	r23
    11b4:	6f 91       	pop	r22
    11b6:	5f 91       	pop	r21
    11b8:	4f 91       	pop	r20
    11ba:	3f 91       	pop	r19
    11bc:	2f 91       	pop	r18
    11be:	0f 90       	pop	r0
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	0f 90       	pop	r0
    11c4:	1f 90       	pop	r1
    11c6:	18 95       	reti

000011c8 <SPI_MasterInit>:
#include "../DIO/DIO.h"
#include "../../Lib/defines.h"
#include "../../Lib/Bit_Maths.h"

void SPI_MasterInit(void)
{
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
/* Set MOSI and SCK output, all others input */
MDIO_voidSetPortDirection(PORTB,INPUT);
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <MDIO_voidSetPortDirection>
MDIO_voidSetPinDirection(PORTB,PIN5,OUTPUT);
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	65 e0       	ldi	r22, 0x05	; 5
    11dc:	41 e0       	ldi	r20, 0x01	; 1
    11de:	0e 94 af 0a 	call	0x155e	; 0x155e <MDIO_voidSetPinDirection>
MDIO_voidSetPinDirection(PORTB,PIN7,OUTPUT);
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	67 e0       	ldi	r22, 0x07	; 7
    11e6:	41 e0       	ldi	r20, 0x01	; 1
    11e8:	0e 94 af 0a 	call	0x155e	; 0x155e <MDIO_voidSetPinDirection>

/* Enable SPI, Master, set clock rate fck/64 */
SPCR = 0b01011110;
    11ec:	ed e2       	ldi	r30, 0x2D	; 45
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	8e e5       	ldi	r24, 0x5E	; 94
    11f2:	80 83       	st	Z, r24
}
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <SPI_MasterTrancieve>:

u8 SPI_MasterTrancieve(u8 A_u8Data)
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <SPI_MasterTrancieve+0x6>
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	89 83       	std	Y+1, r24	; 0x01
/* Start transmission */
SPDR = A_u8Data;
    1206:	ef e2       	ldi	r30, 0x2F	; 47
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	80 83       	st	Z, r24

/* Wait for transmission complete */
while(GET_BIT(SPSR,SPSR_SPIF) != 1){};
    120e:	ee e2       	ldi	r30, 0x2E	; 46
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z

return SPDR;
    1214:	ef e2       	ldi	r30, 0x2F	; 47
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
}
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <SPI_SlaveInit>:

void SPI_SlaveInit(void)
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
/* Set MISO output, all others input */
MDIO_voidSetPortDirection(PORTB,INPUT);
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <MDIO_voidSetPortDirection>
MDIO_voidSetPinDirection(PORTB,PIN6,OUTPUT);
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	66 e0       	ldi	r22, 0x06	; 6
    1238:	41 e0       	ldi	r20, 0x01	; 1
    123a:	0e 94 af 0a 	call	0x155e	; 0x155e <MDIO_voidSetPinDirection>
/* Enable SPI */
SPCR = 0b01001110;
    123e:	ed e2       	ldi	r30, 0x2D	; 45
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	8e e4       	ldi	r24, 0x4E	; 78
    1244:	80 83       	st	Z, r24
}
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <MEXTINT_voidSenseControl>:
#include "EXT_INT.h"
#include "../DIO/DIO.h"
#include "EXT_INT_private.h"

void MEXTINT_voidSenseControl(u8 A_u8IntNum, u8 A_u8SenseControl)
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	2a 97       	sbiw	r28, 0x0a	; 10
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	89 83       	std	Y+1, r24	; 0x01
    1262:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8IntNum)
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	3a 87       	std	Y+10, r19	; 0x0a
    126c:	29 87       	std	Y+9, r18	; 0x09
    126e:	89 85       	ldd	r24, Y+9	; 0x09
    1270:	9a 85       	ldd	r25, Y+10	; 0x0a
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	91 05       	cpc	r25, r1
    1276:	09 f4       	brne	.+2      	; 0x127a <MEXTINT_voidSenseControl+0x2e>
    1278:	66 c0       	rjmp	.+204    	; 0x1346 <MEXTINT_voidSenseControl+0xfa>
    127a:	29 85       	ldd	r18, Y+9	; 0x09
    127c:	3a 85       	ldd	r19, Y+10	; 0x0a
    127e:	22 30       	cpi	r18, 0x02	; 2
    1280:	31 05       	cpc	r19, r1
    1282:	09 f4       	brne	.+2      	; 0x1286 <MEXTINT_voidSenseControl+0x3a>
    1284:	bb c0       	rjmp	.+374    	; 0x13fc <MEXTINT_voidSenseControl+0x1b0>
    1286:	89 85       	ldd	r24, Y+9	; 0x09
    1288:	9a 85       	ldd	r25, Y+10	; 0x0a
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	09 f0       	breq	.+2      	; 0x1290 <MEXTINT_voidSenseControl+0x44>
    128e:	d4 c0       	rjmp	.+424    	; 0x1438 <MEXTINT_voidSenseControl+0x1ec>
	{
		case EXTINT_Int0:
			switch(A_u8SenseControl)
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	38 87       	std	Y+8, r19	; 0x08
    1298:	2f 83       	std	Y+7, r18	; 0x07
    129a:	8f 81       	ldd	r24, Y+7	; 0x07
    129c:	98 85       	ldd	r25, Y+8	; 0x08
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	91 05       	cpc	r25, r1
    12a2:	21 f1       	breq	.+72     	; 0x12ec <MEXTINT_voidSenseControl+0xa0>
    12a4:	2f 81       	ldd	r18, Y+7	; 0x07
    12a6:	38 85       	ldd	r19, Y+8	; 0x08
    12a8:	22 30       	cpi	r18, 0x02	; 2
    12aa:	31 05       	cpc	r19, r1
    12ac:	2c f4       	brge	.+10     	; 0x12b8 <MEXTINT_voidSenseControl+0x6c>
    12ae:	8f 81       	ldd	r24, Y+7	; 0x07
    12b0:	98 85       	ldd	r25, Y+8	; 0x08
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	61 f0       	breq	.+24     	; 0x12ce <MEXTINT_voidSenseControl+0x82>
    12b6:	c0 c0       	rjmp	.+384    	; 0x1438 <MEXTINT_voidSenseControl+0x1ec>
    12b8:	2f 81       	ldd	r18, Y+7	; 0x07
    12ba:	38 85       	ldd	r19, Y+8	; 0x08
    12bc:	22 30       	cpi	r18, 0x02	; 2
    12be:	31 05       	cpc	r19, r1
    12c0:	21 f1       	breq	.+72     	; 0x130a <MEXTINT_voidSenseControl+0xbe>
    12c2:	8f 81       	ldd	r24, Y+7	; 0x07
    12c4:	98 85       	ldd	r25, Y+8	; 0x08
    12c6:	83 30       	cpi	r24, 0x03	; 3
    12c8:	91 05       	cpc	r25, r1
    12ca:	71 f1       	breq	.+92     	; 0x1328 <MEXTINT_voidSenseControl+0xdc>
    12cc:	b5 c0       	rjmp	.+362    	; 0x1438 <MEXTINT_voidSenseControl+0x1ec>
			{
			case EXTINT_SenseControl_FallingEdge: CLR_BIT(EXTINT_MCUCR,EXTINT_ISC00);
    12ce:	a5 e5       	ldi	r26, 0x55	; 85
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e5 e5       	ldi	r30, 0x55	; 85
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	8e 7f       	andi	r24, 0xFE	; 254
    12da:	8c 93       	st	X, r24
												  SET_BIT(EXTINT_MCUCR,EXTINT_ISC01);
    12dc:	a5 e5       	ldi	r26, 0x55	; 85
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e5 e5       	ldi	r30, 0x55	; 85
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	82 60       	ori	r24, 0x02	; 2
    12e8:	8c 93       	st	X, r24
    12ea:	a6 c0       	rjmp	.+332    	; 0x1438 <MEXTINT_voidSenseControl+0x1ec>
												  break;

			case EXTINT_SenseControl_RisingEdge:  SET_BIT(EXTINT_MCUCR,EXTINT_ISC00);
    12ec:	a5 e5       	ldi	r26, 0x55	; 85
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e5 e5       	ldi	r30, 0x55	; 85
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	81 60       	ori	r24, 0x01	; 1
    12f8:	8c 93       	st	X, r24
												  SET_BIT(EXTINT_MCUCR,EXTINT_ISC01);
    12fa:	a5 e5       	ldi	r26, 0x55	; 85
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e5 e5       	ldi	r30, 0x55	; 85
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	82 60       	ori	r24, 0x02	; 2
    1306:	8c 93       	st	X, r24
    1308:	97 c0       	rjmp	.+302    	; 0x1438 <MEXTINT_voidSenseControl+0x1ec>
												  break;

			case EXTINT_SenseControl_OnChange:    SET_BIT(EXTINT_MCUCR,EXTINT_ISC00);
    130a:	a5 e5       	ldi	r26, 0x55	; 85
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e5 e5       	ldi	r30, 0x55	; 85
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	81 60       	ori	r24, 0x01	; 1
    1316:	8c 93       	st	X, r24
												  CLR_BIT(EXTINT_MCUCR,EXTINT_ISC01);
    1318:	a5 e5       	ldi	r26, 0x55	; 85
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e5 e5       	ldi	r30, 0x55	; 85
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	8d 7f       	andi	r24, 0xFD	; 253
    1324:	8c 93       	st	X, r24
    1326:	88 c0       	rjmp	.+272    	; 0x1438 <MEXTINT_voidSenseControl+0x1ec>
												  break;

			case EXTINT_SenseControl_LowLevel:    CLR_BIT(EXTINT_MCUCR,EXTINT_ISC00);
    1328:	a5 e5       	ldi	r26, 0x55	; 85
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e5 e5       	ldi	r30, 0x55	; 85
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	8e 7f       	andi	r24, 0xFE	; 254
    1334:	8c 93       	st	X, r24
												  CLR_BIT(EXTINT_MCUCR,EXTINT_ISC01);
    1336:	a5 e5       	ldi	r26, 0x55	; 85
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e5 e5       	ldi	r30, 0x55	; 85
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	8d 7f       	andi	r24, 0xFD	; 253
    1342:	8c 93       	st	X, r24
    1344:	79 c0       	rjmp	.+242    	; 0x1438 <MEXTINT_voidSenseControl+0x1ec>
												  break;
			}
			break;

		case EXTINT_Int1:
			switch(A_u8SenseControl)
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3e 83       	std	Y+6, r19	; 0x06
    134e:	2d 83       	std	Y+5, r18	; 0x05
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	21 f1       	breq	.+72     	; 0x13a2 <MEXTINT_voidSenseControl+0x156>
    135a:	2d 81       	ldd	r18, Y+5	; 0x05
    135c:	3e 81       	ldd	r19, Y+6	; 0x06
    135e:	22 30       	cpi	r18, 0x02	; 2
    1360:	31 05       	cpc	r19, r1
    1362:	2c f4       	brge	.+10     	; 0x136e <MEXTINT_voidSenseControl+0x122>
    1364:	8d 81       	ldd	r24, Y+5	; 0x05
    1366:	9e 81       	ldd	r25, Y+6	; 0x06
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	61 f0       	breq	.+24     	; 0x1384 <MEXTINT_voidSenseControl+0x138>
    136c:	65 c0       	rjmp	.+202    	; 0x1438 <MEXTINT_voidSenseControl+0x1ec>
    136e:	2d 81       	ldd	r18, Y+5	; 0x05
    1370:	3e 81       	ldd	r19, Y+6	; 0x06
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	31 05       	cpc	r19, r1
    1376:	21 f1       	breq	.+72     	; 0x13c0 <MEXTINT_voidSenseControl+0x174>
    1378:	8d 81       	ldd	r24, Y+5	; 0x05
    137a:	9e 81       	ldd	r25, Y+6	; 0x06
    137c:	83 30       	cpi	r24, 0x03	; 3
    137e:	91 05       	cpc	r25, r1
    1380:	71 f1       	breq	.+92     	; 0x13de <MEXTINT_voidSenseControl+0x192>
    1382:	5a c0       	rjmp	.+180    	; 0x1438 <MEXTINT_voidSenseControl+0x1ec>
			{
			case EXTINT_SenseControl_FallingEdge: CLR_BIT(EXTINT_MCUCR,EXTINT_ISC10);
    1384:	a5 e5       	ldi	r26, 0x55	; 85
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e5 e5       	ldi	r30, 0x55	; 85
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	8b 7f       	andi	r24, 0xFB	; 251
    1390:	8c 93       	st	X, r24
											   	  SET_BIT(EXTINT_MCUCR,EXTINT_ISC11);
    1392:	a5 e5       	ldi	r26, 0x55	; 85
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e5 e5       	ldi	r30, 0x55	; 85
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	88 60       	ori	r24, 0x08	; 8
    139e:	8c 93       	st	X, r24
    13a0:	4b c0       	rjmp	.+150    	; 0x1438 <MEXTINT_voidSenseControl+0x1ec>
												  break;

			case EXTINT_SenseControl_RisingEdge:  SET_BIT(EXTINT_MCUCR,EXTINT_ISC10);
    13a2:	a5 e5       	ldi	r26, 0x55	; 85
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e5 e5       	ldi	r30, 0x55	; 85
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	84 60       	ori	r24, 0x04	; 4
    13ae:	8c 93       	st	X, r24
												  SET_BIT(EXTINT_MCUCR,EXTINT_ISC11);
    13b0:	a5 e5       	ldi	r26, 0x55	; 85
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e5 e5       	ldi	r30, 0x55	; 85
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	88 60       	ori	r24, 0x08	; 8
    13bc:	8c 93       	st	X, r24
    13be:	3c c0       	rjmp	.+120    	; 0x1438 <MEXTINT_voidSenseControl+0x1ec>
												  break;

			case EXTINT_SenseControl_OnChange:    SET_BIT(EXTINT_MCUCR,EXTINT_ISC10);
    13c0:	a5 e5       	ldi	r26, 0x55	; 85
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e5 e5       	ldi	r30, 0x55	; 85
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	84 60       	ori	r24, 0x04	; 4
    13cc:	8c 93       	st	X, r24
												  CLR_BIT(EXTINT_MCUCR,EXTINT_ISC11);
    13ce:	a5 e5       	ldi	r26, 0x55	; 85
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e5 e5       	ldi	r30, 0x55	; 85
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	87 7f       	andi	r24, 0xF7	; 247
    13da:	8c 93       	st	X, r24
    13dc:	2d c0       	rjmp	.+90     	; 0x1438 <MEXTINT_voidSenseControl+0x1ec>
												  break;

			case EXTINT_SenseControl_LowLevel:    CLR_BIT(EXTINT_MCUCR,EXTINT_ISC10);
    13de:	a5 e5       	ldi	r26, 0x55	; 85
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e5 e5       	ldi	r30, 0x55	; 85
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	8b 7f       	andi	r24, 0xFB	; 251
    13ea:	8c 93       	st	X, r24
												  CLR_BIT(EXTINT_MCUCR,EXTINT_ISC11);
    13ec:	a5 e5       	ldi	r26, 0x55	; 85
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e5 e5       	ldi	r30, 0x55	; 85
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	87 7f       	andi	r24, 0xF7	; 247
    13f8:	8c 93       	st	X, r24
    13fa:	1e c0       	rjmp	.+60     	; 0x1438 <MEXTINT_voidSenseControl+0x1ec>
												  break;
			}
			break;

	case EXTINT_Int2:
		switch(A_u8SenseControl)
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	3c 83       	std	Y+4, r19	; 0x04
    1404:	2b 83       	std	Y+3, r18	; 0x03
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	31 f0       	breq	.+12     	; 0x141a <MEXTINT_voidSenseControl+0x1ce>
    140e:	2b 81       	ldd	r18, Y+3	; 0x03
    1410:	3c 81       	ldd	r19, Y+4	; 0x04
    1412:	21 30       	cpi	r18, 0x01	; 1
    1414:	31 05       	cpc	r19, r1
    1416:	49 f0       	breq	.+18     	; 0x142a <MEXTINT_voidSenseControl+0x1de>
    1418:	0f c0       	rjmp	.+30     	; 0x1438 <MEXTINT_voidSenseControl+0x1ec>
			{
			case EXTINT_SenseControl_FallingEdge: CLR_BIT(EXTINT_MCUCR,EXTINT_ISC2);
    141a:	a5 e5       	ldi	r26, 0x55	; 85
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e5 e5       	ldi	r30, 0x55	; 85
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	8f 7b       	andi	r24, 0xBF	; 191
    1426:	8c 93       	st	X, r24
    1428:	07 c0       	rjmp	.+14     	; 0x1438 <MEXTINT_voidSenseControl+0x1ec>
												break;

			case EXTINT_SenseControl_RisingEdge:  SET_BIT(EXTINT_MCUCR,EXTINT_ISC2);
    142a:	a5 e5       	ldi	r26, 0x55	; 85
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e5 e5       	ldi	r30, 0x55	; 85
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	80 64       	ori	r24, 0x40	; 64
    1436:	8c 93       	st	X, r24
												break;
			}
			break;
	}
}
    1438:	2a 96       	adiw	r28, 0x0a	; 10
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <MEXTINT_voidEnableInt>:

void MEXTINT_voidEnableInt(u8 A_u8IntNum)
{
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	00 d0       	rcall	.+0      	; 0x1450 <MEXTINT_voidEnableInt+0x6>
    1450:	0f 92       	push	r0
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8IntNum)
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	3b 83       	std	Y+3, r19	; 0x03
    1460:	2a 83       	std	Y+2, r18	; 0x02
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	9b 81       	ldd	r25, Y+3	; 0x03
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	91 05       	cpc	r25, r1
    146a:	89 f0       	breq	.+34     	; 0x148e <MEXTINT_voidEnableInt+0x44>
    146c:	2a 81       	ldd	r18, Y+2	; 0x02
    146e:	3b 81       	ldd	r19, Y+3	; 0x03
    1470:	22 30       	cpi	r18, 0x02	; 2
    1472:	31 05       	cpc	r19, r1
    1474:	a1 f0       	breq	.+40     	; 0x149e <MEXTINT_voidEnableInt+0x54>
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	9b 81       	ldd	r25, Y+3	; 0x03
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	b9 f4       	brne	.+46     	; 0x14ac <MEXTINT_voidEnableInt+0x62>
		{
		case EXTINT_Int0:
			SET_BIT(EXTINT_GICR, EXTINT_Int0_GICR);
    147e:	ab e5       	ldi	r26, 0x5B	; 91
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	eb e5       	ldi	r30, 0x5B	; 91
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	80 64       	ori	r24, 0x40	; 64
    148a:	8c 93       	st	X, r24
    148c:	0f c0       	rjmp	.+30     	; 0x14ac <MEXTINT_voidEnableInt+0x62>
			break;
		case EXTINT_Int1:
			SET_BIT(EXTINT_GICR, EXTINT_Int1_GICR);
    148e:	ab e5       	ldi	r26, 0x5B	; 91
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	eb e5       	ldi	r30, 0x5B	; 91
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	80 68       	ori	r24, 0x80	; 128
    149a:	8c 93       	st	X, r24
    149c:	07 c0       	rjmp	.+14     	; 0x14ac <MEXTINT_voidEnableInt+0x62>
			break;
		case EXTINT_Int2:
			SET_BIT(EXTINT_GICR, EXTINT_Int2_GICR);
    149e:	ab e5       	ldi	r26, 0x5B	; 91
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	eb e5       	ldi	r30, 0x5B	; 91
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	80 62       	ori	r24, 0x20	; 32
    14aa:	8c 93       	st	X, r24
			break;
		}
}
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <MEXTINT_voidDisableInt>:
void MEXTINT_voidDisableInt(u8 A_u8IntNum)
{
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	00 d0       	rcall	.+0      	; 0x14be <MEXTINT_voidDisableInt+0x6>
    14be:	0f 92       	push	r0
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8IntNum)
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	3b 83       	std	Y+3, r19	; 0x03
    14ce:	2a 83       	std	Y+2, r18	; 0x02
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	9b 81       	ldd	r25, Y+3	; 0x03
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	91 05       	cpc	r25, r1
    14d8:	89 f0       	breq	.+34     	; 0x14fc <MEXTINT_voidDisableInt+0x44>
    14da:	2a 81       	ldd	r18, Y+2	; 0x02
    14dc:	3b 81       	ldd	r19, Y+3	; 0x03
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	31 05       	cpc	r19, r1
    14e2:	a1 f0       	breq	.+40     	; 0x150c <MEXTINT_voidDisableInt+0x54>
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	9b 81       	ldd	r25, Y+3	; 0x03
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	b9 f4       	brne	.+46     	; 0x151a <MEXTINT_voidDisableInt+0x62>
			{
			case EXTINT_Int0:
				CLR_BIT(EXTINT_GICR, EXTINT_Int0_GICR);
    14ec:	ab e5       	ldi	r26, 0x5B	; 91
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	eb e5       	ldi	r30, 0x5B	; 91
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	8f 7b       	andi	r24, 0xBF	; 191
    14f8:	8c 93       	st	X, r24
    14fa:	0f c0       	rjmp	.+30     	; 0x151a <MEXTINT_voidDisableInt+0x62>
				break;
			case EXTINT_Int1:
				CLR_BIT(EXTINT_GICR, EXTINT_Int1_GICR);
    14fc:	ab e5       	ldi	r26, 0x5B	; 91
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	eb e5       	ldi	r30, 0x5B	; 91
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	8f 77       	andi	r24, 0x7F	; 127
    1508:	8c 93       	st	X, r24
    150a:	07 c0       	rjmp	.+14     	; 0x151a <MEXTINT_voidDisableInt+0x62>
				break;
			case EXTINT_Int2:
				CLR_BIT(EXTINT_GICR, EXTINT_Int2_GICR);
    150c:	ab e5       	ldi	r26, 0x5B	; 91
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	eb e5       	ldi	r30, 0x5B	; 91
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	8f 7d       	andi	r24, 0xDF	; 223
    1518:	8c 93       	st	X, r24
				break;
			}
}
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <MGIR_voidEnable>:

#include "GIE.h"
#include "EXT_INT_private.h"

void MGIR_voidEnable()
{
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTINT_SREG,7);
    152e:	af e5       	ldi	r26, 0x5F	; 95
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	ef e5       	ldi	r30, 0x5F	; 95
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	80 68       	ori	r24, 0x80	; 128
    153a:	8c 93       	st	X, r24
}
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <MGIR_voidDisEnable>:

void MGIR_voidDisEnable()
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTINT_SREG,7);
    154a:	af e5       	ldi	r26, 0x5F	; 95
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	ef e5       	ldi	r30, 0x5F	; 95
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	8f 77       	andi	r24, 0x7F	; 127
    1556:	8c 93       	st	X, r24
}
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <MDIO_voidSetPinDirection>:
#include "DIO_private.h"
#include "../../lib/Bit_Maths.h"
#include "../../lib/defines.h"

void MDIO_voidSetPinDirection(u8 A_u8PortNum,u8 A_u8PinNum,u8 A_u8PinDirection)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	2d 97       	sbiw	r28, 0x0d	; 13
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	6a 83       	std	Y+2, r22	; 0x02
    1576:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortNum)
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	3d 87       	std	Y+13, r19	; 0x0d
    1580:	2c 87       	std	Y+12, r18	; 0x0c
    1582:	8c 85       	ldd	r24, Y+12	; 0x0c
    1584:	9d 85       	ldd	r25, Y+13	; 0x0d
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	91 05       	cpc	r25, r1
    158a:	09 f4       	brne	.+2      	; 0x158e <MDIO_voidSetPinDirection+0x30>
    158c:	4f c0       	rjmp	.+158    	; 0x162c <MDIO_voidSetPinDirection+0xce>
    158e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1590:	3d 85       	ldd	r19, Y+13	; 0x0d
    1592:	22 30       	cpi	r18, 0x02	; 2
    1594:	31 05       	cpc	r19, r1
    1596:	2c f4       	brge	.+10     	; 0x15a2 <MDIO_voidSetPinDirection+0x44>
    1598:	8c 85       	ldd	r24, Y+12	; 0x0c
    159a:	9d 85       	ldd	r25, Y+13	; 0x0d
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	71 f0       	breq	.+28     	; 0x15bc <MDIO_voidSetPinDirection+0x5e>
    15a0:	ec c0       	rjmp	.+472    	; 0x177a <MDIO_voidSetPinDirection+0x21c>
    15a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    15a4:	3d 85       	ldd	r19, Y+13	; 0x0d
    15a6:	22 30       	cpi	r18, 0x02	; 2
    15a8:	31 05       	cpc	r19, r1
    15aa:	09 f4       	brne	.+2      	; 0x15ae <MDIO_voidSetPinDirection+0x50>
    15ac:	77 c0       	rjmp	.+238    	; 0x169c <MDIO_voidSetPinDirection+0x13e>
    15ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    15b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    15b2:	83 30       	cpi	r24, 0x03	; 3
    15b4:	91 05       	cpc	r25, r1
    15b6:	09 f4       	brne	.+2      	; 0x15ba <MDIO_voidSetPinDirection+0x5c>
    15b8:	a9 c0       	rjmp	.+338    	; 0x170c <MDIO_voidSetPinDirection+0x1ae>
    15ba:	df c0       	rjmp	.+446    	; 0x177a <MDIO_voidSetPinDirection+0x21c>
	{
		case PORTA:
					switch(A_u8PinDirection)
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	3b 87       	std	Y+11, r19	; 0x0b
    15c4:	2a 87       	std	Y+10, r18	; 0x0a
    15c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    15c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	31 f0       	breq	.+12     	; 0x15da <MDIO_voidSetPinDirection+0x7c>
    15ce:	2a 85       	ldd	r18, Y+10	; 0x0a
    15d0:	3b 85       	ldd	r19, Y+11	; 0x0b
    15d2:	21 30       	cpi	r18, 0x01	; 1
    15d4:	31 05       	cpc	r19, r1
    15d6:	b1 f0       	breq	.+44     	; 0x1604 <MDIO_voidSetPinDirection+0xa6>
    15d8:	d0 c0       	rjmp	.+416    	; 0x177a <MDIO_voidSetPinDirection+0x21c>
					{
						case INPUT: CLR_BIT(DIO_DDRA_REG,A_u8PinNum); break;
    15da:	aa e3       	ldi	r26, 0x3A	; 58
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	ea e3       	ldi	r30, 0x3A	; 58
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	48 2f       	mov	r20, r24
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 2e       	mov	r0, r18
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <MDIO_voidSetPinDirection+0x9a>
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	0a 94       	dec	r0
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <MDIO_voidSetPinDirection+0x96>
    15fc:	80 95       	com	r24
    15fe:	84 23       	and	r24, r20
    1600:	8c 93       	st	X, r24
    1602:	bb c0       	rjmp	.+374    	; 0x177a <MDIO_voidSetPinDirection+0x21c>
						case OUTPUT: SET_BIT(DIO_DDRA_REG,A_u8PinNum); break;
    1604:	aa e3       	ldi	r26, 0x3A	; 58
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	ea e3       	ldi	r30, 0x3A	; 58
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	48 2f       	mov	r20, r24
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	02 2e       	mov	r0, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <MDIO_voidSetPinDirection+0xc4>
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	0a 94       	dec	r0
    1624:	e2 f7       	brpl	.-8      	; 0x161e <MDIO_voidSetPinDirection+0xc0>
    1626:	84 2b       	or	r24, r20
    1628:	8c 93       	st	X, r24
    162a:	a7 c0       	rjmp	.+334    	; 0x177a <MDIO_voidSetPinDirection+0x21c>
					} break;
		case PORTB:
					switch(A_u8PinDirection)
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	39 87       	std	Y+9, r19	; 0x09
    1634:	28 87       	std	Y+8, r18	; 0x08
    1636:	88 85       	ldd	r24, Y+8	; 0x08
    1638:	99 85       	ldd	r25, Y+9	; 0x09
    163a:	00 97       	sbiw	r24, 0x00	; 0
    163c:	31 f0       	breq	.+12     	; 0x164a <MDIO_voidSetPinDirection+0xec>
    163e:	28 85       	ldd	r18, Y+8	; 0x08
    1640:	39 85       	ldd	r19, Y+9	; 0x09
    1642:	21 30       	cpi	r18, 0x01	; 1
    1644:	31 05       	cpc	r19, r1
    1646:	b1 f0       	breq	.+44     	; 0x1674 <MDIO_voidSetPinDirection+0x116>
    1648:	98 c0       	rjmp	.+304    	; 0x177a <MDIO_voidSetPinDirection+0x21c>
					{
						case INPUT: CLR_BIT(DIO_DDRB_REG,A_u8PinNum); break;
    164a:	a7 e3       	ldi	r26, 0x37	; 55
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e7 e3       	ldi	r30, 0x37	; 55
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	48 2f       	mov	r20, r24
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 2e       	mov	r0, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <MDIO_voidSetPinDirection+0x10a>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	0a 94       	dec	r0
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <MDIO_voidSetPinDirection+0x106>
    166c:	80 95       	com	r24
    166e:	84 23       	and	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	83 c0       	rjmp	.+262    	; 0x177a <MDIO_voidSetPinDirection+0x21c>
						case OUTPUT: SET_BIT(DIO_DDRB_REG,A_u8PinNum); break;
    1674:	a7 e3       	ldi	r26, 0x37	; 55
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e7 e3       	ldi	r30, 0x37	; 55
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	48 2f       	mov	r20, r24
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	02 2e       	mov	r0, r18
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <MDIO_voidSetPinDirection+0x134>
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	0a 94       	dec	r0
    1694:	e2 f7       	brpl	.-8      	; 0x168e <MDIO_voidSetPinDirection+0x130>
    1696:	84 2b       	or	r24, r20
    1698:	8c 93       	st	X, r24
    169a:	6f c0       	rjmp	.+222    	; 0x177a <MDIO_voidSetPinDirection+0x21c>
					} break;
		case PORTC:
					switch(A_u8PinDirection)
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	3f 83       	std	Y+7, r19	; 0x07
    16a4:	2e 83       	std	Y+6, r18	; 0x06
    16a6:	8e 81       	ldd	r24, Y+6	; 0x06
    16a8:	9f 81       	ldd	r25, Y+7	; 0x07
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	31 f0       	breq	.+12     	; 0x16ba <MDIO_voidSetPinDirection+0x15c>
    16ae:	2e 81       	ldd	r18, Y+6	; 0x06
    16b0:	3f 81       	ldd	r19, Y+7	; 0x07
    16b2:	21 30       	cpi	r18, 0x01	; 1
    16b4:	31 05       	cpc	r19, r1
    16b6:	b1 f0       	breq	.+44     	; 0x16e4 <MDIO_voidSetPinDirection+0x186>
    16b8:	60 c0       	rjmp	.+192    	; 0x177a <MDIO_voidSetPinDirection+0x21c>
					{
						case INPUT: CLR_BIT(DIO_DDRC_REG,A_u8PinNum); break;
    16ba:	a4 e3       	ldi	r26, 0x34	; 52
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e4 e3       	ldi	r30, 0x34	; 52
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <MDIO_voidSetPinDirection+0x17a>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <MDIO_voidSetPinDirection+0x176>
    16dc:	80 95       	com	r24
    16de:	84 23       	and	r24, r20
    16e0:	8c 93       	st	X, r24
    16e2:	4b c0       	rjmp	.+150    	; 0x177a <MDIO_voidSetPinDirection+0x21c>
						case OUTPUT: SET_BIT(DIO_DDRC_REG,A_u8PinNum); break;
    16e4:	a4 e3       	ldi	r26, 0x34	; 52
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e4 e3       	ldi	r30, 0x34	; 52
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	48 2f       	mov	r20, r24
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 2e       	mov	r0, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <MDIO_voidSetPinDirection+0x1a4>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	0a 94       	dec	r0
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <MDIO_voidSetPinDirection+0x1a0>
    1706:	84 2b       	or	r24, r20
    1708:	8c 93       	st	X, r24
    170a:	37 c0       	rjmp	.+110    	; 0x177a <MDIO_voidSetPinDirection+0x21c>
					} break;
		case PORTD:
					switch(A_u8PinDirection)
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	3d 83       	std	Y+5, r19	; 0x05
    1714:	2c 83       	std	Y+4, r18	; 0x04
    1716:	8c 81       	ldd	r24, Y+4	; 0x04
    1718:	9d 81       	ldd	r25, Y+5	; 0x05
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	31 f0       	breq	.+12     	; 0x172a <MDIO_voidSetPinDirection+0x1cc>
    171e:	2c 81       	ldd	r18, Y+4	; 0x04
    1720:	3d 81       	ldd	r19, Y+5	; 0x05
    1722:	21 30       	cpi	r18, 0x01	; 1
    1724:	31 05       	cpc	r19, r1
    1726:	b1 f0       	breq	.+44     	; 0x1754 <MDIO_voidSetPinDirection+0x1f6>
    1728:	28 c0       	rjmp	.+80     	; 0x177a <MDIO_voidSetPinDirection+0x21c>
					{
						case INPUT: CLR_BIT(DIO_DDRD_REG,A_u8PinNum); break;
    172a:	a1 e3       	ldi	r26, 0x31	; 49
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e1 e3       	ldi	r30, 0x31	; 49
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	48 2f       	mov	r20, r24
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 2e       	mov	r0, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <MDIO_voidSetPinDirection+0x1ea>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <MDIO_voidSetPinDirection+0x1e6>
    174c:	80 95       	com	r24
    174e:	84 23       	and	r24, r20
    1750:	8c 93       	st	X, r24
    1752:	13 c0       	rjmp	.+38     	; 0x177a <MDIO_voidSetPinDirection+0x21c>
						case OUTPUT: SET_BIT(DIO_DDRD_REG,A_u8PinNum); break;
    1754:	a1 e3       	ldi	r26, 0x31	; 49
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e1 e3       	ldi	r30, 0x31	; 49
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <MDIO_voidSetPinDirection+0x214>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <MDIO_voidSetPinDirection+0x210>
    1776:	84 2b       	or	r24, r20
    1778:	8c 93       	st	X, r24
					} break;
	}
}
    177a:	2d 96       	adiw	r28, 0x0d	; 13
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue (u8 A_u8PortNum,u8 A_u8PinNum,u8 A_u8PinValue)
{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	2d 97       	sbiw	r28, 0x0d	; 13
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	6a 83       	std	Y+2, r22	; 0x02
    17a4:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortNum)
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	3d 87       	std	Y+13, r19	; 0x0d
    17ae:	2c 87       	std	Y+12, r18	; 0x0c
    17b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    17b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	91 05       	cpc	r25, r1
    17b8:	09 f4       	brne	.+2      	; 0x17bc <MDIO_voidSetPinValue+0x30>
    17ba:	4f c0       	rjmp	.+158    	; 0x185a <MDIO_voidSetPinValue+0xce>
    17bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    17be:	3d 85       	ldd	r19, Y+13	; 0x0d
    17c0:	22 30       	cpi	r18, 0x02	; 2
    17c2:	31 05       	cpc	r19, r1
    17c4:	2c f4       	brge	.+10     	; 0x17d0 <MDIO_voidSetPinValue+0x44>
    17c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    17c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	71 f0       	breq	.+28     	; 0x17ea <MDIO_voidSetPinValue+0x5e>
    17ce:	ec c0       	rjmp	.+472    	; 0x19a8 <MDIO_voidSetPinValue+0x21c>
    17d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    17d2:	3d 85       	ldd	r19, Y+13	; 0x0d
    17d4:	22 30       	cpi	r18, 0x02	; 2
    17d6:	31 05       	cpc	r19, r1
    17d8:	09 f4       	brne	.+2      	; 0x17dc <MDIO_voidSetPinValue+0x50>
    17da:	77 c0       	rjmp	.+238    	; 0x18ca <MDIO_voidSetPinValue+0x13e>
    17dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    17de:	9d 85       	ldd	r25, Y+13	; 0x0d
    17e0:	83 30       	cpi	r24, 0x03	; 3
    17e2:	91 05       	cpc	r25, r1
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <MDIO_voidSetPinValue+0x5c>
    17e6:	a9 c0       	rjmp	.+338    	; 0x193a <MDIO_voidSetPinValue+0x1ae>
    17e8:	df c0       	rjmp	.+446    	; 0x19a8 <MDIO_voidSetPinValue+0x21c>
		{
			case PORTA:
						switch(A_u8PinValue)
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	3b 87       	std	Y+11, r19	; 0x0b
    17f2:	2a 87       	std	Y+10, r18	; 0x0a
    17f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    17f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	31 f0       	breq	.+12     	; 0x1808 <MDIO_voidSetPinValue+0x7c>
    17fc:	2a 85       	ldd	r18, Y+10	; 0x0a
    17fe:	3b 85       	ldd	r19, Y+11	; 0x0b
    1800:	21 30       	cpi	r18, 0x01	; 1
    1802:	31 05       	cpc	r19, r1
    1804:	b1 f0       	breq	.+44     	; 0x1832 <MDIO_voidSetPinValue+0xa6>
    1806:	d0 c0       	rjmp	.+416    	; 0x19a8 <MDIO_voidSetPinValue+0x21c>
						{
							case INPUT: CLR_BIT(DIO_PORTA_REG,A_u8PinNum); break;
    1808:	ab e3       	ldi	r26, 0x3B	; 59
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	eb e3       	ldi	r30, 0x3B	; 59
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	48 2f       	mov	r20, r24
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	02 2e       	mov	r0, r18
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <MDIO_voidSetPinValue+0x9a>
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	0a 94       	dec	r0
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <MDIO_voidSetPinValue+0x96>
    182a:	80 95       	com	r24
    182c:	84 23       	and	r24, r20
    182e:	8c 93       	st	X, r24
    1830:	bb c0       	rjmp	.+374    	; 0x19a8 <MDIO_voidSetPinValue+0x21c>
							case OUTPUT: SET_BIT(DIO_PORTA_REG,A_u8PinNum); break;
    1832:	ab e3       	ldi	r26, 0x3B	; 59
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	eb e3       	ldi	r30, 0x3B	; 59
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	48 2f       	mov	r20, r24
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	02 2e       	mov	r0, r18
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <MDIO_voidSetPinValue+0xc4>
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	0a 94       	dec	r0
    1852:	e2 f7       	brpl	.-8      	; 0x184c <MDIO_voidSetPinValue+0xc0>
    1854:	84 2b       	or	r24, r20
    1856:	8c 93       	st	X, r24
    1858:	a7 c0       	rjmp	.+334    	; 0x19a8 <MDIO_voidSetPinValue+0x21c>
						} break;
			case PORTB:
						switch(A_u8PinValue)
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	39 87       	std	Y+9, r19	; 0x09
    1862:	28 87       	std	Y+8, r18	; 0x08
    1864:	88 85       	ldd	r24, Y+8	; 0x08
    1866:	99 85       	ldd	r25, Y+9	; 0x09
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	31 f0       	breq	.+12     	; 0x1878 <MDIO_voidSetPinValue+0xec>
    186c:	28 85       	ldd	r18, Y+8	; 0x08
    186e:	39 85       	ldd	r19, Y+9	; 0x09
    1870:	21 30       	cpi	r18, 0x01	; 1
    1872:	31 05       	cpc	r19, r1
    1874:	b1 f0       	breq	.+44     	; 0x18a2 <MDIO_voidSetPinValue+0x116>
    1876:	98 c0       	rjmp	.+304    	; 0x19a8 <MDIO_voidSetPinValue+0x21c>
						{
							case INPUT: CLR_BIT(DIO_PORTB_REG,A_u8PinNum); break;
    1878:	a8 e3       	ldi	r26, 0x38	; 56
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e8 e3       	ldi	r30, 0x38	; 56
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	48 2f       	mov	r20, r24
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	02 2e       	mov	r0, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <MDIO_voidSetPinValue+0x10a>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	0a 94       	dec	r0
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <MDIO_voidSetPinValue+0x106>
    189a:	80 95       	com	r24
    189c:	84 23       	and	r24, r20
    189e:	8c 93       	st	X, r24
    18a0:	83 c0       	rjmp	.+262    	; 0x19a8 <MDIO_voidSetPinValue+0x21c>
							case OUTPUT: SET_BIT(DIO_PORTB_REG,A_u8PinNum); break;
    18a2:	a8 e3       	ldi	r26, 0x38	; 56
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e8 e3       	ldi	r30, 0x38	; 56
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	48 2f       	mov	r20, r24
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 2e       	mov	r0, r18
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <MDIO_voidSetPinValue+0x134>
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	0a 94       	dec	r0
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <MDIO_voidSetPinValue+0x130>
    18c4:	84 2b       	or	r24, r20
    18c6:	8c 93       	st	X, r24
    18c8:	6f c0       	rjmp	.+222    	; 0x19a8 <MDIO_voidSetPinValue+0x21c>
						} break;
			case PORTC:
						switch(A_u8PinValue)
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	3f 83       	std	Y+7, r19	; 0x07
    18d2:	2e 83       	std	Y+6, r18	; 0x06
    18d4:	8e 81       	ldd	r24, Y+6	; 0x06
    18d6:	9f 81       	ldd	r25, Y+7	; 0x07
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	31 f0       	breq	.+12     	; 0x18e8 <MDIO_voidSetPinValue+0x15c>
    18dc:	2e 81       	ldd	r18, Y+6	; 0x06
    18de:	3f 81       	ldd	r19, Y+7	; 0x07
    18e0:	21 30       	cpi	r18, 0x01	; 1
    18e2:	31 05       	cpc	r19, r1
    18e4:	b1 f0       	breq	.+44     	; 0x1912 <MDIO_voidSetPinValue+0x186>
    18e6:	60 c0       	rjmp	.+192    	; 0x19a8 <MDIO_voidSetPinValue+0x21c>
						{
							case INPUT: CLR_BIT(DIO_PORTC_REG,A_u8PinNum); break;
    18e8:	a5 e3       	ldi	r26, 0x35	; 53
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e5 e3       	ldi	r30, 0x35	; 53
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	48 2f       	mov	r20, r24
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 2e       	mov	r0, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <MDIO_voidSetPinValue+0x17a>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	0a 94       	dec	r0
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <MDIO_voidSetPinValue+0x176>
    190a:	80 95       	com	r24
    190c:	84 23       	and	r24, r20
    190e:	8c 93       	st	X, r24
    1910:	4b c0       	rjmp	.+150    	; 0x19a8 <MDIO_voidSetPinValue+0x21c>
							case OUTPUT: SET_BIT(DIO_PORTC_REG,A_u8PinNum); break;
    1912:	a5 e3       	ldi	r26, 0x35	; 53
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e5 e3       	ldi	r30, 0x35	; 53
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	48 2f       	mov	r20, r24
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 2e       	mov	r0, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <MDIO_voidSetPinValue+0x1a4>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <MDIO_voidSetPinValue+0x1a0>
    1934:	84 2b       	or	r24, r20
    1936:	8c 93       	st	X, r24
    1938:	37 c0       	rjmp	.+110    	; 0x19a8 <MDIO_voidSetPinValue+0x21c>
						} break;
			case PORTD:
						switch(A_u8PinValue)
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	3d 83       	std	Y+5, r19	; 0x05
    1942:	2c 83       	std	Y+4, r18	; 0x04
    1944:	8c 81       	ldd	r24, Y+4	; 0x04
    1946:	9d 81       	ldd	r25, Y+5	; 0x05
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	31 f0       	breq	.+12     	; 0x1958 <MDIO_voidSetPinValue+0x1cc>
    194c:	2c 81       	ldd	r18, Y+4	; 0x04
    194e:	3d 81       	ldd	r19, Y+5	; 0x05
    1950:	21 30       	cpi	r18, 0x01	; 1
    1952:	31 05       	cpc	r19, r1
    1954:	b1 f0       	breq	.+44     	; 0x1982 <MDIO_voidSetPinValue+0x1f6>
    1956:	28 c0       	rjmp	.+80     	; 0x19a8 <MDIO_voidSetPinValue+0x21c>
						{
							case INPUT: CLR_BIT(DIO_PORTD_REG,A_u8PinNum); break;
    1958:	a2 e3       	ldi	r26, 0x32	; 50
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e2 e3       	ldi	r30, 0x32	; 50
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	48 2f       	mov	r20, r24
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 2e       	mov	r0, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <MDIO_voidSetPinValue+0x1ea>
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	0a 94       	dec	r0
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <MDIO_voidSetPinValue+0x1e6>
    197a:	80 95       	com	r24
    197c:	84 23       	and	r24, r20
    197e:	8c 93       	st	X, r24
    1980:	13 c0       	rjmp	.+38     	; 0x19a8 <MDIO_voidSetPinValue+0x21c>
							case OUTPUT: SET_BIT(DIO_PORTD_REG,A_u8PinNum); break;
    1982:	a2 e3       	ldi	r26, 0x32	; 50
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e2 e3       	ldi	r30, 0x32	; 50
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	48 2f       	mov	r20, r24
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	02 2e       	mov	r0, r18
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <MDIO_voidSetPinValue+0x214>
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	0a 94       	dec	r0
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <MDIO_voidSetPinValue+0x210>
    19a4:	84 2b       	or	r24, r20
    19a6:	8c 93       	st	X, r24
						} break;
		}
}
    19a8:	2d 96       	adiw	r28, 0x0d	; 13
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <MDIO_u8GetPinValue>:

u8 MDIO_u8GetPinValue (u8 A_u8PortNum,u8 A_u8PinNum)
{
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <MDIO_u8GetPinValue+0x6>
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <MDIO_u8GetPinValue+0x8>
    19c2:	0f 92       	push	r0
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	8a 83       	std	Y+2, r24	; 0x02
    19ca:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8PinValue;
	switch(A_u8PortNum)
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	3d 83       	std	Y+5, r19	; 0x05
    19d4:	2c 83       	std	Y+4, r18	; 0x04
    19d6:	4c 81       	ldd	r20, Y+4	; 0x04
    19d8:	5d 81       	ldd	r21, Y+5	; 0x05
    19da:	41 30       	cpi	r20, 0x01	; 1
    19dc:	51 05       	cpc	r21, r1
    19de:	41 f1       	breq	.+80     	; 0x1a30 <MDIO_u8GetPinValue+0x76>
    19e0:	8c 81       	ldd	r24, Y+4	; 0x04
    19e2:	9d 81       	ldd	r25, Y+5	; 0x05
    19e4:	82 30       	cpi	r24, 0x02	; 2
    19e6:	91 05       	cpc	r25, r1
    19e8:	34 f4       	brge	.+12     	; 0x19f6 <MDIO_u8GetPinValue+0x3c>
    19ea:	2c 81       	ldd	r18, Y+4	; 0x04
    19ec:	3d 81       	ldd	r19, Y+5	; 0x05
    19ee:	21 15       	cp	r18, r1
    19f0:	31 05       	cpc	r19, r1
    19f2:	61 f0       	breq	.+24     	; 0x1a0c <MDIO_u8GetPinValue+0x52>
    19f4:	52 c0       	rjmp	.+164    	; 0x1a9a <MDIO_u8GetPinValue+0xe0>
    19f6:	4c 81       	ldd	r20, Y+4	; 0x04
    19f8:	5d 81       	ldd	r21, Y+5	; 0x05
    19fa:	42 30       	cpi	r20, 0x02	; 2
    19fc:	51 05       	cpc	r21, r1
    19fe:	51 f1       	breq	.+84     	; 0x1a54 <MDIO_u8GetPinValue+0x9a>
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	9d 81       	ldd	r25, Y+5	; 0x05
    1a04:	83 30       	cpi	r24, 0x03	; 3
    1a06:	91 05       	cpc	r25, r1
    1a08:	b9 f1       	breq	.+110    	; 0x1a78 <MDIO_u8GetPinValue+0xbe>
    1a0a:	47 c0       	rjmp	.+142    	; 0x1a9a <MDIO_u8GetPinValue+0xe0>
	{
		case PORTA: L_u8PinValue=GET_BIT(DIO_PINA_REG,A_u8PinNum); break;
    1a0c:	e9 e3       	ldi	r30, 0x39	; 57
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	88 2f       	mov	r24, r24
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	a9 01       	movw	r20, r18
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <MDIO_u8GetPinValue+0x6a>
    1a20:	55 95       	asr	r21
    1a22:	47 95       	ror	r20
    1a24:	8a 95       	dec	r24
    1a26:	e2 f7       	brpl	.-8      	; 0x1a20 <MDIO_u8GetPinValue+0x66>
    1a28:	ca 01       	movw	r24, r20
    1a2a:	81 70       	andi	r24, 0x01	; 1
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	35 c0       	rjmp	.+106    	; 0x1a9a <MDIO_u8GetPinValue+0xe0>
		case PORTB: L_u8PinValue=GET_BIT(DIO_PINB_REG,A_u8PinNum); break;
    1a30:	e6 e3       	ldi	r30, 0x36	; 54
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	88 2f       	mov	r24, r24
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	a9 01       	movw	r20, r18
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <MDIO_u8GetPinValue+0x8e>
    1a44:	55 95       	asr	r21
    1a46:	47 95       	ror	r20
    1a48:	8a 95       	dec	r24
    1a4a:	e2 f7       	brpl	.-8      	; 0x1a44 <MDIO_u8GetPinValue+0x8a>
    1a4c:	ca 01       	movw	r24, r20
    1a4e:	81 70       	andi	r24, 0x01	; 1
    1a50:	89 83       	std	Y+1, r24	; 0x01
    1a52:	23 c0       	rjmp	.+70     	; 0x1a9a <MDIO_u8GetPinValue+0xe0>
		case PORTC: L_u8PinValue=GET_BIT(DIO_PINC_REG,A_u8PinNum); break;
    1a54:	e3 e3       	ldi	r30, 0x33	; 51
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	88 2f       	mov	r24, r24
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	a9 01       	movw	r20, r18
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <MDIO_u8GetPinValue+0xb2>
    1a68:	55 95       	asr	r21
    1a6a:	47 95       	ror	r20
    1a6c:	8a 95       	dec	r24
    1a6e:	e2 f7       	brpl	.-8      	; 0x1a68 <MDIO_u8GetPinValue+0xae>
    1a70:	ca 01       	movw	r24, r20
    1a72:	81 70       	andi	r24, 0x01	; 1
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	11 c0       	rjmp	.+34     	; 0x1a9a <MDIO_u8GetPinValue+0xe0>
		case PORTD: L_u8PinValue=GET_BIT(DIO_PIND_REG,A_u8PinNum); break;
    1a78:	e0 e3       	ldi	r30, 0x30	; 48
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	88 2f       	mov	r24, r24
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	a9 01       	movw	r20, r18
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <MDIO_u8GetPinValue+0xd6>
    1a8c:	55 95       	asr	r21
    1a8e:	47 95       	ror	r20
    1a90:	8a 95       	dec	r24
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <MDIO_u8GetPinValue+0xd2>
    1a94:	ca 01       	movw	r24, r20
    1a96:	81 70       	andi	r24, 0x01	; 1
    1a98:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_u8PinValue;
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <MDIO_voidTogglePin>:

void MDIO_voidTogglePin(u8 A_u8PortNum,u8 A_u8PinNum)
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <MDIO_voidTogglePin+0x6>
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <MDIO_voidTogglePin+0x8>
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNum)
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	3c 83       	std	Y+4, r19	; 0x04
    1ac4:	2b 83       	std	Y+3, r18	; 0x03
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	91 05       	cpc	r25, r1
    1ace:	49 f1       	breq	.+82     	; 0x1b22 <MDIO_voidTogglePin+0x76>
    1ad0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad4:	22 30       	cpi	r18, 0x02	; 2
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	2c f4       	brge	.+10     	; 0x1ae4 <MDIO_voidTogglePin+0x38>
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	61 f0       	breq	.+24     	; 0x1afa <MDIO_voidTogglePin+0x4e>
    1ae2:	5a c0       	rjmp	.+180    	; 0x1b98 <MDIO_voidTogglePin+0xec>
    1ae4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae8:	22 30       	cpi	r18, 0x02	; 2
    1aea:	31 05       	cpc	r19, r1
    1aec:	71 f1       	breq	.+92     	; 0x1b4a <MDIO_voidTogglePin+0x9e>
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	9c 81       	ldd	r25, Y+4	; 0x04
    1af2:	83 30       	cpi	r24, 0x03	; 3
    1af4:	91 05       	cpc	r25, r1
    1af6:	e9 f1       	breq	.+122    	; 0x1b72 <MDIO_voidTogglePin+0xc6>
    1af8:	4f c0       	rjmp	.+158    	; 0x1b98 <MDIO_voidTogglePin+0xec>
		{
			case PORTA: TOOGLE_BIT(DIO_PORTA_REG,A_u8PinNum); break;
    1afa:	ab e3       	ldi	r26, 0x3B	; 59
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	eb e3       	ldi	r30, 0x3B	; 59
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	48 2f       	mov	r20, r24
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	02 2e       	mov	r0, r18
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <MDIO_voidTogglePin+0x6c>
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	0a 94       	dec	r0
    1b1a:	e2 f7       	brpl	.-8      	; 0x1b14 <MDIO_voidTogglePin+0x68>
    1b1c:	84 27       	eor	r24, r20
    1b1e:	8c 93       	st	X, r24
    1b20:	3b c0       	rjmp	.+118    	; 0x1b98 <MDIO_voidTogglePin+0xec>
			case PORTB: TOOGLE_BIT(DIO_PORTB_REG,A_u8PinNum); break;
    1b22:	a8 e3       	ldi	r26, 0x38	; 56
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e8 e3       	ldi	r30, 0x38	; 56
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	48 2f       	mov	r20, r24
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	02 2e       	mov	r0, r18
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <MDIO_voidTogglePin+0x94>
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	0a 94       	dec	r0
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <MDIO_voidTogglePin+0x90>
    1b44:	84 27       	eor	r24, r20
    1b46:	8c 93       	st	X, r24
    1b48:	27 c0       	rjmp	.+78     	; 0x1b98 <MDIO_voidTogglePin+0xec>
			case PORTC: TOOGLE_BIT(DIO_PORTC_REG,A_u8PinNum); break;
    1b4a:	a5 e3       	ldi	r26, 0x35	; 53
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e5 e3       	ldi	r30, 0x35	; 53
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	48 2f       	mov	r20, r24
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	02 2e       	mov	r0, r18
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <MDIO_voidTogglePin+0xbc>
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	0a 94       	dec	r0
    1b6a:	e2 f7       	brpl	.-8      	; 0x1b64 <MDIO_voidTogglePin+0xb8>
    1b6c:	84 27       	eor	r24, r20
    1b6e:	8c 93       	st	X, r24
    1b70:	13 c0       	rjmp	.+38     	; 0x1b98 <MDIO_voidTogglePin+0xec>
			case PORTD: TOOGLE_BIT(DIO_PORTD_REG,A_u8PinNum); break;
    1b72:	a2 e3       	ldi	r26, 0x32	; 50
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e2 e3       	ldi	r30, 0x32	; 50
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	48 2f       	mov	r20, r24
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	02 2e       	mov	r0, r18
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <MDIO_voidTogglePin+0xe4>
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	0a 94       	dec	r0
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <MDIO_voidTogglePin+0xe0>
    1b94:	84 27       	eor	r24, r20
    1b96:	8c 93       	st	X, r24
		}
}
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection (u8 A_u8PortNum,u8 A_u8PortDirection)
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	2c 97       	sbiw	r28, 0x0c	; 12
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	89 83       	std	Y+1, r24	; 0x01
    1bbc:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNum)
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	3c 87       	std	Y+12, r19	; 0x0c
    1bc6:	2b 87       	std	Y+11, r18	; 0x0b
    1bc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bca:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bcc:	81 30       	cpi	r24, 0x01	; 1
    1bce:	91 05       	cpc	r25, r1
    1bd0:	99 f1       	breq	.+102    	; 0x1c38 <MDIO_voidSetPortDirection+0x92>
    1bd2:	2b 85       	ldd	r18, Y+11	; 0x0b
    1bd4:	3c 85       	ldd	r19, Y+12	; 0x0c
    1bd6:	22 30       	cpi	r18, 0x02	; 2
    1bd8:	31 05       	cpc	r19, r1
    1bda:	2c f4       	brge	.+10     	; 0x1be6 <MDIO_voidSetPortDirection+0x40>
    1bdc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bde:	9c 85       	ldd	r25, Y+12	; 0x0c
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	71 f0       	breq	.+28     	; 0x1c00 <MDIO_voidSetPortDirection+0x5a>
    1be4:	7c c0       	rjmp	.+248    	; 0x1cde <MDIO_voidSetPortDirection+0x138>
    1be6:	2b 85       	ldd	r18, Y+11	; 0x0b
    1be8:	3c 85       	ldd	r19, Y+12	; 0x0c
    1bea:	22 30       	cpi	r18, 0x02	; 2
    1bec:	31 05       	cpc	r19, r1
    1bee:	09 f4       	brne	.+2      	; 0x1bf2 <MDIO_voidSetPortDirection+0x4c>
    1bf0:	3f c0       	rjmp	.+126    	; 0x1c70 <MDIO_voidSetPortDirection+0xca>
    1bf2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bf4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bf6:	83 30       	cpi	r24, 0x03	; 3
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	09 f4       	brne	.+2      	; 0x1bfe <MDIO_voidSetPortDirection+0x58>
    1bfc:	55 c0       	rjmp	.+170    	; 0x1ca8 <MDIO_voidSetPortDirection+0x102>
    1bfe:	6f c0       	rjmp	.+222    	; 0x1cde <MDIO_voidSetPortDirection+0x138>
		{
			case PORTA:
				switch(A_u8PortDirection)
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	3a 87       	std	Y+10, r19	; 0x0a
    1c08:	29 87       	std	Y+9, r18	; 0x09
    1c0a:	89 85       	ldd	r24, Y+9	; 0x09
    1c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	51 f0       	breq	.+20     	; 0x1c26 <MDIO_voidSetPortDirection+0x80>
    1c12:	29 85       	ldd	r18, Y+9	; 0x09
    1c14:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c16:	21 30       	cpi	r18, 0x01	; 1
    1c18:	31 05       	cpc	r19, r1
    1c1a:	49 f4       	brne	.+18     	; 0x1c2e <MDIO_voidSetPortDirection+0x88>
				{
				case OUTPUT:DIO_DDRA_REG=0XFF;; break;
    1c1c:	ea e3       	ldi	r30, 0x3A	; 58
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	8f ef       	ldi	r24, 0xFF	; 255
    1c22:	80 83       	st	Z, r24
    1c24:	5c c0       	rjmp	.+184    	; 0x1cde <MDIO_voidSetPortDirection+0x138>
				case INPUT:DIO_DDRA_REG=0X00; break;
    1c26:	ea e3       	ldi	r30, 0x3A	; 58
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	10 82       	st	Z, r1
    1c2c:	58 c0       	rjmp	.+176    	; 0x1cde <MDIO_voidSetPortDirection+0x138>
				default: DIO_DDRA_REG=A_u8PortDirection; break;
    1c2e:	ea e3       	ldi	r30, 0x3A	; 58
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	80 83       	st	Z, r24
    1c36:	53 c0       	rjmp	.+166    	; 0x1cde <MDIO_voidSetPortDirection+0x138>
				}
				break;

			case PORTB:
				switch(A_u8PortDirection)
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	38 87       	std	Y+8, r19	; 0x08
    1c40:	2f 83       	std	Y+7, r18	; 0x07
    1c42:	8f 81       	ldd	r24, Y+7	; 0x07
    1c44:	98 85       	ldd	r25, Y+8	; 0x08
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	51 f0       	breq	.+20     	; 0x1c5e <MDIO_voidSetPortDirection+0xb8>
    1c4a:	2f 81       	ldd	r18, Y+7	; 0x07
    1c4c:	38 85       	ldd	r19, Y+8	; 0x08
    1c4e:	21 30       	cpi	r18, 0x01	; 1
    1c50:	31 05       	cpc	r19, r1
    1c52:	49 f4       	brne	.+18     	; 0x1c66 <MDIO_voidSetPortDirection+0xc0>
				{
				case OUTPUT:DIO_DDRB_REG=0XFF;; break;
    1c54:	e7 e3       	ldi	r30, 0x37	; 55
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	8f ef       	ldi	r24, 0xFF	; 255
    1c5a:	80 83       	st	Z, r24
    1c5c:	40 c0       	rjmp	.+128    	; 0x1cde <MDIO_voidSetPortDirection+0x138>
				case INPUT:DIO_DDRB_REG=0X00; break;
    1c5e:	e7 e3       	ldi	r30, 0x37	; 55
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	10 82       	st	Z, r1
    1c64:	3c c0       	rjmp	.+120    	; 0x1cde <MDIO_voidSetPortDirection+0x138>
				default: DIO_DDRB_REG=A_u8PortDirection; break;
    1c66:	e7 e3       	ldi	r30, 0x37	; 55
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	80 83       	st	Z, r24
    1c6e:	37 c0       	rjmp	.+110    	; 0x1cde <MDIO_voidSetPortDirection+0x138>
				}
				break;

			case PORTC:
				switch(A_u8PortDirection)
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	3e 83       	std	Y+6, r19	; 0x06
    1c78:	2d 83       	std	Y+5, r18	; 0x05
    1c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	51 f0       	breq	.+20     	; 0x1c96 <MDIO_voidSetPortDirection+0xf0>
    1c82:	2d 81       	ldd	r18, Y+5	; 0x05
    1c84:	3e 81       	ldd	r19, Y+6	; 0x06
    1c86:	21 30       	cpi	r18, 0x01	; 1
    1c88:	31 05       	cpc	r19, r1
    1c8a:	49 f4       	brne	.+18     	; 0x1c9e <MDIO_voidSetPortDirection+0xf8>
				{
				case OUTPUT:DIO_DDRC_REG=0XFF;; break;
    1c8c:	e4 e3       	ldi	r30, 0x34	; 52
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	8f ef       	ldi	r24, 0xFF	; 255
    1c92:	80 83       	st	Z, r24
    1c94:	24 c0       	rjmp	.+72     	; 0x1cde <MDIO_voidSetPortDirection+0x138>
				case INPUT:DIO_DDRC_REG=0X00; break;
    1c96:	e4 e3       	ldi	r30, 0x34	; 52
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	10 82       	st	Z, r1
    1c9c:	20 c0       	rjmp	.+64     	; 0x1cde <MDIO_voidSetPortDirection+0x138>
				default: DIO_DDRC_REG=A_u8PortDirection; break;
    1c9e:	e4 e3       	ldi	r30, 0x34	; 52
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	80 83       	st	Z, r24
    1ca6:	1b c0       	rjmp	.+54     	; 0x1cde <MDIO_voidSetPortDirection+0x138>
				}
				break;

			case PORTD:
				switch(A_u8PortDirection)
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	28 2f       	mov	r18, r24
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	3c 83       	std	Y+4, r19	; 0x04
    1cb0:	2b 83       	std	Y+3, r18	; 0x03
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	51 f0       	breq	.+20     	; 0x1cce <MDIO_voidSetPortDirection+0x128>
    1cba:	2b 81       	ldd	r18, Y+3	; 0x03
    1cbc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cbe:	21 30       	cpi	r18, 0x01	; 1
    1cc0:	31 05       	cpc	r19, r1
    1cc2:	49 f4       	brne	.+18     	; 0x1cd6 <MDIO_voidSetPortDirection+0x130>
				{
				case OUTPUT:DIO_DDRD_REG=0XFF;; break;
    1cc4:	e1 e3       	ldi	r30, 0x31	; 49
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	8f ef       	ldi	r24, 0xFF	; 255
    1cca:	80 83       	st	Z, r24
    1ccc:	08 c0       	rjmp	.+16     	; 0x1cde <MDIO_voidSetPortDirection+0x138>
				case INPUT:DIO_DDRD_REG=0X00; break;
    1cce:	e1 e3       	ldi	r30, 0x31	; 49
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	10 82       	st	Z, r1
    1cd4:	04 c0       	rjmp	.+8      	; 0x1cde <MDIO_voidSetPortDirection+0x138>
				default: DIO_DDRD_REG=A_u8PortDirection; break;
    1cd6:	e1 e3       	ldi	r30, 0x31	; 49
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	80 83       	st	Z, r24
				}
				break;

		}

}
    1cde:	2c 96       	adiw	r28, 0x0c	; 12
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue (u8 A_u8PortNum,u8 A_u8PortValue)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	00 d0       	rcall	.+0      	; 0x1cf6 <MDIO_voidSetPortValue+0x6>
    1cf6:	00 d0       	rcall	.+0      	; 0x1cf8 <MDIO_voidSetPortValue+0x8>
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNum)
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	28 2f       	mov	r18, r24
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	3c 83       	std	Y+4, r19	; 0x04
    1d08:	2b 83       	std	Y+3, r18	; 0x03
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	81 30       	cpi	r24, 0x01	; 1
    1d10:	91 05       	cpc	r25, r1
    1d12:	d1 f0       	breq	.+52     	; 0x1d48 <MDIO_voidSetPortValue+0x58>
    1d14:	2b 81       	ldd	r18, Y+3	; 0x03
    1d16:	3c 81       	ldd	r19, Y+4	; 0x04
    1d18:	22 30       	cpi	r18, 0x02	; 2
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	2c f4       	brge	.+10     	; 0x1d28 <MDIO_voidSetPortValue+0x38>
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	61 f0       	breq	.+24     	; 0x1d3e <MDIO_voidSetPortValue+0x4e>
    1d26:	1e c0       	rjmp	.+60     	; 0x1d64 <MDIO_voidSetPortValue+0x74>
    1d28:	2b 81       	ldd	r18, Y+3	; 0x03
    1d2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2c:	22 30       	cpi	r18, 0x02	; 2
    1d2e:	31 05       	cpc	r19, r1
    1d30:	81 f0       	breq	.+32     	; 0x1d52 <MDIO_voidSetPortValue+0x62>
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	83 30       	cpi	r24, 0x03	; 3
    1d38:	91 05       	cpc	r25, r1
    1d3a:	81 f0       	breq	.+32     	; 0x1d5c <MDIO_voidSetPortValue+0x6c>
    1d3c:	13 c0       	rjmp	.+38     	; 0x1d64 <MDIO_voidSetPortValue+0x74>
		{
			case PORTA: DIO_PORTA_REG=A_u8PortValue; break;
    1d3e:	eb e3       	ldi	r30, 0x3B	; 59
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	80 83       	st	Z, r24
    1d46:	0e c0       	rjmp	.+28     	; 0x1d64 <MDIO_voidSetPortValue+0x74>
			case PORTB: DIO_PORTB_REG=A_u8PortValue; break;
    1d48:	e8 e3       	ldi	r30, 0x38	; 56
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	80 83       	st	Z, r24
    1d50:	09 c0       	rjmp	.+18     	; 0x1d64 <MDIO_voidSetPortValue+0x74>
			case PORTC: DIO_PORTC_REG=A_u8PortValue; break;
    1d52:	e5 e3       	ldi	r30, 0x35	; 53
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	80 83       	st	Z, r24
    1d5a:	04 c0       	rjmp	.+8      	; 0x1d64 <MDIO_voidSetPortValue+0x74>
			case PORTD: DIO_PORTD_REG=A_u8PortValue; break;
    1d5c:	e2 e3       	ldi	r30, 0x32	; 50
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	80 83       	st	Z, r24
		}
}
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <MDIO_u8GetPortValue>:

u8 MDIO_u8GetPortValue(u8 A_u8PortNum)
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <MDIO_u8GetPortValue+0x6>
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <MDIO_u8GetPortValue+0x8>
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8PortValue;
	switch(A_u8PortNum)
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	3c 83       	std	Y+4, r19	; 0x04
    1d88:	2b 83       	std	Y+3, r18	; 0x03
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8e:	81 30       	cpi	r24, 0x01	; 1
    1d90:	91 05       	cpc	r25, r1
    1d92:	d1 f0       	breq	.+52     	; 0x1dc8 <MDIO_u8GetPortValue+0x56>
    1d94:	2b 81       	ldd	r18, Y+3	; 0x03
    1d96:	3c 81       	ldd	r19, Y+4	; 0x04
    1d98:	22 30       	cpi	r18, 0x02	; 2
    1d9a:	31 05       	cpc	r19, r1
    1d9c:	2c f4       	brge	.+10     	; 0x1da8 <MDIO_u8GetPortValue+0x36>
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	61 f0       	breq	.+24     	; 0x1dbe <MDIO_u8GetPortValue+0x4c>
    1da6:	1e c0       	rjmp	.+60     	; 0x1de4 <MDIO_u8GetPortValue+0x72>
    1da8:	2b 81       	ldd	r18, Y+3	; 0x03
    1daa:	3c 81       	ldd	r19, Y+4	; 0x04
    1dac:	22 30       	cpi	r18, 0x02	; 2
    1dae:	31 05       	cpc	r19, r1
    1db0:	81 f0       	breq	.+32     	; 0x1dd2 <MDIO_u8GetPortValue+0x60>
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	9c 81       	ldd	r25, Y+4	; 0x04
    1db6:	83 30       	cpi	r24, 0x03	; 3
    1db8:	91 05       	cpc	r25, r1
    1dba:	81 f0       	breq	.+32     	; 0x1ddc <MDIO_u8GetPortValue+0x6a>
    1dbc:	13 c0       	rjmp	.+38     	; 0x1de4 <MDIO_u8GetPortValue+0x72>
			{
				case PORTA: L_u8PortValue=DIO_PINA_REG; break;
    1dbe:	e9 e3       	ldi	r30, 0x39	; 57
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	89 83       	std	Y+1, r24	; 0x01
    1dc6:	0e c0       	rjmp	.+28     	; 0x1de4 <MDIO_u8GetPortValue+0x72>
				case PORTB: L_u8PortValue=DIO_PINB_REG; break;
    1dc8:	e6 e3       	ldi	r30, 0x36	; 54
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	89 83       	std	Y+1, r24	; 0x01
    1dd0:	09 c0       	rjmp	.+18     	; 0x1de4 <MDIO_u8GetPortValue+0x72>
				case PORTC: L_u8PortValue=DIO_PINC_REG; break;
    1dd2:	e3 e3       	ldi	r30, 0x33	; 51
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	04 c0       	rjmp	.+8      	; 0x1de4 <MDIO_u8GetPortValue+0x72>
				case PORTD: L_u8PortValue=DIO_PIND_REG; break;
    1ddc:	e0 e3       	ldi	r30, 0x30	; 48
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	89 83       	std	Y+1, r24	; 0x01
			}
	return L_u8PortValue;
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	08 95       	ret

00001df4 <MADC_voidInit>:
#include "../../Lib/Bit_Maths.h"

void (*ADC_callback)(void);

void MADC_voidInit()
{
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
	// Reference Voltage
	#if ADC_REF_VOLT == AVCC
	 CLR_BIT (ADMUX, REFS1);
    1dfc:	a7 e2       	ldi	r26, 0x27	; 39
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e7 e2       	ldi	r30, 0x27	; 39
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	8f 77       	andi	r24, 0x7F	; 127
    1e08:	8c 93       	st	X, r24
	 SET_BIT(ADMUX, REFS0);
    1e0a:	a7 e2       	ldi	r26, 0x27	; 39
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e7 e2       	ldi	r30, 0x27	; 39
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	80 64       	ori	r24, 0x40	; 64
    1e16:	8c 93       	st	X, r24
	#error "Please select the correct refrence"

#endif

	//Data Adjustment
	CLR_BIT(ADMUX,ADLAR);
    1e18:	a7 e2       	ldi	r26, 0x27	; 39
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e7 e2       	ldi	r30, 0x27	; 39
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	8f 7d       	andi	r24, 0xDF	; 223
    1e24:	8c 93       	st	X, r24

	//Prescaler Selection //divisor : 64
	ADCSRA=(ADCSRA & 0xf8)|ADC_PreScalar;
    1e26:	a6 e2       	ldi	r26, 0x26	; 38
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e6 e2       	ldi	r30, 0x26	; 38
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	88 7f       	andi	r24, 0xF8	; 248
    1e32:	86 60       	ori	r24, 0x06	; 6
    1e34:	8c 93       	st	X, r24

	//Auto Trigger Enable
	SET_BIT(ADCSRA,ADATE);
    1e36:	a6 e2       	ldi	r26, 0x26	; 38
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e6 e2       	ldi	r30, 0x26	; 38
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	80 62       	ori	r24, 0x20	; 32
    1e42:	8c 93       	st	X, r24

	//interrupt enable/disable
#if ADC_INT_ENABLE == ENABLE
	SET_BIT(ADCSRA,ADIE);
    1e44:	a6 e2       	ldi	r26, 0x26	; 38
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e6 e2       	ldi	r30, 0x26	; 38
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	88 60       	ori	r24, 0x08	; 8
    1e50:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADIE);

#endif

	//Enable ADC
	SET_BIT(ADCSRA,ADEN);
    1e52:	a6 e2       	ldi	r26, 0x26	; 38
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e6 e2       	ldi	r30, 0x26	; 38
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	80 68       	ori	r24, 0x80	; 128
    1e5e:	8c 93       	st	X, r24
}
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <MADC_u16ConvertToDigital_Polling>:

u16 MADC_u16ConvertToDigital_Polling(u8 A_u8ChannelNum)
{
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	0f 92       	push	r0
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	89 83       	std	Y+1, r24	; 0x01

	A_u8ChannelNum &= 0x07;
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	87 70       	andi	r24, 0x07	; 7
    1e76:	89 83       	std	Y+1, r24	; 0x01

	//select channel
	ADMUX=(ADMUX & 0xe0) | A_u8ChannelNum;
    1e78:	a7 e2       	ldi	r26, 0x27	; 39
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e7 e2       	ldi	r30, 0x27	; 39
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	98 2f       	mov	r25, r24
    1e84:	90 7e       	andi	r25, 0xE0	; 224
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	89 2b       	or	r24, r25
    1e8a:	8c 93       	st	X, r24

	//start conversion
	SET_BIT(ADCSRA,ADSC);
    1e8c:	a6 e2       	ldi	r26, 0x26	; 38
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e6 e2       	ldi	r30, 0x26	; 38
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	80 64       	ori	r24, 0x40	; 64
    1e98:	8c 93       	st	X, r24

	//poll on flag
	while (GET_BIT(ADCSRA , ADSC) != 0){}
    1e9a:	e6 e2       	ldi	r30, 0x26	; 38
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	82 95       	swap	r24
    1ea2:	86 95       	lsr	r24
    1ea4:	86 95       	lsr	r24
    1ea6:	83 70       	andi	r24, 0x03	; 3
    1ea8:	88 2f       	mov	r24, r24
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	81 70       	andi	r24, 0x01	; 1
    1eae:	90 70       	andi	r25, 0x00	; 0
    1eb0:	88 23       	and	r24, r24
    1eb2:	99 f7       	brne	.-26     	; 0x1e9a <MADC_u16ConvertToDigital_Polling+0x34>

	//clear flag
	CLR_BIT(ADCSRA,ADIF);
    1eb4:	a6 e2       	ldi	r26, 0x26	; 38
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e6 e2       	ldi	r30, 0x26	; 38
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	8f 7e       	andi	r24, 0xEF	; 239
    1ec0:	8c 93       	st	X, r24

	return ADC;
    1ec2:	e4 e2       	ldi	r30, 0x24	; 36
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	88 2f       	mov	r24, r24
    1eca:	90 e0       	ldi	r25, 0x00	; 0
}
    1ecc:	0f 90       	pop	r0
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <MADC_voidConvertToDigital_Interrupt>:

void MADC_voidConvertToDigital_Interrupt (u8 A_u8ChannelNum)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	0f 92       	push	r0
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	89 83       	std	Y+1, r24	; 0x01
	A_u8ChannelNum &= 0x07;
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	87 70       	andi	r24, 0x07	; 7
    1ee4:	89 83       	std	Y+1, r24	; 0x01

		//select channel
		ADMUX=(ADMUX & 0xe0) | A_u8ChannelNum;
    1ee6:	a7 e2       	ldi	r26, 0x27	; 39
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e7 e2       	ldi	r30, 0x27	; 39
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	98 2f       	mov	r25, r24
    1ef2:	90 7e       	andi	r25, 0xE0	; 224
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	89 2b       	or	r24, r25
    1ef8:	8c 93       	st	X, r24

		//start conversion
		SET_BIT(ADCSRA,ADSC);
    1efa:	a6 e2       	ldi	r26, 0x26	; 38
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	e6 e2       	ldi	r30, 0x26	; 38
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	80 64       	ori	r24, 0x40	; 64
    1f06:	8c 93       	st	X, r24
}
    1f08:	0f 90       	pop	r0
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <MADC_voidSetCallBack>:

void MADC_voidSetCallBack(void(*A_FuncPtr)(void))
{
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <MADC_voidSetCallBack+0x6>
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	89 83       	std	Y+1, r24	; 0x01
	ADC_callback=A_FuncPtr;
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	9a 81       	ldd	r25, Y+2	; 0x02
    1f22:	90 93 90 00 	sts	0x0090, r25
    1f26:	80 93 8f 00 	sts	0x008F, r24
}
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <__vector_16>:

void __vector_16(void)  __attribute__((signal));

void __vector_16(void) {
    1f34:	1f 92       	push	r1
    1f36:	0f 92       	push	r0
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	0f 92       	push	r0
    1f3c:	11 24       	eor	r1, r1
    1f3e:	2f 93       	push	r18
    1f40:	3f 93       	push	r19
    1f42:	4f 93       	push	r20
    1f44:	5f 93       	push	r21
    1f46:	6f 93       	push	r22
    1f48:	7f 93       	push	r23
    1f4a:	8f 93       	push	r24
    1f4c:	9f 93       	push	r25
    1f4e:	af 93       	push	r26
    1f50:	bf 93       	push	r27
    1f52:	ef 93       	push	r30
    1f54:	ff 93       	push	r31
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
	ADC_callback();
    1f5e:	e0 91 8f 00 	lds	r30, 0x008F
    1f62:	f0 91 90 00 	lds	r31, 0x0090
    1f66:	09 95       	icall
}
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	ff 91       	pop	r31
    1f6e:	ef 91       	pop	r30
    1f70:	bf 91       	pop	r27
    1f72:	af 91       	pop	r26
    1f74:	9f 91       	pop	r25
    1f76:	8f 91       	pop	r24
    1f78:	7f 91       	pop	r23
    1f7a:	6f 91       	pop	r22
    1f7c:	5f 91       	pop	r21
    1f7e:	4f 91       	pop	r20
    1f80:	3f 91       	pop	r19
    1f82:	2f 91       	pop	r18
    1f84:	0f 90       	pop	r0
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	0f 90       	pop	r0
    1f8a:	1f 90       	pop	r1
    1f8c:	18 95       	reti

00001f8e <H7seg_InitPort>:
		0b01111111,
		0b11101111,
};

void H7seg_InitPort(u8 A_u8PortNum)
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	0f 92       	push	r0
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPortDirection(A_u8PortNum,OUTPUT);
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	61 e0       	ldi	r22, 0x01	; 1
    1f9e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <MDIO_voidSetPortDirection>
}
    1fa2:	0f 90       	pop	r0
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <H7seg_voidDisplayNum>:

void H7seg_voidDisplayNum(u8 A_u8PortNum,u8 A_u8Num)
{
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <H7seg_voidDisplayNum+0x6>
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    1fb6:	6a 83       	std	Y+2, r22	; 0x02
	if (A_u8Num<=9){
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	8a 30       	cpi	r24, 0x0A	; 10
    1fbc:	58 f4       	brcc	.+22     	; 0x1fd4 <H7seg_voidDisplayNum+0x2a>
#if SSD_Type==0
	MDIO_voidSetPortValue(A_u8PortNum,G_NumArr[A_u8Num]);
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	88 2f       	mov	r24, r24
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	e8 59       	subi	r30, 0x98	; 152
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	90 81       	ld	r25, Z
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	69 2f       	mov	r22, r25
    1fd0:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <MDIO_voidSetPortValue>
#elif SSD_Type==1
	MDIO_voidSetPortValue(A_u8PortNum,~G_NumArr[A_u8Num]);
#endif
	}
}
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <H7seg_voidCountUp>:

void H7seg_voidCountUp(u8 A_u8PortNum,u8 A_u8Num) //starts from Num
{
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	61 97       	sbiw	r28, 0x11	; 17
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	cd bf       	out	0x3d, r28	; 61
    1ff2:	88 8b       	std	Y+16, r24	; 0x10
    1ff4:	69 8b       	std	Y+17, r22	; 0x11
	for (u8 counter=A_u8Num; counter<=nine; counter++)
    1ff6:	89 89       	ldd	r24, Y+17	; 0x11
    1ff8:	8f 87       	std	Y+15, r24	; 0x0f
    1ffa:	86 c0       	rjmp	.+268    	; 0x2108 <H7seg_voidCountUp+0x12a>
	{
		MDIO_voidSetPortValue(A_u8PortNum,G_NumArr[counter]);
    1ffc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ffe:	88 2f       	mov	r24, r24
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	fc 01       	movw	r30, r24
    2004:	e8 59       	subi	r30, 0x98	; 152
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	90 81       	ld	r25, Z
    200a:	88 89       	ldd	r24, Y+16	; 0x10
    200c:	69 2f       	mov	r22, r25
    200e:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <MDIO_voidSetPortValue>
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	aa e7       	ldi	r26, 0x7A	; 122
    2018:	b4 e4       	ldi	r27, 0x44	; 68
    201a:	8b 87       	std	Y+11, r24	; 0x0b
    201c:	9c 87       	std	Y+12, r25	; 0x0c
    201e:	ad 87       	std	Y+13, r26	; 0x0d
    2020:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2022:	6b 85       	ldd	r22, Y+11	; 0x0b
    2024:	7c 85       	ldd	r23, Y+12	; 0x0c
    2026:	8d 85       	ldd	r24, Y+13	; 0x0d
    2028:	9e 85       	ldd	r25, Y+14	; 0x0e
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	4a e7       	ldi	r20, 0x7A	; 122
    2030:	53 e4       	ldi	r21, 0x43	; 67
    2032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	8f 83       	std	Y+7, r24	; 0x07
    203c:	98 87       	std	Y+8, r25	; 0x08
    203e:	a9 87       	std	Y+9, r26	; 0x09
    2040:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2042:	6f 81       	ldd	r22, Y+7	; 0x07
    2044:	78 85       	ldd	r23, Y+8	; 0x08
    2046:	89 85       	ldd	r24, Y+9	; 0x09
    2048:	9a 85       	ldd	r25, Y+10	; 0x0a
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e8       	ldi	r20, 0x80	; 128
    2050:	5f e3       	ldi	r21, 0x3F	; 63
    2052:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2056:	88 23       	and	r24, r24
    2058:	2c f4       	brge	.+10     	; 0x2064 <H7seg_voidCountUp+0x86>
		__ticks = 1;
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	9e 83       	std	Y+6, r25	; 0x06
    2060:	8d 83       	std	Y+5, r24	; 0x05
    2062:	3f c0       	rjmp	.+126    	; 0x20e2 <H7seg_voidCountUp+0x104>
	else if (__tmp > 65535)
    2064:	6f 81       	ldd	r22, Y+7	; 0x07
    2066:	78 85       	ldd	r23, Y+8	; 0x08
    2068:	89 85       	ldd	r24, Y+9	; 0x09
    206a:	9a 85       	ldd	r25, Y+10	; 0x0a
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	3f ef       	ldi	r19, 0xFF	; 255
    2070:	4f e7       	ldi	r20, 0x7F	; 127
    2072:	57 e4       	ldi	r21, 0x47	; 71
    2074:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2078:	18 16       	cp	r1, r24
    207a:	4c f5       	brge	.+82     	; 0x20ce <H7seg_voidCountUp+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207c:	6b 85       	ldd	r22, Y+11	; 0x0b
    207e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2080:	8d 85       	ldd	r24, Y+13	; 0x0d
    2082:	9e 85       	ldd	r25, Y+14	; 0x0e
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e2       	ldi	r20, 0x20	; 32
    208a:	51 e4       	ldi	r21, 0x41	; 65
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	bc 01       	movw	r22, r24
    2096:	cd 01       	movw	r24, r26
    2098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9e 83       	std	Y+6, r25	; 0x06
    20a2:	8d 83       	std	Y+5, r24	; 0x05
    20a4:	0f c0       	rjmp	.+30     	; 0x20c4 <H7seg_voidCountUp+0xe6>
    20a6:	89 e1       	ldi	r24, 0x19	; 25
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	9c 83       	std	Y+4, r25	; 0x04
    20ac:	8b 83       	std	Y+3, r24	; 0x03
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	9c 81       	ldd	r25, Y+4	; 0x04
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <H7seg_voidCountUp+0xd4>
    20b6:	9c 83       	std	Y+4, r25	; 0x04
    20b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ba:	8d 81       	ldd	r24, Y+5	; 0x05
    20bc:	9e 81       	ldd	r25, Y+6	; 0x06
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	9e 83       	std	Y+6, r25	; 0x06
    20c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c4:	8d 81       	ldd	r24, Y+5	; 0x05
    20c6:	9e 81       	ldd	r25, Y+6	; 0x06
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	69 f7       	brne	.-38     	; 0x20a6 <H7seg_voidCountUp+0xc8>
    20cc:	14 c0       	rjmp	.+40     	; 0x20f6 <H7seg_voidCountUp+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ce:	6f 81       	ldd	r22, Y+7	; 0x07
    20d0:	78 85       	ldd	r23, Y+8	; 0x08
    20d2:	89 85       	ldd	r24, Y+9	; 0x09
    20d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	9e 83       	std	Y+6, r25	; 0x06
    20e0:	8d 83       	std	Y+5, r24	; 0x05
    20e2:	8d 81       	ldd	r24, Y+5	; 0x05
    20e4:	9e 81       	ldd	r25, Y+6	; 0x06
    20e6:	9a 83       	std	Y+2, r25	; 0x02
    20e8:	89 83       	std	Y+1, r24	; 0x01
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	9a 81       	ldd	r25, Y+2	; 0x02
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <H7seg_voidCountUp+0x110>
    20f2:	9a 83       	std	Y+2, r25	; 0x02
    20f4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		if (counter==9)
    20f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f8:	89 30       	cpi	r24, 0x09	; 9
    20fa:	19 f4       	brne	.+6      	; 0x2102 <H7seg_voidCountUp+0x124>
			counter=A_u8Num-1;
    20fc:	89 89       	ldd	r24, Y+17	; 0x11
    20fe:	81 50       	subi	r24, 0x01	; 1
    2100:	8f 87       	std	Y+15, r24	; 0x0f
	}
}

void H7seg_voidCountUp(u8 A_u8PortNum,u8 A_u8Num) //starts from Num
{
	for (u8 counter=A_u8Num; counter<=nine; counter++)
    2102:	8f 85       	ldd	r24, Y+15	; 0x0f
    2104:	8f 5f       	subi	r24, 0xFF	; 255
    2106:	8f 87       	std	Y+15, r24	; 0x0f
    2108:	8f 85       	ldd	r24, Y+15	; 0x0f
    210a:	8a 30       	cpi	r24, 0x0A	; 10
    210c:	08 f4       	brcc	.+2      	; 0x2110 <H7seg_voidCountUp+0x132>
    210e:	76 cf       	rjmp	.-276    	; 0x1ffc <H7seg_voidCountUp+0x1e>
		MDIO_voidSetPortValue(A_u8PortNum,G_NumArr[counter]);
		_delay_ms(1000);
		if (counter==9)
			counter=A_u8Num-1;
	}
}
    2110:	61 96       	adiw	r28, 0x11	; 17
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	f8 94       	cli
    2116:	de bf       	out	0x3e, r29	; 62
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	cd bf       	out	0x3d, r28	; 61
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <H7seg_voidTurnOff>:
void H7seg_voidTurnOff(u8 A_u8PortNum){
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	0f 92       	push	r0
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	89 83       	std	Y+1, r24	; 0x01

#if SSD_Type==0
	MDIO_voidSetPortValue(A_u8PortNum,0x00);
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	60 e0       	ldi	r22, 0x00	; 0
    2132:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <MDIO_voidSetPortValue>
#elif SSD_Type==1
	MDIO_voidSetPortValue(A_u8PortNum0xff);
#endif

}
    2136:	0f 90       	pop	r0
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	08 95       	ret

0000213e <H7seg_voidCountDown>:

void H7seg_voidCountDown(u8 A_u8PortNum,u8 A_u8Num) //starts from Num
{
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	61 97       	sbiw	r28, 0x11	; 17
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	88 8b       	std	Y+16, r24	; 0x10
    2154:	69 8b       	std	Y+17, r22	; 0x11
	for (u8 counter=A_u8Num; counter>=zero; counter--)
    2156:	89 89       	ldd	r24, Y+17	; 0x11
    2158:	8f 87       	std	Y+15, r24	; 0x0f
		{
			MDIO_voidSetPortValue(A_u8PortNum,G_NumArr[counter]);
    215a:	8f 85       	ldd	r24, Y+15	; 0x0f
    215c:	88 2f       	mov	r24, r24
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	fc 01       	movw	r30, r24
    2162:	e8 59       	subi	r30, 0x98	; 152
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	90 81       	ld	r25, Z
    2168:	88 89       	ldd	r24, Y+16	; 0x10
    216a:	69 2f       	mov	r22, r25
    216c:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <MDIO_voidSetPortValue>
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	aa e7       	ldi	r26, 0x7A	; 122
    2176:	b4 e4       	ldi	r27, 0x44	; 68
    2178:	8b 87       	std	Y+11, r24	; 0x0b
    217a:	9c 87       	std	Y+12, r25	; 0x0c
    217c:	ad 87       	std	Y+13, r26	; 0x0d
    217e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2180:	6b 85       	ldd	r22, Y+11	; 0x0b
    2182:	7c 85       	ldd	r23, Y+12	; 0x0c
    2184:	8d 85       	ldd	r24, Y+13	; 0x0d
    2186:	9e 85       	ldd	r25, Y+14	; 0x0e
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	4a e7       	ldi	r20, 0x7A	; 122
    218e:	53 e4       	ldi	r21, 0x43	; 67
    2190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	8f 83       	std	Y+7, r24	; 0x07
    219a:	98 87       	std	Y+8, r25	; 0x08
    219c:	a9 87       	std	Y+9, r26	; 0x09
    219e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21a0:	6f 81       	ldd	r22, Y+7	; 0x07
    21a2:	78 85       	ldd	r23, Y+8	; 0x08
    21a4:	89 85       	ldd	r24, Y+9	; 0x09
    21a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e8       	ldi	r20, 0x80	; 128
    21ae:	5f e3       	ldi	r21, 0x3F	; 63
    21b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b4:	88 23       	and	r24, r24
    21b6:	2c f4       	brge	.+10     	; 0x21c2 <H7seg_voidCountDown+0x84>
		__ticks = 1;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	9e 83       	std	Y+6, r25	; 0x06
    21be:	8d 83       	std	Y+5, r24	; 0x05
    21c0:	3f c0       	rjmp	.+126    	; 0x2240 <H7seg_voidCountDown+0x102>
	else if (__tmp > 65535)
    21c2:	6f 81       	ldd	r22, Y+7	; 0x07
    21c4:	78 85       	ldd	r23, Y+8	; 0x08
    21c6:	89 85       	ldd	r24, Y+9	; 0x09
    21c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	3f ef       	ldi	r19, 0xFF	; 255
    21ce:	4f e7       	ldi	r20, 0x7F	; 127
    21d0:	57 e4       	ldi	r21, 0x47	; 71
    21d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21d6:	18 16       	cp	r1, r24
    21d8:	4c f5       	brge	.+82     	; 0x222c <H7seg_voidCountDown+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21da:	6b 85       	ldd	r22, Y+11	; 0x0b
    21dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21de:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e2       	ldi	r20, 0x20	; 32
    21e8:	51 e4       	ldi	r21, 0x41	; 65
    21ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	bc 01       	movw	r22, r24
    21f4:	cd 01       	movw	r24, r26
    21f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	9e 83       	std	Y+6, r25	; 0x06
    2200:	8d 83       	std	Y+5, r24	; 0x05
    2202:	0f c0       	rjmp	.+30     	; 0x2222 <H7seg_voidCountDown+0xe4>
    2204:	89 e1       	ldi	r24, 0x19	; 25
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	9c 83       	std	Y+4, r25	; 0x04
    220a:	8b 83       	std	Y+3, r24	; 0x03
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	9c 81       	ldd	r25, Y+4	; 0x04
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <H7seg_voidCountDown+0xd2>
    2214:	9c 83       	std	Y+4, r25	; 0x04
    2216:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2218:	8d 81       	ldd	r24, Y+5	; 0x05
    221a:	9e 81       	ldd	r25, Y+6	; 0x06
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	9e 83       	std	Y+6, r25	; 0x06
    2220:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2222:	8d 81       	ldd	r24, Y+5	; 0x05
    2224:	9e 81       	ldd	r25, Y+6	; 0x06
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	69 f7       	brne	.-38     	; 0x2204 <H7seg_voidCountDown+0xc6>
    222a:	14 c0       	rjmp	.+40     	; 0x2254 <H7seg_voidCountDown+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222c:	6f 81       	ldd	r22, Y+7	; 0x07
    222e:	78 85       	ldd	r23, Y+8	; 0x08
    2230:	89 85       	ldd	r24, Y+9	; 0x09
    2232:	9a 85       	ldd	r25, Y+10	; 0x0a
    2234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	9e 83       	std	Y+6, r25	; 0x06
    223e:	8d 83       	std	Y+5, r24	; 0x05
    2240:	8d 81       	ldd	r24, Y+5	; 0x05
    2242:	9e 81       	ldd	r25, Y+6	; 0x06
    2244:	9a 83       	std	Y+2, r25	; 0x02
    2246:	89 83       	std	Y+1, r24	; 0x01
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	9a 81       	ldd	r25, Y+2	; 0x02
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <H7seg_voidCountDown+0x10e>
    2250:	9a 83       	std	Y+2, r25	; 0x02
    2252:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			if (counter==0)
    2254:	8f 85       	ldd	r24, Y+15	; 0x0f
    2256:	88 23       	and	r24, r24
    2258:	19 f4       	brne	.+6      	; 0x2260 <H7seg_voidCountDown+0x122>
				counter=A_u8Num+1;
    225a:	89 89       	ldd	r24, Y+17	; 0x11
    225c:	8f 5f       	subi	r24, 0xFF	; 255
    225e:	8f 87       	std	Y+15, r24	; 0x0f

}

void H7seg_voidCountDown(u8 A_u8PortNum,u8 A_u8Num) //starts from Num
{
	for (u8 counter=A_u8Num; counter>=zero; counter--)
    2260:	8f 85       	ldd	r24, Y+15	; 0x0f
    2262:	81 50       	subi	r24, 0x01	; 1
    2264:	8f 87       	std	Y+15, r24	; 0x0f
    2266:	79 cf       	rjmp	.-270    	; 0x215a <H7seg_voidCountDown+0x1c>

00002268 <H7seg_voidStartClock>:
				counter=A_u8Num+1;
		}
}

void H7seg_voidStartClock()
{
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	65 97       	sbiw	r28, 0x15	; 21
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	f8 94       	cli
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	cd bf       	out	0x3d, r28	; 61
    u8 L_u8Seconds = 0;
    227c:	1d 8a       	std	Y+21, r1	; 0x15
    u8 L_u8Minutes = 0;
    227e:	1c 8a       	std	Y+20, r1	; 0x14
    u8 L_u8Hours = 0;
    2280:	1b 8a       	std	Y+19, r1	; 0x13

    while (1)
    {
        u8 hours_left = L_u8Hours / 10;
    2282:	8b 89       	ldd	r24, Y+19	; 0x13
    2284:	9a e0       	ldi	r25, 0x0A	; 10
    2286:	69 2f       	mov	r22, r25
    2288:	0e 94 80 1b 	call	0x3700	; 0x3700 <__udivmodqi4>
    228c:	8a 8b       	std	Y+18, r24	; 0x12
        u8 hours_right = L_u8Hours % 10;
    228e:	8b 89       	ldd	r24, Y+19	; 0x13
    2290:	9a e0       	ldi	r25, 0x0A	; 10
    2292:	69 2f       	mov	r22, r25
    2294:	0e 94 80 1b 	call	0x3700	; 0x3700 <__udivmodqi4>
    2298:	89 2f       	mov	r24, r25
    229a:	89 8b       	std	Y+17, r24	; 0x11
        u8 min_left = L_u8Minutes / 10;
    229c:	8c 89       	ldd	r24, Y+20	; 0x14
    229e:	9a e0       	ldi	r25, 0x0A	; 10
    22a0:	69 2f       	mov	r22, r25
    22a2:	0e 94 80 1b 	call	0x3700	; 0x3700 <__udivmodqi4>
    22a6:	88 8b       	std	Y+16, r24	; 0x10
        u8 min_right = L_u8Minutes % 10;
    22a8:	8c 89       	ldd	r24, Y+20	; 0x14
    22aa:	9a e0       	ldi	r25, 0x0A	; 10
    22ac:	69 2f       	mov	r22, r25
    22ae:	0e 94 80 1b 	call	0x3700	; 0x3700 <__udivmodqi4>
    22b2:	89 2f       	mov	r24, r25
    22b4:	8f 87       	std	Y+15, r24	; 0x0f

        H7seg_voidDisplayNum(PORTA, hours_left);
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	6a 89       	ldd	r22, Y+18	; 0x12
    22ba:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <H7seg_voidDisplayNum>
        H7seg_voidDisplayNum(PORTB, hours_right);
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	69 89       	ldd	r22, Y+17	; 0x11
    22c2:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <H7seg_voidDisplayNum>
        H7seg_voidDisplayNum(PORTC, min_left);
    22c6:	82 e0       	ldi	r24, 0x02	; 2
    22c8:	68 89       	ldd	r22, Y+16	; 0x10
    22ca:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <H7seg_voidDisplayNum>
        H7seg_voidDisplayNum(PORTD, min_right);
    22ce:	83 e0       	ldi	r24, 0x03	; 3
    22d0:	6f 85       	ldd	r22, Y+15	; 0x0f
    22d2:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <H7seg_voidDisplayNum>

        if (L_u8Seconds % 2 == 0)
    22d6:	8d 89       	ldd	r24, Y+21	; 0x15
    22d8:	88 2f       	mov	r24, r24
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	81 70       	andi	r24, 0x01	; 1
    22de:	90 70       	andi	r25, 0x00	; 0
    22e0:	00 97       	sbiw	r24, 0x00	; 0
    22e2:	31 f4       	brne	.+12     	; 0x22f0 <H7seg_voidStartClock+0x88>
                {
                    MDIO_voidSetPinValue(PORTA, PIN7, HIGH); // Turn on the LED
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	67 e0       	ldi	r22, 0x07	; 7
    22e8:	41 e0       	ldi	r20, 0x01	; 1
    22ea:	0e 94 c6 0b 	call	0x178c	; 0x178c <MDIO_voidSetPinValue>
    22ee:	05 c0       	rjmp	.+10     	; 0x22fa <H7seg_voidStartClock+0x92>
                }
                else
                {
                	MDIO_voidSetPinValue(PORTA, PIN7, LOW);  // Turn off the LED
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	67 e0       	ldi	r22, 0x07	; 7
    22f4:	40 e0       	ldi	r20, 0x00	; 0
    22f6:	0e 94 c6 0b 	call	0x178c	; 0x178c <MDIO_voidSetPinValue>
                }

        L_u8Seconds++;
    22fa:	8d 89       	ldd	r24, Y+21	; 0x15
    22fc:	8f 5f       	subi	r24, 0xFF	; 255
    22fe:	8d 8b       	std	Y+21, r24	; 0x15

        if (L_u8Seconds >= 60)
    2300:	8d 89       	ldd	r24, Y+21	; 0x15
    2302:	8c 33       	cpi	r24, 0x3C	; 60
    2304:	78 f0       	brcs	.+30     	; 0x2324 <H7seg_voidStartClock+0xbc>
        {
            L_u8Seconds = 0;
    2306:	1d 8a       	std	Y+21, r1	; 0x15
            L_u8Minutes++;
    2308:	8c 89       	ldd	r24, Y+20	; 0x14
    230a:	8f 5f       	subi	r24, 0xFF	; 255
    230c:	8c 8b       	std	Y+20, r24	; 0x14

            if (L_u8Minutes >= 60)
    230e:	8c 89       	ldd	r24, Y+20	; 0x14
    2310:	8c 33       	cpi	r24, 0x3C	; 60
    2312:	40 f0       	brcs	.+16     	; 0x2324 <H7seg_voidStartClock+0xbc>
            {
                L_u8Minutes = 0;
    2314:	1c 8a       	std	Y+20, r1	; 0x14
                L_u8Hours++;
    2316:	8b 89       	ldd	r24, Y+19	; 0x13
    2318:	8f 5f       	subi	r24, 0xFF	; 255
    231a:	8b 8b       	std	Y+19, r24	; 0x13

                if (L_u8Hours >= 24)
    231c:	8b 89       	ldd	r24, Y+19	; 0x13
    231e:	88 31       	cpi	r24, 0x18	; 24
    2320:	08 f0       	brcs	.+2      	; 0x2324 <H7seg_voidStartClock+0xbc>
                {
                    L_u8Hours = 0;
    2322:	1b 8a       	std	Y+19, r1	; 0x13
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	aa e7       	ldi	r26, 0x7A	; 122
    232a:	b4 e4       	ldi	r27, 0x44	; 68
    232c:	8b 87       	std	Y+11, r24	; 0x0b
    232e:	9c 87       	std	Y+12, r25	; 0x0c
    2330:	ad 87       	std	Y+13, r26	; 0x0d
    2332:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2334:	6b 85       	ldd	r22, Y+11	; 0x0b
    2336:	7c 85       	ldd	r23, Y+12	; 0x0c
    2338:	8d 85       	ldd	r24, Y+13	; 0x0d
    233a:	9e 85       	ldd	r25, Y+14	; 0x0e
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	4a e7       	ldi	r20, 0x7A	; 122
    2342:	53 e4       	ldi	r21, 0x43	; 67
    2344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	8f 83       	std	Y+7, r24	; 0x07
    234e:	98 87       	std	Y+8, r25	; 0x08
    2350:	a9 87       	std	Y+9, r26	; 0x09
    2352:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2354:	6f 81       	ldd	r22, Y+7	; 0x07
    2356:	78 85       	ldd	r23, Y+8	; 0x08
    2358:	89 85       	ldd	r24, Y+9	; 0x09
    235a:	9a 85       	ldd	r25, Y+10	; 0x0a
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e8       	ldi	r20, 0x80	; 128
    2362:	5f e3       	ldi	r21, 0x3F	; 63
    2364:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2368:	88 23       	and	r24, r24
    236a:	2c f4       	brge	.+10     	; 0x2376 <H7seg_voidStartClock+0x10e>
		__ticks = 1;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9e 83       	std	Y+6, r25	; 0x06
    2372:	8d 83       	std	Y+5, r24	; 0x05
    2374:	3f c0       	rjmp	.+126    	; 0x23f4 <H7seg_voidStartClock+0x18c>
	else if (__tmp > 65535)
    2376:	6f 81       	ldd	r22, Y+7	; 0x07
    2378:	78 85       	ldd	r23, Y+8	; 0x08
    237a:	89 85       	ldd	r24, Y+9	; 0x09
    237c:	9a 85       	ldd	r25, Y+10	; 0x0a
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	3f ef       	ldi	r19, 0xFF	; 255
    2382:	4f e7       	ldi	r20, 0x7F	; 127
    2384:	57 e4       	ldi	r21, 0x47	; 71
    2386:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    238a:	18 16       	cp	r1, r24
    238c:	4c f5       	brge	.+82     	; 0x23e0 <H7seg_voidStartClock+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2390:	7c 85       	ldd	r23, Y+12	; 0x0c
    2392:	8d 85       	ldd	r24, Y+13	; 0x0d
    2394:	9e 85       	ldd	r25, Y+14	; 0x0e
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e2       	ldi	r20, 0x20	; 32
    239c:	51 e4       	ldi	r21, 0x41	; 65
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	9e 83       	std	Y+6, r25	; 0x06
    23b4:	8d 83       	std	Y+5, r24	; 0x05
    23b6:	0f c0       	rjmp	.+30     	; 0x23d6 <H7seg_voidStartClock+0x16e>
    23b8:	89 e1       	ldi	r24, 0x19	; 25
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	9c 83       	std	Y+4, r25	; 0x04
    23be:	8b 83       	std	Y+3, r24	; 0x03
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
    23c2:	9c 81       	ldd	r25, Y+4	; 0x04
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <H7seg_voidStartClock+0x15c>
    23c8:	9c 83       	std	Y+4, r25	; 0x04
    23ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23cc:	8d 81       	ldd	r24, Y+5	; 0x05
    23ce:	9e 81       	ldd	r25, Y+6	; 0x06
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	9e 83       	std	Y+6, r25	; 0x06
    23d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d6:	8d 81       	ldd	r24, Y+5	; 0x05
    23d8:	9e 81       	ldd	r25, Y+6	; 0x06
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	69 f7       	brne	.-38     	; 0x23b8 <H7seg_voidStartClock+0x150>
    23de:	51 cf       	rjmp	.-350    	; 0x2282 <H7seg_voidStartClock+0x1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e0:	6f 81       	ldd	r22, Y+7	; 0x07
    23e2:	78 85       	ldd	r23, Y+8	; 0x08
    23e4:	89 85       	ldd	r24, Y+9	; 0x09
    23e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9e 83       	std	Y+6, r25	; 0x06
    23f2:	8d 83       	std	Y+5, r24	; 0x05
    23f4:	8d 81       	ldd	r24, Y+5	; 0x05
    23f6:	9e 81       	ldd	r25, Y+6	; 0x06
    23f8:	9a 83       	std	Y+2, r25	; 0x02
    23fa:	89 83       	std	Y+1, r24	; 0x01
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <H7seg_voidStartClock+0x198>
    2404:	9a 83       	std	Y+2, r25	; 0x02
    2406:	89 83       	std	Y+1, r24	; 0x01
    2408:	3c cf       	rjmp	.-392    	; 0x2282 <H7seg_voidStartClock+0x1a>

0000240a <HLCD_voidSendCommand>:
#include "../../Lib/defines.h"
#include <util/delay.h>
#include "../../MCAL/DIO/DIO.h"

void HLCD_voidSendCommand(u8 A_u8cmd)
{
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	6d 97       	sbiw	r28, 0x1d	; 29
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	8d 8f       	std	Y+29, r24	; 0x1d
	//Rs and R/W
	MDIO_voidSetPinDirection(Control_Port,PIN0,OUTPUT);
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	60 e0       	ldi	r22, 0x00	; 0
    2424:	41 e0       	ldi	r20, 0x01	; 1
    2426:	0e 94 af 0a 	call	0x155e	; 0x155e <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(Control_Port,PIN1,OUTPUT);
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	61 e0       	ldi	r22, 0x01	; 1
    242e:	41 e0       	ldi	r20, 0x01	; 1
    2430:	0e 94 af 0a 	call	0x155e	; 0x155e <MDIO_voidSetPinDirection>

	MDIO_voidSetPinValue(Control_Port,PIN0,LOW);
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	60 e0       	ldi	r22, 0x00	; 0
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	0e 94 c6 0b 	call	0x178c	; 0x178c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Control_Port,PIN1,LOW);
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	61 e0       	ldi	r22, 0x01	; 1
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	0e 94 c6 0b 	call	0x178c	; 0x178c <MDIO_voidSetPinValue>

	//write data on data_port
	MDIO_voidSetPortDirection(Data_Port,OUTPUT);
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	61 e0       	ldi	r22, 0x01	; 1
    244c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <MDIO_voidSetPortDirection>
	MDIO_voidSetPortValue(Data_Port,A_u8cmd);
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2454:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <MDIO_voidSetPortValue>

	//Enable pin
	MDIO_voidSetPinDirection(Control_Port,PIN2,OUTPUT);
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	62 e0       	ldi	r22, 0x02	; 2
    245c:	41 e0       	ldi	r20, 0x01	; 1
    245e:	0e 94 af 0a 	call	0x155e	; 0x155e <MDIO_voidSetPinDirection>

	MDIO_voidSetPinValue(Control_Port,PIN2,HIGH);
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	62 e0       	ldi	r22, 0x02	; 2
    2466:	41 e0       	ldi	r20, 0x01	; 1
    2468:	0e 94 c6 0b 	call	0x178c	; 0x178c <MDIO_voidSetPinValue>
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	a0 e8       	ldi	r26, 0x80	; 128
    2472:	bf e3       	ldi	r27, 0x3F	; 63
    2474:	89 8f       	std	Y+25, r24	; 0x19
    2476:	9a 8f       	std	Y+26, r25	; 0x1a
    2478:	ab 8f       	std	Y+27, r26	; 0x1b
    247a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    247c:	69 8d       	ldd	r22, Y+25	; 0x19
    247e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2480:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2482:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	4a e7       	ldi	r20, 0x7A	; 122
    248a:	53 e4       	ldi	r21, 0x43	; 67
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	8d 8b       	std	Y+21, r24	; 0x15
    2496:	9e 8b       	std	Y+22, r25	; 0x16
    2498:	af 8b       	std	Y+23, r26	; 0x17
    249a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    249c:	6d 89       	ldd	r22, Y+21	; 0x15
    249e:	7e 89       	ldd	r23, Y+22	; 0x16
    24a0:	8f 89       	ldd	r24, Y+23	; 0x17
    24a2:	98 8d       	ldd	r25, Y+24	; 0x18
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e8       	ldi	r20, 0x80	; 128
    24aa:	5f e3       	ldi	r21, 0x3F	; 63
    24ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b0:	88 23       	and	r24, r24
    24b2:	2c f4       	brge	.+10     	; 0x24be <HLCD_voidSendCommand+0xb4>
		__ticks = 1;
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	9c 8b       	std	Y+20, r25	; 0x14
    24ba:	8b 8b       	std	Y+19, r24	; 0x13
    24bc:	3f c0       	rjmp	.+126    	; 0x253c <HLCD_voidSendCommand+0x132>
	else if (__tmp > 65535)
    24be:	6d 89       	ldd	r22, Y+21	; 0x15
    24c0:	7e 89       	ldd	r23, Y+22	; 0x16
    24c2:	8f 89       	ldd	r24, Y+23	; 0x17
    24c4:	98 8d       	ldd	r25, Y+24	; 0x18
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	3f ef       	ldi	r19, 0xFF	; 255
    24ca:	4f e7       	ldi	r20, 0x7F	; 127
    24cc:	57 e4       	ldi	r21, 0x47	; 71
    24ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24d2:	18 16       	cp	r1, r24
    24d4:	4c f5       	brge	.+82     	; 0x2528 <HLCD_voidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d6:	69 8d       	ldd	r22, Y+25	; 0x19
    24d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e2       	ldi	r20, 0x20	; 32
    24e4:	51 e4       	ldi	r21, 0x41	; 65
    24e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	bc 01       	movw	r22, r24
    24f0:	cd 01       	movw	r24, r26
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	9c 8b       	std	Y+20, r25	; 0x14
    24fc:	8b 8b       	std	Y+19, r24	; 0x13
    24fe:	0f c0       	rjmp	.+30     	; 0x251e <HLCD_voidSendCommand+0x114>
    2500:	89 e1       	ldi	r24, 0x19	; 25
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	9a 8b       	std	Y+18, r25	; 0x12
    2506:	89 8b       	std	Y+17, r24	; 0x11
    2508:	89 89       	ldd	r24, Y+17	; 0x11
    250a:	9a 89       	ldd	r25, Y+18	; 0x12
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <HLCD_voidSendCommand+0x102>
    2510:	9a 8b       	std	Y+18, r25	; 0x12
    2512:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2514:	8b 89       	ldd	r24, Y+19	; 0x13
    2516:	9c 89       	ldd	r25, Y+20	; 0x14
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	9c 8b       	std	Y+20, r25	; 0x14
    251c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251e:	8b 89       	ldd	r24, Y+19	; 0x13
    2520:	9c 89       	ldd	r25, Y+20	; 0x14
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	69 f7       	brne	.-38     	; 0x2500 <HLCD_voidSendCommand+0xf6>
    2526:	14 c0       	rjmp	.+40     	; 0x2550 <HLCD_voidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2528:	6d 89       	ldd	r22, Y+21	; 0x15
    252a:	7e 89       	ldd	r23, Y+22	; 0x16
    252c:	8f 89       	ldd	r24, Y+23	; 0x17
    252e:	98 8d       	ldd	r25, Y+24	; 0x18
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	9c 8b       	std	Y+20, r25	; 0x14
    253a:	8b 8b       	std	Y+19, r24	; 0x13
    253c:	8b 89       	ldd	r24, Y+19	; 0x13
    253e:	9c 89       	ldd	r25, Y+20	; 0x14
    2540:	98 8b       	std	Y+16, r25	; 0x10
    2542:	8f 87       	std	Y+15, r24	; 0x0f
    2544:	8f 85       	ldd	r24, Y+15	; 0x0f
    2546:	98 89       	ldd	r25, Y+16	; 0x10
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <HLCD_voidSendCommand+0x13e>
    254c:	98 8b       	std	Y+16, r25	; 0x10
    254e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(Control_Port,PIN2,LOW);
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	62 e0       	ldi	r22, 0x02	; 2
    2554:	40 e0       	ldi	r20, 0x00	; 0
    2556:	0e 94 c6 0b 	call	0x178c	; 0x178c <MDIO_voidSetPinValue>
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	a0 e8       	ldi	r26, 0x80	; 128
    2560:	bf e3       	ldi	r27, 0x3F	; 63
    2562:	8b 87       	std	Y+11, r24	; 0x0b
    2564:	9c 87       	std	Y+12, r25	; 0x0c
    2566:	ad 87       	std	Y+13, r26	; 0x0d
    2568:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256a:	6b 85       	ldd	r22, Y+11	; 0x0b
    256c:	7c 85       	ldd	r23, Y+12	; 0x0c
    256e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2570:	9e 85       	ldd	r25, Y+14	; 0x0e
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	4a e7       	ldi	r20, 0x7A	; 122
    2578:	53 e4       	ldi	r21, 0x43	; 67
    257a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	8f 83       	std	Y+7, r24	; 0x07
    2584:	98 87       	std	Y+8, r25	; 0x08
    2586:	a9 87       	std	Y+9, r26	; 0x09
    2588:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    258a:	6f 81       	ldd	r22, Y+7	; 0x07
    258c:	78 85       	ldd	r23, Y+8	; 0x08
    258e:	89 85       	ldd	r24, Y+9	; 0x09
    2590:	9a 85       	ldd	r25, Y+10	; 0x0a
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	40 e8       	ldi	r20, 0x80	; 128
    2598:	5f e3       	ldi	r21, 0x3F	; 63
    259a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    259e:	88 23       	and	r24, r24
    25a0:	2c f4       	brge	.+10     	; 0x25ac <HLCD_voidSendCommand+0x1a2>
		__ticks = 1;
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	9e 83       	std	Y+6, r25	; 0x06
    25a8:	8d 83       	std	Y+5, r24	; 0x05
    25aa:	3f c0       	rjmp	.+126    	; 0x262a <HLCD_voidSendCommand+0x220>
	else if (__tmp > 65535)
    25ac:	6f 81       	ldd	r22, Y+7	; 0x07
    25ae:	78 85       	ldd	r23, Y+8	; 0x08
    25b0:	89 85       	ldd	r24, Y+9	; 0x09
    25b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	3f ef       	ldi	r19, 0xFF	; 255
    25b8:	4f e7       	ldi	r20, 0x7F	; 127
    25ba:	57 e4       	ldi	r21, 0x47	; 71
    25bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c0:	18 16       	cp	r1, r24
    25c2:	4c f5       	brge	.+82     	; 0x2616 <HLCD_voidSendCommand+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e2       	ldi	r20, 0x20	; 32
    25d2:	51 e4       	ldi	r21, 0x41	; 65
    25d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	bc 01       	movw	r22, r24
    25de:	cd 01       	movw	r24, r26
    25e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	9e 83       	std	Y+6, r25	; 0x06
    25ea:	8d 83       	std	Y+5, r24	; 0x05
    25ec:	0f c0       	rjmp	.+30     	; 0x260c <HLCD_voidSendCommand+0x202>
    25ee:	89 e1       	ldi	r24, 0x19	; 25
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	9c 83       	std	Y+4, r25	; 0x04
    25f4:	8b 83       	std	Y+3, r24	; 0x03
    25f6:	8b 81       	ldd	r24, Y+3	; 0x03
    25f8:	9c 81       	ldd	r25, Y+4	; 0x04
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <HLCD_voidSendCommand+0x1f0>
    25fe:	9c 83       	std	Y+4, r25	; 0x04
    2600:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2602:	8d 81       	ldd	r24, Y+5	; 0x05
    2604:	9e 81       	ldd	r25, Y+6	; 0x06
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	9e 83       	std	Y+6, r25	; 0x06
    260a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260c:	8d 81       	ldd	r24, Y+5	; 0x05
    260e:	9e 81       	ldd	r25, Y+6	; 0x06
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	69 f7       	brne	.-38     	; 0x25ee <HLCD_voidSendCommand+0x1e4>
    2614:	14 c0       	rjmp	.+40     	; 0x263e <HLCD_voidSendCommand+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2616:	6f 81       	ldd	r22, Y+7	; 0x07
    2618:	78 85       	ldd	r23, Y+8	; 0x08
    261a:	89 85       	ldd	r24, Y+9	; 0x09
    261c:	9a 85       	ldd	r25, Y+10	; 0x0a
    261e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	9e 83       	std	Y+6, r25	; 0x06
    2628:	8d 83       	std	Y+5, r24	; 0x05
    262a:	8d 81       	ldd	r24, Y+5	; 0x05
    262c:	9e 81       	ldd	r25, Y+6	; 0x06
    262e:	9a 83       	std	Y+2, r25	; 0x02
    2630:	89 83       	std	Y+1, r24	; 0x01
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	9a 81       	ldd	r25, Y+2	; 0x02
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	f1 f7       	brne	.-4      	; 0x2636 <HLCD_voidSendCommand+0x22c>
    263a:	9a 83       	std	Y+2, r25	; 0x02
    263c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    263e:	6d 96       	adiw	r28, 0x1d	; 29
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	f8 94       	cli
    2644:	de bf       	out	0x3e, r29	; 62
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	cd bf       	out	0x3d, r28	; 61
    264a:	cf 91       	pop	r28
    264c:	df 91       	pop	r29
    264e:	08 95       	ret

00002650 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8data)
{
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
    2658:	6d 97       	sbiw	r28, 0x1d	; 29
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	f8 94       	cli
    265e:	de bf       	out	0x3e, r29	; 62
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	cd bf       	out	0x3d, r28	; 61
    2664:	8d 8f       	std	Y+29, r24	; 0x1d
	//Rs and R/W
	MDIO_voidSetPinDirection(Control_Port,PIN0,OUTPUT);
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	60 e0       	ldi	r22, 0x00	; 0
    266a:	41 e0       	ldi	r20, 0x01	; 1
    266c:	0e 94 af 0a 	call	0x155e	; 0x155e <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(Control_Port,PIN1,OUTPUT);
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	61 e0       	ldi	r22, 0x01	; 1
    2674:	41 e0       	ldi	r20, 0x01	; 1
    2676:	0e 94 af 0a 	call	0x155e	; 0x155e <MDIO_voidSetPinDirection>

	MDIO_voidSetPinValue(Control_Port,PIN0,HIGH);
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	60 e0       	ldi	r22, 0x00	; 0
    267e:	41 e0       	ldi	r20, 0x01	; 1
    2680:	0e 94 c6 0b 	call	0x178c	; 0x178c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Control_Port,PIN1,LOW);
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	61 e0       	ldi	r22, 0x01	; 1
    2688:	40 e0       	ldi	r20, 0x00	; 0
    268a:	0e 94 c6 0b 	call	0x178c	; 0x178c <MDIO_voidSetPinValue>

	//write data on data_port
	MDIO_voidSetPortDirection(Data_Port,OUTPUT);
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	61 e0       	ldi	r22, 0x01	; 1
    2692:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <MDIO_voidSetPortDirection>
	MDIO_voidSetPortValue(Data_Port,A_u8data);
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	6d 8d       	ldd	r22, Y+29	; 0x1d
    269a:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <MDIO_voidSetPortValue>

	//Enable pin
	MDIO_voidSetPinDirection(Control_Port,PIN2,OUTPUT);
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	62 e0       	ldi	r22, 0x02	; 2
    26a2:	41 e0       	ldi	r20, 0x01	; 1
    26a4:	0e 94 af 0a 	call	0x155e	; 0x155e <MDIO_voidSetPinDirection>

	MDIO_voidSetPinValue(Control_Port,PIN2,HIGH);
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	62 e0       	ldi	r22, 0x02	; 2
    26ac:	41 e0       	ldi	r20, 0x01	; 1
    26ae:	0e 94 c6 0b 	call	0x178c	; 0x178c <MDIO_voidSetPinValue>
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	a0 e8       	ldi	r26, 0x80	; 128
    26b8:	bf e3       	ldi	r27, 0x3F	; 63
    26ba:	89 8f       	std	Y+25, r24	; 0x19
    26bc:	9a 8f       	std	Y+26, r25	; 0x1a
    26be:	ab 8f       	std	Y+27, r26	; 0x1b
    26c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c2:	69 8d       	ldd	r22, Y+25	; 0x19
    26c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	4a e7       	ldi	r20, 0x7A	; 122
    26d0:	53 e4       	ldi	r21, 0x43	; 67
    26d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	8d 8b       	std	Y+21, r24	; 0x15
    26dc:	9e 8b       	std	Y+22, r25	; 0x16
    26de:	af 8b       	std	Y+23, r26	; 0x17
    26e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26e2:	6d 89       	ldd	r22, Y+21	; 0x15
    26e4:	7e 89       	ldd	r23, Y+22	; 0x16
    26e6:	8f 89       	ldd	r24, Y+23	; 0x17
    26e8:	98 8d       	ldd	r25, Y+24	; 0x18
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e8       	ldi	r20, 0x80	; 128
    26f0:	5f e3       	ldi	r21, 0x3F	; 63
    26f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f6:	88 23       	and	r24, r24
    26f8:	2c f4       	brge	.+10     	; 0x2704 <HLCD_voidSendData+0xb4>
		__ticks = 1;
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	9c 8b       	std	Y+20, r25	; 0x14
    2700:	8b 8b       	std	Y+19, r24	; 0x13
    2702:	3f c0       	rjmp	.+126    	; 0x2782 <HLCD_voidSendData+0x132>
	else if (__tmp > 65535)
    2704:	6d 89       	ldd	r22, Y+21	; 0x15
    2706:	7e 89       	ldd	r23, Y+22	; 0x16
    2708:	8f 89       	ldd	r24, Y+23	; 0x17
    270a:	98 8d       	ldd	r25, Y+24	; 0x18
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	3f ef       	ldi	r19, 0xFF	; 255
    2710:	4f e7       	ldi	r20, 0x7F	; 127
    2712:	57 e4       	ldi	r21, 0x47	; 71
    2714:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2718:	18 16       	cp	r1, r24
    271a:	4c f5       	brge	.+82     	; 0x276e <HLCD_voidSendData+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271c:	69 8d       	ldd	r22, Y+25	; 0x19
    271e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2720:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2722:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e2       	ldi	r20, 0x20	; 32
    272a:	51 e4       	ldi	r21, 0x41	; 65
    272c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	bc 01       	movw	r22, r24
    2736:	cd 01       	movw	r24, r26
    2738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	9c 8b       	std	Y+20, r25	; 0x14
    2742:	8b 8b       	std	Y+19, r24	; 0x13
    2744:	0f c0       	rjmp	.+30     	; 0x2764 <HLCD_voidSendData+0x114>
    2746:	89 e1       	ldi	r24, 0x19	; 25
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	9a 8b       	std	Y+18, r25	; 0x12
    274c:	89 8b       	std	Y+17, r24	; 0x11
    274e:	89 89       	ldd	r24, Y+17	; 0x11
    2750:	9a 89       	ldd	r25, Y+18	; 0x12
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f7       	brne	.-4      	; 0x2752 <HLCD_voidSendData+0x102>
    2756:	9a 8b       	std	Y+18, r25	; 0x12
    2758:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275a:	8b 89       	ldd	r24, Y+19	; 0x13
    275c:	9c 89       	ldd	r25, Y+20	; 0x14
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	9c 8b       	std	Y+20, r25	; 0x14
    2762:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2764:	8b 89       	ldd	r24, Y+19	; 0x13
    2766:	9c 89       	ldd	r25, Y+20	; 0x14
    2768:	00 97       	sbiw	r24, 0x00	; 0
    276a:	69 f7       	brne	.-38     	; 0x2746 <HLCD_voidSendData+0xf6>
    276c:	14 c0       	rjmp	.+40     	; 0x2796 <HLCD_voidSendData+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276e:	6d 89       	ldd	r22, Y+21	; 0x15
    2770:	7e 89       	ldd	r23, Y+22	; 0x16
    2772:	8f 89       	ldd	r24, Y+23	; 0x17
    2774:	98 8d       	ldd	r25, Y+24	; 0x18
    2776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9c 8b       	std	Y+20, r25	; 0x14
    2780:	8b 8b       	std	Y+19, r24	; 0x13
    2782:	8b 89       	ldd	r24, Y+19	; 0x13
    2784:	9c 89       	ldd	r25, Y+20	; 0x14
    2786:	98 8b       	std	Y+16, r25	; 0x10
    2788:	8f 87       	std	Y+15, r24	; 0x0f
    278a:	8f 85       	ldd	r24, Y+15	; 0x0f
    278c:	98 89       	ldd	r25, Y+16	; 0x10
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <HLCD_voidSendData+0x13e>
    2792:	98 8b       	std	Y+16, r25	; 0x10
    2794:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(Control_Port,PIN2,LOW);
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	62 e0       	ldi	r22, 0x02	; 2
    279a:	40 e0       	ldi	r20, 0x00	; 0
    279c:	0e 94 c6 0b 	call	0x178c	; 0x178c <MDIO_voidSetPinValue>
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	a0 e8       	ldi	r26, 0x80	; 128
    27a6:	bf e3       	ldi	r27, 0x3F	; 63
    27a8:	8b 87       	std	Y+11, r24	; 0x0b
    27aa:	9c 87       	std	Y+12, r25	; 0x0c
    27ac:	ad 87       	std	Y+13, r26	; 0x0d
    27ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	4a e7       	ldi	r20, 0x7A	; 122
    27be:	53 e4       	ldi	r21, 0x43	; 67
    27c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	8f 83       	std	Y+7, r24	; 0x07
    27ca:	98 87       	std	Y+8, r25	; 0x08
    27cc:	a9 87       	std	Y+9, r26	; 0x09
    27ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27d0:	6f 81       	ldd	r22, Y+7	; 0x07
    27d2:	78 85       	ldd	r23, Y+8	; 0x08
    27d4:	89 85       	ldd	r24, Y+9	; 0x09
    27d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	40 e8       	ldi	r20, 0x80	; 128
    27de:	5f e3       	ldi	r21, 0x3F	; 63
    27e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27e4:	88 23       	and	r24, r24
    27e6:	2c f4       	brge	.+10     	; 0x27f2 <HLCD_voidSendData+0x1a2>
		__ticks = 1;
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	9e 83       	std	Y+6, r25	; 0x06
    27ee:	8d 83       	std	Y+5, r24	; 0x05
    27f0:	3f c0       	rjmp	.+126    	; 0x2870 <HLCD_voidSendData+0x220>
	else if (__tmp > 65535)
    27f2:	6f 81       	ldd	r22, Y+7	; 0x07
    27f4:	78 85       	ldd	r23, Y+8	; 0x08
    27f6:	89 85       	ldd	r24, Y+9	; 0x09
    27f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	3f ef       	ldi	r19, 0xFF	; 255
    27fe:	4f e7       	ldi	r20, 0x7F	; 127
    2800:	57 e4       	ldi	r21, 0x47	; 71
    2802:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2806:	18 16       	cp	r1, r24
    2808:	4c f5       	brge	.+82     	; 0x285c <HLCD_voidSendData+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280a:	6b 85       	ldd	r22, Y+11	; 0x0b
    280c:	7c 85       	ldd	r23, Y+12	; 0x0c
    280e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2810:	9e 85       	ldd	r25, Y+14	; 0x0e
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e2       	ldi	r20, 0x20	; 32
    2818:	51 e4       	ldi	r21, 0x41	; 65
    281a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	bc 01       	movw	r22, r24
    2824:	cd 01       	movw	r24, r26
    2826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	9e 83       	std	Y+6, r25	; 0x06
    2830:	8d 83       	std	Y+5, r24	; 0x05
    2832:	0f c0       	rjmp	.+30     	; 0x2852 <HLCD_voidSendData+0x202>
    2834:	89 e1       	ldi	r24, 0x19	; 25
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	9c 83       	std	Y+4, r25	; 0x04
    283a:	8b 83       	std	Y+3, r24	; 0x03
    283c:	8b 81       	ldd	r24, Y+3	; 0x03
    283e:	9c 81       	ldd	r25, Y+4	; 0x04
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	f1 f7       	brne	.-4      	; 0x2840 <HLCD_voidSendData+0x1f0>
    2844:	9c 83       	std	Y+4, r25	; 0x04
    2846:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2848:	8d 81       	ldd	r24, Y+5	; 0x05
    284a:	9e 81       	ldd	r25, Y+6	; 0x06
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	9e 83       	std	Y+6, r25	; 0x06
    2850:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2852:	8d 81       	ldd	r24, Y+5	; 0x05
    2854:	9e 81       	ldd	r25, Y+6	; 0x06
    2856:	00 97       	sbiw	r24, 0x00	; 0
    2858:	69 f7       	brne	.-38     	; 0x2834 <HLCD_voidSendData+0x1e4>
    285a:	14 c0       	rjmp	.+40     	; 0x2884 <HLCD_voidSendData+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    285c:	6f 81       	ldd	r22, Y+7	; 0x07
    285e:	78 85       	ldd	r23, Y+8	; 0x08
    2860:	89 85       	ldd	r24, Y+9	; 0x09
    2862:	9a 85       	ldd	r25, Y+10	; 0x0a
    2864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	9e 83       	std	Y+6, r25	; 0x06
    286e:	8d 83       	std	Y+5, r24	; 0x05
    2870:	8d 81       	ldd	r24, Y+5	; 0x05
    2872:	9e 81       	ldd	r25, Y+6	; 0x06
    2874:	9a 83       	std	Y+2, r25	; 0x02
    2876:	89 83       	std	Y+1, r24	; 0x01
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	9a 81       	ldd	r25, Y+2	; 0x02
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	f1 f7       	brne	.-4      	; 0x287c <HLCD_voidSendData+0x22c>
    2880:	9a 83       	std	Y+2, r25	; 0x02
    2882:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2884:	6d 96       	adiw	r28, 0x1d	; 29
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	f8 94       	cli
    288a:	de bf       	out	0x3e, r29	; 62
    288c:	0f be       	out	0x3f, r0	; 63
    288e:	cd bf       	out	0x3d, r28	; 61
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <HLCD_void8bitInit>:

void HLCD_void8bitInit()
{
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	e8 97       	sbiw	r28, 0x38	; 56
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	f8 94       	cli
    28a4:	de bf       	out	0x3e, r29	; 62
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	cd bf       	out	0x3d, r28	; 61
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	ac e0       	ldi	r26, 0x0C	; 12
    28b0:	b2 e4       	ldi	r27, 0x42	; 66
    28b2:	8d ab       	std	Y+53, r24	; 0x35
    28b4:	9e ab       	std	Y+54, r25	; 0x36
    28b6:	af ab       	std	Y+55, r26	; 0x37
    28b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ba:	6d a9       	ldd	r22, Y+53	; 0x35
    28bc:	7e a9       	ldd	r23, Y+54	; 0x36
    28be:	8f a9       	ldd	r24, Y+55	; 0x37
    28c0:	98 ad       	ldd	r25, Y+56	; 0x38
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	4a e7       	ldi	r20, 0x7A	; 122
    28c8:	53 e4       	ldi	r21, 0x43	; 67
    28ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	89 ab       	std	Y+49, r24	; 0x31
    28d4:	9a ab       	std	Y+50, r25	; 0x32
    28d6:	ab ab       	std	Y+51, r26	; 0x33
    28d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28da:	69 a9       	ldd	r22, Y+49	; 0x31
    28dc:	7a a9       	ldd	r23, Y+50	; 0x32
    28de:	8b a9       	ldd	r24, Y+51	; 0x33
    28e0:	9c a9       	ldd	r25, Y+52	; 0x34
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e8       	ldi	r20, 0x80	; 128
    28e8:	5f e3       	ldi	r21, 0x3F	; 63
    28ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ee:	88 23       	and	r24, r24
    28f0:	2c f4       	brge	.+10     	; 0x28fc <HLCD_void8bitInit+0x66>
		__ticks = 1;
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	98 ab       	std	Y+48, r25	; 0x30
    28f8:	8f a7       	std	Y+47, r24	; 0x2f
    28fa:	3f c0       	rjmp	.+126    	; 0x297a <HLCD_void8bitInit+0xe4>
	else if (__tmp > 65535)
    28fc:	69 a9       	ldd	r22, Y+49	; 0x31
    28fe:	7a a9       	ldd	r23, Y+50	; 0x32
    2900:	8b a9       	ldd	r24, Y+51	; 0x33
    2902:	9c a9       	ldd	r25, Y+52	; 0x34
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	3f ef       	ldi	r19, 0xFF	; 255
    2908:	4f e7       	ldi	r20, 0x7F	; 127
    290a:	57 e4       	ldi	r21, 0x47	; 71
    290c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2910:	18 16       	cp	r1, r24
    2912:	4c f5       	brge	.+82     	; 0x2966 <HLCD_void8bitInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2914:	6d a9       	ldd	r22, Y+53	; 0x35
    2916:	7e a9       	ldd	r23, Y+54	; 0x36
    2918:	8f a9       	ldd	r24, Y+55	; 0x37
    291a:	98 ad       	ldd	r25, Y+56	; 0x38
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e2       	ldi	r20, 0x20	; 32
    2922:	51 e4       	ldi	r21, 0x41	; 65
    2924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	bc 01       	movw	r22, r24
    292e:	cd 01       	movw	r24, r26
    2930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	98 ab       	std	Y+48, r25	; 0x30
    293a:	8f a7       	std	Y+47, r24	; 0x2f
    293c:	0f c0       	rjmp	.+30     	; 0x295c <HLCD_void8bitInit+0xc6>
    293e:	89 e1       	ldi	r24, 0x19	; 25
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	9e a7       	std	Y+46, r25	; 0x2e
    2944:	8d a7       	std	Y+45, r24	; 0x2d
    2946:	8d a5       	ldd	r24, Y+45	; 0x2d
    2948:	9e a5       	ldd	r25, Y+46	; 0x2e
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <HLCD_void8bitInit+0xb4>
    294e:	9e a7       	std	Y+46, r25	; 0x2e
    2950:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2952:	8f a5       	ldd	r24, Y+47	; 0x2f
    2954:	98 a9       	ldd	r25, Y+48	; 0x30
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	98 ab       	std	Y+48, r25	; 0x30
    295a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295c:	8f a5       	ldd	r24, Y+47	; 0x2f
    295e:	98 a9       	ldd	r25, Y+48	; 0x30
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	69 f7       	brne	.-38     	; 0x293e <HLCD_void8bitInit+0xa8>
    2964:	14 c0       	rjmp	.+40     	; 0x298e <HLCD_void8bitInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2966:	69 a9       	ldd	r22, Y+49	; 0x31
    2968:	7a a9       	ldd	r23, Y+50	; 0x32
    296a:	8b a9       	ldd	r24, Y+51	; 0x33
    296c:	9c a9       	ldd	r25, Y+52	; 0x34
    296e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	98 ab       	std	Y+48, r25	; 0x30
    2978:	8f a7       	std	Y+47, r24	; 0x2f
    297a:	8f a5       	ldd	r24, Y+47	; 0x2f
    297c:	98 a9       	ldd	r25, Y+48	; 0x30
    297e:	9c a7       	std	Y+44, r25	; 0x2c
    2980:	8b a7       	std	Y+43, r24	; 0x2b
    2982:	8b a5       	ldd	r24, Y+43	; 0x2b
    2984:	9c a5       	ldd	r25, Y+44	; 0x2c
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	f1 f7       	brne	.-4      	; 0x2986 <HLCD_void8bitInit+0xf0>
    298a:	9c a7       	std	Y+44, r25	; 0x2c
    298c:	8b a7       	std	Y+43, r24	; 0x2b
	 //Delay on power on
	  _delay_ms(35);

	  //Set function
	  HLCD_voidSendCommand(LCD_FunctionSet);
    298e:	8c e3       	ldi	r24, 0x3C	; 60
    2990:	0e 94 05 12 	call	0x240a	; 0x240a <HLCD_voidSendCommand>
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	a0 e8       	ldi	r26, 0x80	; 128
    299a:	bf e3       	ldi	r27, 0x3F	; 63
    299c:	8f a3       	std	Y+39, r24	; 0x27
    299e:	98 a7       	std	Y+40, r25	; 0x28
    29a0:	a9 a7       	std	Y+41, r26	; 0x29
    29a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a4:	6f a1       	ldd	r22, Y+39	; 0x27
    29a6:	78 a5       	ldd	r23, Y+40	; 0x28
    29a8:	89 a5       	ldd	r24, Y+41	; 0x29
    29aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	4a e7       	ldi	r20, 0x7A	; 122
    29b2:	53 e4       	ldi	r21, 0x43	; 67
    29b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	8b a3       	std	Y+35, r24	; 0x23
    29be:	9c a3       	std	Y+36, r25	; 0x24
    29c0:	ad a3       	std	Y+37, r26	; 0x25
    29c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29c4:	6b a1       	ldd	r22, Y+35	; 0x23
    29c6:	7c a1       	ldd	r23, Y+36	; 0x24
    29c8:	8d a1       	ldd	r24, Y+37	; 0x25
    29ca:	9e a1       	ldd	r25, Y+38	; 0x26
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e8       	ldi	r20, 0x80	; 128
    29d2:	5f e3       	ldi	r21, 0x3F	; 63
    29d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d8:	88 23       	and	r24, r24
    29da:	2c f4       	brge	.+10     	; 0x29e6 <HLCD_void8bitInit+0x150>
		__ticks = 1;
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	9a a3       	std	Y+34, r25	; 0x22
    29e2:	89 a3       	std	Y+33, r24	; 0x21
    29e4:	3f c0       	rjmp	.+126    	; 0x2a64 <HLCD_void8bitInit+0x1ce>
	else if (__tmp > 65535)
    29e6:	6b a1       	ldd	r22, Y+35	; 0x23
    29e8:	7c a1       	ldd	r23, Y+36	; 0x24
    29ea:	8d a1       	ldd	r24, Y+37	; 0x25
    29ec:	9e a1       	ldd	r25, Y+38	; 0x26
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	3f ef       	ldi	r19, 0xFF	; 255
    29f2:	4f e7       	ldi	r20, 0x7F	; 127
    29f4:	57 e4       	ldi	r21, 0x47	; 71
    29f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29fa:	18 16       	cp	r1, r24
    29fc:	4c f5       	brge	.+82     	; 0x2a50 <HLCD_void8bitInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fe:	6f a1       	ldd	r22, Y+39	; 0x27
    2a00:	78 a5       	ldd	r23, Y+40	; 0x28
    2a02:	89 a5       	ldd	r24, Y+41	; 0x29
    2a04:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e2       	ldi	r20, 0x20	; 32
    2a0c:	51 e4       	ldi	r21, 0x41	; 65
    2a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	bc 01       	movw	r22, r24
    2a18:	cd 01       	movw	r24, r26
    2a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	9a a3       	std	Y+34, r25	; 0x22
    2a24:	89 a3       	std	Y+33, r24	; 0x21
    2a26:	0f c0       	rjmp	.+30     	; 0x2a46 <HLCD_void8bitInit+0x1b0>
    2a28:	89 e1       	ldi	r24, 0x19	; 25
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	98 a3       	std	Y+32, r25	; 0x20
    2a2e:	8f 8f       	std	Y+31, r24	; 0x1f
    2a30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a32:	98 a1       	ldd	r25, Y+32	; 0x20
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <HLCD_void8bitInit+0x19e>
    2a38:	98 a3       	std	Y+32, r25	; 0x20
    2a3a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a3e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	9a a3       	std	Y+34, r25	; 0x22
    2a44:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a46:	89 a1       	ldd	r24, Y+33	; 0x21
    2a48:	9a a1       	ldd	r25, Y+34	; 0x22
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	69 f7       	brne	.-38     	; 0x2a28 <HLCD_void8bitInit+0x192>
    2a4e:	14 c0       	rjmp	.+40     	; 0x2a78 <HLCD_void8bitInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a50:	6b a1       	ldd	r22, Y+35	; 0x23
    2a52:	7c a1       	ldd	r23, Y+36	; 0x24
    2a54:	8d a1       	ldd	r24, Y+37	; 0x25
    2a56:	9e a1       	ldd	r25, Y+38	; 0x26
    2a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	9a a3       	std	Y+34, r25	; 0x22
    2a62:	89 a3       	std	Y+33, r24	; 0x21
    2a64:	89 a1       	ldd	r24, Y+33	; 0x21
    2a66:	9a a1       	ldd	r25, Y+34	; 0x22
    2a68:	9e 8f       	std	Y+30, r25	; 0x1e
    2a6a:	8d 8f       	std	Y+29, r24	; 0x1d
    2a6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	f1 f7       	brne	.-4      	; 0x2a70 <HLCD_void8bitInit+0x1da>
    2a74:	9e 8f       	std	Y+30, r25	; 0x1e
    2a76:	8d 8f       	std	Y+29, r24	; 0x1d
	  _delay_ms(1);

	  //Display ON/OFF
	  HLCD_voidSendCommand(LCD_DisplayOnOff);
    2a78:	8c e0       	ldi	r24, 0x0C	; 12
    2a7a:	0e 94 05 12 	call	0x240a	; 0x240a <HLCD_voidSendCommand>
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	a0 e8       	ldi	r26, 0x80	; 128
    2a84:	bf e3       	ldi	r27, 0x3F	; 63
    2a86:	89 8f       	std	Y+25, r24	; 0x19
    2a88:	9a 8f       	std	Y+26, r25	; 0x1a
    2a8a:	ab 8f       	std	Y+27, r26	; 0x1b
    2a8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	4a e7       	ldi	r20, 0x7A	; 122
    2a9c:	53 e4       	ldi	r21, 0x43	; 67
    2a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	8d 8b       	std	Y+21, r24	; 0x15
    2aa8:	9e 8b       	std	Y+22, r25	; 0x16
    2aaa:	af 8b       	std	Y+23, r26	; 0x17
    2aac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2aae:	6d 89       	ldd	r22, Y+21	; 0x15
    2ab0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ab2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e8       	ldi	r20, 0x80	; 128
    2abc:	5f e3       	ldi	r21, 0x3F	; 63
    2abe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ac2:	88 23       	and	r24, r24
    2ac4:	2c f4       	brge	.+10     	; 0x2ad0 <HLCD_void8bitInit+0x23a>
		__ticks = 1;
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	9c 8b       	std	Y+20, r25	; 0x14
    2acc:	8b 8b       	std	Y+19, r24	; 0x13
    2ace:	3f c0       	rjmp	.+126    	; 0x2b4e <HLCD_void8bitInit+0x2b8>
	else if (__tmp > 65535)
    2ad0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	3f ef       	ldi	r19, 0xFF	; 255
    2adc:	4f e7       	ldi	r20, 0x7F	; 127
    2ade:	57 e4       	ldi	r21, 0x47	; 71
    2ae0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ae4:	18 16       	cp	r1, r24
    2ae6:	4c f5       	brge	.+82     	; 0x2b3a <HLCD_void8bitInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae8:	69 8d       	ldd	r22, Y+25	; 0x19
    2aea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	40 e2       	ldi	r20, 0x20	; 32
    2af6:	51 e4       	ldi	r21, 0x41	; 65
    2af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	bc 01       	movw	r22, r24
    2b02:	cd 01       	movw	r24, r26
    2b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	9c 8b       	std	Y+20, r25	; 0x14
    2b0e:	8b 8b       	std	Y+19, r24	; 0x13
    2b10:	0f c0       	rjmp	.+30     	; 0x2b30 <HLCD_void8bitInit+0x29a>
    2b12:	89 e1       	ldi	r24, 0x19	; 25
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	9a 8b       	std	Y+18, r25	; 0x12
    2b18:	89 8b       	std	Y+17, r24	; 0x11
    2b1a:	89 89       	ldd	r24, Y+17	; 0x11
    2b1c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	f1 f7       	brne	.-4      	; 0x2b1e <HLCD_void8bitInit+0x288>
    2b22:	9a 8b       	std	Y+18, r25	; 0x12
    2b24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b26:	8b 89       	ldd	r24, Y+19	; 0x13
    2b28:	9c 89       	ldd	r25, Y+20	; 0x14
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	9c 8b       	std	Y+20, r25	; 0x14
    2b2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b30:	8b 89       	ldd	r24, Y+19	; 0x13
    2b32:	9c 89       	ldd	r25, Y+20	; 0x14
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	69 f7       	brne	.-38     	; 0x2b12 <HLCD_void8bitInit+0x27c>
    2b38:	14 c0       	rjmp	.+40     	; 0x2b62 <HLCD_void8bitInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b3a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b3c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b40:	98 8d       	ldd	r25, Y+24	; 0x18
    2b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	9c 8b       	std	Y+20, r25	; 0x14
    2b4c:	8b 8b       	std	Y+19, r24	; 0x13
    2b4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b50:	9c 89       	ldd	r25, Y+20	; 0x14
    2b52:	98 8b       	std	Y+16, r25	; 0x10
    2b54:	8f 87       	std	Y+15, r24	; 0x0f
    2b56:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b58:	98 89       	ldd	r25, Y+16	; 0x10
    2b5a:	01 97       	sbiw	r24, 0x01	; 1
    2b5c:	f1 f7       	brne	.-4      	; 0x2b5a <HLCD_void8bitInit+0x2c4>
    2b5e:	98 8b       	std	Y+16, r25	; 0x10
    2b60:	8f 87       	std	Y+15, r24	; 0x0f
	  _delay_ms(1);

	  //Display Clear
	  HLCD_voidSendCommand(LCD_DisplayClear);
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	0e 94 05 12 	call	0x240a	; 0x240a <HLCD_voidSendCommand>
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	a0 e0       	ldi	r26, 0x00	; 0
    2b6e:	b0 e4       	ldi	r27, 0x40	; 64
    2b70:	8b 87       	std	Y+11, r24	; 0x0b
    2b72:	9c 87       	std	Y+12, r25	; 0x0c
    2b74:	ad 87       	std	Y+13, r26	; 0x0d
    2b76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	4a e7       	ldi	r20, 0x7A	; 122
    2b86:	53 e4       	ldi	r21, 0x43	; 67
    2b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	8f 83       	std	Y+7, r24	; 0x07
    2b92:	98 87       	std	Y+8, r25	; 0x08
    2b94:	a9 87       	std	Y+9, r26	; 0x09
    2b96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b98:	6f 81       	ldd	r22, Y+7	; 0x07
    2b9a:	78 85       	ldd	r23, Y+8	; 0x08
    2b9c:	89 85       	ldd	r24, Y+9	; 0x09
    2b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	40 e8       	ldi	r20, 0x80	; 128
    2ba6:	5f e3       	ldi	r21, 0x3F	; 63
    2ba8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bac:	88 23       	and	r24, r24
    2bae:	2c f4       	brge	.+10     	; 0x2bba <HLCD_void8bitInit+0x324>
		__ticks = 1;
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	9e 83       	std	Y+6, r25	; 0x06
    2bb6:	8d 83       	std	Y+5, r24	; 0x05
    2bb8:	3f c0       	rjmp	.+126    	; 0x2c38 <HLCD_void8bitInit+0x3a2>
	else if (__tmp > 65535)
    2bba:	6f 81       	ldd	r22, Y+7	; 0x07
    2bbc:	78 85       	ldd	r23, Y+8	; 0x08
    2bbe:	89 85       	ldd	r24, Y+9	; 0x09
    2bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	3f ef       	ldi	r19, 0xFF	; 255
    2bc6:	4f e7       	ldi	r20, 0x7F	; 127
    2bc8:	57 e4       	ldi	r21, 0x47	; 71
    2bca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bce:	18 16       	cp	r1, r24
    2bd0:	4c f5       	brge	.+82     	; 0x2c24 <HLCD_void8bitInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	40 e2       	ldi	r20, 0x20	; 32
    2be0:	51 e4       	ldi	r21, 0x41	; 65
    2be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	bc 01       	movw	r22, r24
    2bec:	cd 01       	movw	r24, r26
    2bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	9e 83       	std	Y+6, r25	; 0x06
    2bf8:	8d 83       	std	Y+5, r24	; 0x05
    2bfa:	0f c0       	rjmp	.+30     	; 0x2c1a <HLCD_void8bitInit+0x384>
    2bfc:	89 e1       	ldi	r24, 0x19	; 25
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	9c 83       	std	Y+4, r25	; 0x04
    2c02:	8b 83       	std	Y+3, r24	; 0x03
    2c04:	8b 81       	ldd	r24, Y+3	; 0x03
    2c06:	9c 81       	ldd	r25, Y+4	; 0x04
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	f1 f7       	brne	.-4      	; 0x2c08 <HLCD_void8bitInit+0x372>
    2c0c:	9c 83       	std	Y+4, r25	; 0x04
    2c0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c10:	8d 81       	ldd	r24, Y+5	; 0x05
    2c12:	9e 81       	ldd	r25, Y+6	; 0x06
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	9e 83       	std	Y+6, r25	; 0x06
    2c18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	69 f7       	brne	.-38     	; 0x2bfc <HLCD_void8bitInit+0x366>
    2c22:	14 c0       	rjmp	.+40     	; 0x2c4c <HLCD_void8bitInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c24:	6f 81       	ldd	r22, Y+7	; 0x07
    2c26:	78 85       	ldd	r23, Y+8	; 0x08
    2c28:	89 85       	ldd	r24, Y+9	; 0x09
    2c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	9e 83       	std	Y+6, r25	; 0x06
    2c36:	8d 83       	std	Y+5, r24	; 0x05
    2c38:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3c:	9a 83       	std	Y+2, r25	; 0x02
    2c3e:	89 83       	std	Y+1, r24	; 0x01
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	9a 81       	ldd	r25, Y+2	; 0x02
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	f1 f7       	brne	.-4      	; 0x2c44 <HLCD_void8bitInit+0x3ae>
    2c48:	9a 83       	std	Y+2, r25	; 0x02
    2c4a:	89 83       	std	Y+1, r24	; 0x01
	  _delay_ms(2);

	  //Entry Mode Set
	  HLCD_voidSendCommand(LCD_EntryMode);
    2c4c:	86 e0       	ldi	r24, 0x06	; 6
    2c4e:	0e 94 05 12 	call	0x240a	; 0x240a <HLCD_voidSendCommand>

}
    2c52:	e8 96       	adiw	r28, 0x38	; 56
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	f8 94       	cli
    2c58:	de bf       	out	0x3e, r29	; 62
    2c5a:	0f be       	out	0x3f, r0	; 63
    2c5c:	cd bf       	out	0x3d, r28	; 61
    2c5e:	cf 91       	pop	r28
    2c60:	df 91       	pop	r29
    2c62:	08 95       	ret

00002c64 <HLCD_voidClear>:

void HLCD_voidClear()
{
    2c64:	df 93       	push	r29
    2c66:	cf 93       	push	r28
    2c68:	cd b7       	in	r28, 0x3d	; 61
    2c6a:	de b7       	in	r29, 0x3e	; 62
    2c6c:	2e 97       	sbiw	r28, 0x0e	; 14
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	de bf       	out	0x3e, r29	; 62
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	cd bf       	out	0x3d, r28	; 61
	 HLCD_voidSendCommand(LCD_DisplayClear);
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	0e 94 05 12 	call	0x240a	; 0x240a <HLCD_voidSendCommand>
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	a0 e0       	ldi	r26, 0x00	; 0
    2c84:	b0 e4       	ldi	r27, 0x40	; 64
    2c86:	8b 87       	std	Y+11, r24	; 0x0b
    2c88:	9c 87       	std	Y+12, r25	; 0x0c
    2c8a:	ad 87       	std	Y+13, r26	; 0x0d
    2c8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	4a e7       	ldi	r20, 0x7A	; 122
    2c9c:	53 e4       	ldi	r21, 0x43	; 67
    2c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	8f 83       	std	Y+7, r24	; 0x07
    2ca8:	98 87       	std	Y+8, r25	; 0x08
    2caa:	a9 87       	std	Y+9, r26	; 0x09
    2cac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cae:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb0:	78 85       	ldd	r23, Y+8	; 0x08
    2cb2:	89 85       	ldd	r24, Y+9	; 0x09
    2cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	40 e8       	ldi	r20, 0x80	; 128
    2cbc:	5f e3       	ldi	r21, 0x3F	; 63
    2cbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cc2:	88 23       	and	r24, r24
    2cc4:	2c f4       	brge	.+10     	; 0x2cd0 <HLCD_voidClear+0x6c>
		__ticks = 1;
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	9e 83       	std	Y+6, r25	; 0x06
    2ccc:	8d 83       	std	Y+5, r24	; 0x05
    2cce:	3f c0       	rjmp	.+126    	; 0x2d4e <HLCD_voidClear+0xea>
	else if (__tmp > 65535)
    2cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd2:	78 85       	ldd	r23, Y+8	; 0x08
    2cd4:	89 85       	ldd	r24, Y+9	; 0x09
    2cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	3f ef       	ldi	r19, 0xFF	; 255
    2cdc:	4f e7       	ldi	r20, 0x7F	; 127
    2cde:	57 e4       	ldi	r21, 0x47	; 71
    2ce0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ce4:	18 16       	cp	r1, r24
    2ce6:	4c f5       	brge	.+82     	; 0x2d3a <HLCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	40 e2       	ldi	r20, 0x20	; 32
    2cf6:	51 e4       	ldi	r21, 0x41	; 65
    2cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	bc 01       	movw	r22, r24
    2d02:	cd 01       	movw	r24, r26
    2d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	9e 83       	std	Y+6, r25	; 0x06
    2d0e:	8d 83       	std	Y+5, r24	; 0x05
    2d10:	0f c0       	rjmp	.+30     	; 0x2d30 <HLCD_voidClear+0xcc>
    2d12:	89 e1       	ldi	r24, 0x19	; 25
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	9c 83       	std	Y+4, r25	; 0x04
    2d18:	8b 83       	std	Y+3, r24	; 0x03
    2d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d1e:	01 97       	sbiw	r24, 0x01	; 1
    2d20:	f1 f7       	brne	.-4      	; 0x2d1e <HLCD_voidClear+0xba>
    2d22:	9c 83       	std	Y+4, r25	; 0x04
    2d24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d26:	8d 81       	ldd	r24, Y+5	; 0x05
    2d28:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2a:	01 97       	sbiw	r24, 0x01	; 1
    2d2c:	9e 83       	std	Y+6, r25	; 0x06
    2d2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d30:	8d 81       	ldd	r24, Y+5	; 0x05
    2d32:	9e 81       	ldd	r25, Y+6	; 0x06
    2d34:	00 97       	sbiw	r24, 0x00	; 0
    2d36:	69 f7       	brne	.-38     	; 0x2d12 <HLCD_voidClear+0xae>
    2d38:	14 c0       	rjmp	.+40     	; 0x2d62 <HLCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3c:	78 85       	ldd	r23, Y+8	; 0x08
    2d3e:	89 85       	ldd	r24, Y+9	; 0x09
    2d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d46:	dc 01       	movw	r26, r24
    2d48:	cb 01       	movw	r24, r22
    2d4a:	9e 83       	std	Y+6, r25	; 0x06
    2d4c:	8d 83       	std	Y+5, r24	; 0x05
    2d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d50:	9e 81       	ldd	r25, Y+6	; 0x06
    2d52:	9a 83       	std	Y+2, r25	; 0x02
    2d54:	89 83       	std	Y+1, r24	; 0x01
    2d56:	89 81       	ldd	r24, Y+1	; 0x01
    2d58:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	f1 f7       	brne	.-4      	; 0x2d5a <HLCD_voidClear+0xf6>
    2d5e:	9a 83       	std	Y+2, r25	; 0x02
    2d60:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);
}
    2d62:	2e 96       	adiw	r28, 0x0e	; 14
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	cd bf       	out	0x3d, r28	; 61
    2d6e:	cf 91       	pop	r28
    2d70:	df 91       	pop	r29
    2d72:	08 95       	ret

00002d74 <HLCD_voidSetCursor>:
void HLCD_voidSetCursor(u8 A_u8LineNum,u8 A_u8LinePos)
{
    2d74:	df 93       	push	r29
    2d76:	cf 93       	push	r28
    2d78:	00 d0       	rcall	.+0      	; 0x2d7a <HLCD_voidSetCursor+0x6>
    2d7a:	00 d0       	rcall	.+0      	; 0x2d7c <HLCD_voidSetCursor+0x8>
    2d7c:	cd b7       	in	r28, 0x3d	; 61
    2d7e:	de b7       	in	r29, 0x3e	; 62
    2d80:	89 83       	std	Y+1, r24	; 0x01
    2d82:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8LineNum)
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	28 2f       	mov	r18, r24
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	3c 83       	std	Y+4, r19	; 0x04
    2d8c:	2b 83       	std	Y+3, r18	; 0x03
    2d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d90:	9c 81       	ldd	r25, Y+4	; 0x04
    2d92:	81 30       	cpi	r24, 0x01	; 1
    2d94:	91 05       	cpc	r25, r1
    2d96:	31 f0       	breq	.+12     	; 0x2da4 <HLCD_voidSetCursor+0x30>
    2d98:	2b 81       	ldd	r18, Y+3	; 0x03
    2d9a:	3c 81       	ldd	r19, Y+4	; 0x04
    2d9c:	22 30       	cpi	r18, 0x02	; 2
    2d9e:	31 05       	cpc	r19, r1
    2da0:	31 f0       	breq	.+12     	; 0x2dae <HLCD_voidSetCursor+0x3a>
    2da2:	09 c0       	rjmp	.+18     	; 0x2db6 <HLCD_voidSetCursor+0x42>
	{
		case LCD_LINE_1: HLCD_voidSendCommand(0x80 + 0 + A_u8LinePos); break;
    2da4:	8a 81       	ldd	r24, Y+2	; 0x02
    2da6:	80 58       	subi	r24, 0x80	; 128
    2da8:	0e 94 05 12 	call	0x240a	; 0x240a <HLCD_voidSendCommand>
    2dac:	04 c0       	rjmp	.+8      	; 0x2db6 <HLCD_voidSetCursor+0x42>
		case LCD_LINE_2: HLCD_voidSendCommand(0x80 + 64 + A_u8LinePos); break;
    2dae:	8a 81       	ldd	r24, Y+2	; 0x02
    2db0:	80 54       	subi	r24, 0x40	; 64
    2db2:	0e 94 05 12 	call	0x240a	; 0x240a <HLCD_voidSendCommand>
	}
}
    2db6:	0f 90       	pop	r0
    2db8:	0f 90       	pop	r0
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	cf 91       	pop	r28
    2dc0:	df 91       	pop	r29
    2dc2:	08 95       	ret

00002dc4 <HLCD_voidSendString>:
void HLCD_voidSendString(u8 *A_u8PtrString)
{
    2dc4:	df 93       	push	r29
    2dc6:	cf 93       	push	r28
    2dc8:	00 d0       	rcall	.+0      	; 0x2dca <HLCD_voidSendString+0x6>
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
    2dce:	9a 83       	std	Y+2, r25	; 0x02
    2dd0:	89 83       	std	Y+1, r24	; 0x01
    2dd2:	0b c0       	rjmp	.+22     	; 0x2dea <HLCD_voidSendString+0x26>
	while (*A_u8PtrString !='\0')
	{
		HLCD_voidSendData(*A_u8PtrString ++);
    2dd4:	e9 81       	ldd	r30, Y+1	; 0x01
    2dd6:	fa 81       	ldd	r31, Y+2	; 0x02
    2dd8:	20 81       	ld	r18, Z
    2dda:	89 81       	ldd	r24, Y+1	; 0x01
    2ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dde:	01 96       	adiw	r24, 0x01	; 1
    2de0:	9a 83       	std	Y+2, r25	; 0x02
    2de2:	89 83       	std	Y+1, r24	; 0x01
    2de4:	82 2f       	mov	r24, r18
    2de6:	0e 94 28 13 	call	0x2650	; 0x2650 <HLCD_voidSendData>
		case LCD_LINE_2: HLCD_voidSendCommand(0x80 + 64 + A_u8LinePos); break;
	}
}
void HLCD_voidSendString(u8 *A_u8PtrString)
{
	while (*A_u8PtrString !='\0')
    2dea:	e9 81       	ldd	r30, Y+1	; 0x01
    2dec:	fa 81       	ldd	r31, Y+2	; 0x02
    2dee:	80 81       	ld	r24, Z
    2df0:	88 23       	and	r24, r24
    2df2:	81 f7       	brne	.-32     	; 0x2dd4 <HLCD_voidSendString+0x10>
	{
		HLCD_voidSendData(*A_u8PtrString ++);
	}
}
    2df4:	0f 90       	pop	r0
    2df6:	0f 90       	pop	r0
    2df8:	cf 91       	pop	r28
    2dfa:	df 91       	pop	r29
    2dfc:	08 95       	ret

00002dfe <HLCD_voidDisplayChar>:

void HLCD_voidDisplayChar(u8 A_u8Char)
{
    2dfe:	df 93       	push	r29
    2e00:	cf 93       	push	r28
    2e02:	0f 92       	push	r0
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
    2e08:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidSendData(A_u8Char);
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
    2e0c:	0e 94 28 13 	call	0x2650	; 0x2650 <HLCD_voidSendData>
}
    2e10:	0f 90       	pop	r0
    2e12:	cf 91       	pop	r28
    2e14:	df 91       	pop	r29
    2e16:	08 95       	ret

00002e18 <HLCD_voidDisplayNum>:

void HLCD_voidDisplayNum(s32 A_s32Number)
{
    2e18:	ef 92       	push	r14
    2e1a:	ff 92       	push	r15
    2e1c:	0f 93       	push	r16
    2e1e:	1f 93       	push	r17
    2e20:	df 93       	push	r29
    2e22:	cf 93       	push	r28
    2e24:	cd b7       	in	r28, 0x3d	; 61
    2e26:	de b7       	in	r29, 0x3e	; 62
    2e28:	29 97       	sbiw	r28, 0x09	; 9
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	cd bf       	out	0x3d, r28	; 61
    2e34:	6e 83       	std	Y+6, r22	; 0x06
    2e36:	7f 83       	std	Y+7, r23	; 0x07
    2e38:	88 87       	std	Y+8, r24	; 0x08
    2e3a:	99 87       	std	Y+9, r25	; 0x09
	if(A_s32Number==0)
    2e3c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e3e:	9f 81       	ldd	r25, Y+7	; 0x07
    2e40:	a8 85       	ldd	r26, Y+8	; 0x08
    2e42:	b9 85       	ldd	r27, Y+9	; 0x09
    2e44:	00 97       	sbiw	r24, 0x00	; 0
    2e46:	a1 05       	cpc	r26, r1
    2e48:	b1 05       	cpc	r27, r1
    2e4a:	21 f4       	brne	.+8      	; 0x2e54 <HLCD_voidDisplayNum+0x3c>
	{
		HLCD_voidDisplayChar('0');
    2e4c:	80 e3       	ldi	r24, 0x30	; 48
    2e4e:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <HLCD_voidDisplayChar>
    2e52:	ba c0       	rjmp	.+372    	; 0x2fc8 <HLCD_voidDisplayNum+0x1b0>
		return;
	}
	u32 L_u32Num=0;
    2e54:	1a 82       	std	Y+2, r1	; 0x02
    2e56:	1b 82       	std	Y+3, r1	; 0x03
    2e58:	1c 82       	std	Y+4, r1	; 0x04
    2e5a:	1d 82       	std	Y+5, r1	; 0x05
	u8 flag=0;
    2e5c:	19 82       	std	Y+1, r1	; 0x01
	if (A_s32Number < 0)
    2e5e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e60:	9f 81       	ldd	r25, Y+7	; 0x07
    2e62:	a8 85       	ldd	r26, Y+8	; 0x08
    2e64:	b9 85       	ldd	r27, Y+9	; 0x09
    2e66:	bb 23       	and	r27, r27
    2e68:	44 f5       	brge	.+80     	; 0x2eba <HLCD_voidDisplayNum+0xa2>
	{
		HLCD_voidDisplayChar('-');
    2e6a:	8d e2       	ldi	r24, 0x2D	; 45
    2e6c:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <HLCD_voidDisplayChar>
		A_s32Number*=-1;
    2e70:	8e 81       	ldd	r24, Y+6	; 0x06
    2e72:	9f 81       	ldd	r25, Y+7	; 0x07
    2e74:	a8 85       	ldd	r26, Y+8	; 0x08
    2e76:	b9 85       	ldd	r27, Y+9	; 0x09
    2e78:	b0 95       	com	r27
    2e7a:	a0 95       	com	r26
    2e7c:	90 95       	com	r25
    2e7e:	81 95       	neg	r24
    2e80:	9f 4f       	sbci	r25, 0xFF	; 255
    2e82:	af 4f       	sbci	r26, 0xFF	; 255
    2e84:	bf 4f       	sbci	r27, 0xFF	; 255
    2e86:	8e 83       	std	Y+6, r24	; 0x06
    2e88:	9f 83       	std	Y+7, r25	; 0x07
    2e8a:	a8 87       	std	Y+8, r26	; 0x08
    2e8c:	b9 87       	std	Y+9, r27	; 0x09
    2e8e:	15 c0       	rjmp	.+42     	; 0x2eba <HLCD_voidDisplayNum+0xa2>
	}
	while ((A_s32Number % 10) == 0)
		{
			flag++;
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	8f 5f       	subi	r24, 0xFF	; 255
    2e94:	89 83       	std	Y+1, r24	; 0x01
			A_s32Number/=10;
    2e96:	8e 81       	ldd	r24, Y+6	; 0x06
    2e98:	9f 81       	ldd	r25, Y+7	; 0x07
    2e9a:	a8 85       	ldd	r26, Y+8	; 0x08
    2e9c:	b9 85       	ldd	r27, Y+9	; 0x09
    2e9e:	2a e0       	ldi	r18, 0x0A	; 10
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e0       	ldi	r20, 0x00	; 0
    2ea4:	50 e0       	ldi	r21, 0x00	; 0
    2ea6:	bc 01       	movw	r22, r24
    2ea8:	cd 01       	movw	r24, r26
    2eaa:	0e 94 ae 1b 	call	0x375c	; 0x375c <__divmodsi4>
    2eae:	da 01       	movw	r26, r20
    2eb0:	c9 01       	movw	r24, r18
    2eb2:	8e 83       	std	Y+6, r24	; 0x06
    2eb4:	9f 83       	std	Y+7, r25	; 0x07
    2eb6:	a8 87       	std	Y+8, r26	; 0x08
    2eb8:	b9 87       	std	Y+9, r27	; 0x09
	if (A_s32Number < 0)
	{
		HLCD_voidDisplayChar('-');
		A_s32Number*=-1;
	}
	while ((A_s32Number % 10) == 0)
    2eba:	8e 81       	ldd	r24, Y+6	; 0x06
    2ebc:	9f 81       	ldd	r25, Y+7	; 0x07
    2ebe:	a8 85       	ldd	r26, Y+8	; 0x08
    2ec0:	b9 85       	ldd	r27, Y+9	; 0x09
    2ec2:	2a e0       	ldi	r18, 0x0A	; 10
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	40 e0       	ldi	r20, 0x00	; 0
    2ec8:	50 e0       	ldi	r21, 0x00	; 0
    2eca:	bc 01       	movw	r22, r24
    2ecc:	cd 01       	movw	r24, r26
    2ece:	0e 94 ae 1b 	call	0x375c	; 0x375c <__divmodsi4>
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	00 97       	sbiw	r24, 0x00	; 0
    2ed8:	a1 05       	cpc	r26, r1
    2eda:	b1 05       	cpc	r27, r1
    2edc:	c9 f2       	breq	.-78     	; 0x2e90 <HLCD_voidDisplayNum+0x78>
    2ede:	36 c0       	rjmp	.+108    	; 0x2f4c <HLCD_voidDisplayNum+0x134>
			flag++;
			A_s32Number/=10;
		}
	while (A_s32Number !=0)
	{
		L_u32Num=((L_u32Num*10)+(A_s32Number%10));
    2ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ee4:	ac 81       	ldd	r26, Y+4	; 0x04
    2ee6:	bd 81       	ldd	r27, Y+5	; 0x05
    2ee8:	2a e0       	ldi	r18, 0x0A	; 10
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	40 e0       	ldi	r20, 0x00	; 0
    2eee:	50 e0       	ldi	r21, 0x00	; 0
    2ef0:	bc 01       	movw	r22, r24
    2ef2:	cd 01       	movw	r24, r26
    2ef4:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <__mulsi3>
    2ef8:	7b 01       	movw	r14, r22
    2efa:	8c 01       	movw	r16, r24
    2efc:	8e 81       	ldd	r24, Y+6	; 0x06
    2efe:	9f 81       	ldd	r25, Y+7	; 0x07
    2f00:	a8 85       	ldd	r26, Y+8	; 0x08
    2f02:	b9 85       	ldd	r27, Y+9	; 0x09
    2f04:	2a e0       	ldi	r18, 0x0A	; 10
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	40 e0       	ldi	r20, 0x00	; 0
    2f0a:	50 e0       	ldi	r21, 0x00	; 0
    2f0c:	bc 01       	movw	r22, r24
    2f0e:	cd 01       	movw	r24, r26
    2f10:	0e 94 ae 1b 	call	0x375c	; 0x375c <__divmodsi4>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	8e 0d       	add	r24, r14
    2f1a:	9f 1d       	adc	r25, r15
    2f1c:	a0 1f       	adc	r26, r16
    2f1e:	b1 1f       	adc	r27, r17
    2f20:	8a 83       	std	Y+2, r24	; 0x02
    2f22:	9b 83       	std	Y+3, r25	; 0x03
    2f24:	ac 83       	std	Y+4, r26	; 0x04
    2f26:	bd 83       	std	Y+5, r27	; 0x05
		A_s32Number/=10;
    2f28:	8e 81       	ldd	r24, Y+6	; 0x06
    2f2a:	9f 81       	ldd	r25, Y+7	; 0x07
    2f2c:	a8 85       	ldd	r26, Y+8	; 0x08
    2f2e:	b9 85       	ldd	r27, Y+9	; 0x09
    2f30:	2a e0       	ldi	r18, 0x0A	; 10
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	40 e0       	ldi	r20, 0x00	; 0
    2f36:	50 e0       	ldi	r21, 0x00	; 0
    2f38:	bc 01       	movw	r22, r24
    2f3a:	cd 01       	movw	r24, r26
    2f3c:	0e 94 ae 1b 	call	0x375c	; 0x375c <__divmodsi4>
    2f40:	da 01       	movw	r26, r20
    2f42:	c9 01       	movw	r24, r18
    2f44:	8e 83       	std	Y+6, r24	; 0x06
    2f46:	9f 83       	std	Y+7, r25	; 0x07
    2f48:	a8 87       	std	Y+8, r26	; 0x08
    2f4a:	b9 87       	std	Y+9, r27	; 0x09
	while ((A_s32Number % 10) == 0)
		{
			flag++;
			A_s32Number/=10;
		}
	while (A_s32Number !=0)
    2f4c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f4e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f50:	a8 85       	ldd	r26, Y+8	; 0x08
    2f52:	b9 85       	ldd	r27, Y+9	; 0x09
    2f54:	00 97       	sbiw	r24, 0x00	; 0
    2f56:	a1 05       	cpc	r26, r1
    2f58:	b1 05       	cpc	r27, r1
    2f5a:	11 f6       	brne	.-124    	; 0x2ee0 <HLCD_voidDisplayNum+0xc8>
    2f5c:	23 c0       	rjmp	.+70     	; 0x2fa4 <HLCD_voidDisplayNum+0x18c>
		L_u32Num=((L_u32Num*10)+(A_s32Number%10));
		A_s32Number/=10;
	}
	while (L_u32Num >0)
	{
		HLCD_voidSendData((L_u32Num%10)+48);
    2f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f60:	9b 81       	ldd	r25, Y+3	; 0x03
    2f62:	ac 81       	ldd	r26, Y+4	; 0x04
    2f64:	bd 81       	ldd	r27, Y+5	; 0x05
    2f66:	2a e0       	ldi	r18, 0x0A	; 10
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e0       	ldi	r20, 0x00	; 0
    2f6c:	50 e0       	ldi	r21, 0x00	; 0
    2f6e:	bc 01       	movw	r22, r24
    2f70:	cd 01       	movw	r24, r26
    2f72:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__udivmodsi4>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	80 5d       	subi	r24, 0xD0	; 208
    2f7c:	0e 94 28 13 	call	0x2650	; 0x2650 <HLCD_voidSendData>
		L_u32Num/=10;
    2f80:	8a 81       	ldd	r24, Y+2	; 0x02
    2f82:	9b 81       	ldd	r25, Y+3	; 0x03
    2f84:	ac 81       	ldd	r26, Y+4	; 0x04
    2f86:	bd 81       	ldd	r27, Y+5	; 0x05
    2f88:	2a e0       	ldi	r18, 0x0A	; 10
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	40 e0       	ldi	r20, 0x00	; 0
    2f8e:	50 e0       	ldi	r21, 0x00	; 0
    2f90:	bc 01       	movw	r22, r24
    2f92:	cd 01       	movw	r24, r26
    2f94:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__udivmodsi4>
    2f98:	da 01       	movw	r26, r20
    2f9a:	c9 01       	movw	r24, r18
    2f9c:	8a 83       	std	Y+2, r24	; 0x02
    2f9e:	9b 83       	std	Y+3, r25	; 0x03
    2fa0:	ac 83       	std	Y+4, r26	; 0x04
    2fa2:	bd 83       	std	Y+5, r27	; 0x05
	while (A_s32Number !=0)
	{
		L_u32Num=((L_u32Num*10)+(A_s32Number%10));
		A_s32Number/=10;
	}
	while (L_u32Num >0)
    2fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa8:	ac 81       	ldd	r26, Y+4	; 0x04
    2faa:	bd 81       	ldd	r27, Y+5	; 0x05
    2fac:	00 97       	sbiw	r24, 0x00	; 0
    2fae:	a1 05       	cpc	r26, r1
    2fb0:	b1 05       	cpc	r27, r1
    2fb2:	a9 f6       	brne	.-86     	; 0x2f5e <HLCD_voidDisplayNum+0x146>
    2fb4:	06 c0       	rjmp	.+12     	; 0x2fc2 <HLCD_voidDisplayNum+0x1aa>
		HLCD_voidSendData((L_u32Num%10)+48);
		L_u32Num/=10;
	}
	while (flag !=0)
	{
		HLCD_voidDisplayChar('0');
    2fb6:	80 e3       	ldi	r24, 0x30	; 48
    2fb8:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <HLCD_voidDisplayChar>
		flag--;
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
    2fbe:	81 50       	subi	r24, 0x01	; 1
    2fc0:	89 83       	std	Y+1, r24	; 0x01
	while (L_u32Num >0)
	{
		HLCD_voidSendData((L_u32Num%10)+48);
		L_u32Num/=10;
	}
	while (flag !=0)
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	88 23       	and	r24, r24
    2fc6:	b9 f7       	brne	.-18     	; 0x2fb6 <HLCD_voidDisplayNum+0x19e>
	{
		HLCD_voidDisplayChar('0');
		flag--;
	}
}
    2fc8:	29 96       	adiw	r28, 0x09	; 9
    2fca:	0f b6       	in	r0, 0x3f	; 63
    2fcc:	f8 94       	cli
    2fce:	de bf       	out	0x3e, r29	; 62
    2fd0:	0f be       	out	0x3f, r0	; 63
    2fd2:	cd bf       	out	0x3d, r28	; 61
    2fd4:	cf 91       	pop	r28
    2fd6:	df 91       	pop	r29
    2fd8:	1f 91       	pop	r17
    2fda:	0f 91       	pop	r16
    2fdc:	ff 90       	pop	r15
    2fde:	ef 90       	pop	r14
    2fe0:	08 95       	ret

00002fe2 <HLCD_voidSaveCustomChar>:

void HLCD_voidSaveCustomChar (u8 A_u8CGRAM_Index,u8 *A_u8CustomArray)
{
    2fe2:	df 93       	push	r29
    2fe4:	cf 93       	push	r28
    2fe6:	00 d0       	rcall	.+0      	; 0x2fe8 <HLCD_voidSaveCustomChar+0x6>
    2fe8:	00 d0       	rcall	.+0      	; 0x2fea <HLCD_voidSaveCustomChar+0x8>
    2fea:	cd b7       	in	r28, 0x3d	; 61
    2fec:	de b7       	in	r29, 0x3e	; 62
    2fee:	8a 83       	std	Y+2, r24	; 0x02
    2ff0:	7c 83       	std	Y+4, r23	; 0x04
    2ff2:	6b 83       	std	Y+3, r22	; 0x03
	HLCD_voidSendCommand(CGRAM_Init + (A_u8CGRAM_Index * CGRAM_AvailableChars));
    2ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff6:	88 2f       	mov	r24, r24
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	08 96       	adiw	r24, 0x08	; 8
    2ffc:	88 0f       	add	r24, r24
    2ffe:	99 1f       	adc	r25, r25
    3000:	88 0f       	add	r24, r24
    3002:	99 1f       	adc	r25, r25
    3004:	88 0f       	add	r24, r24
    3006:	99 1f       	adc	r25, r25
    3008:	0e 94 05 12 	call	0x240a	; 0x240a <HLCD_voidSendCommand>

	for (u8 L_u8Index=0; L_u8Index<CGRAM_AvailableChars; L_u8Index++)
    300c:	19 82       	std	Y+1, r1	; 0x01
    300e:	0e c0       	rjmp	.+28     	; 0x302c <HLCD_voidSaveCustomChar+0x4a>
	{
		HLCD_voidSendData(A_u8CustomArray[L_u8Index]);
    3010:	89 81       	ldd	r24, Y+1	; 0x01
    3012:	28 2f       	mov	r18, r24
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	8b 81       	ldd	r24, Y+3	; 0x03
    3018:	9c 81       	ldd	r25, Y+4	; 0x04
    301a:	fc 01       	movw	r30, r24
    301c:	e2 0f       	add	r30, r18
    301e:	f3 1f       	adc	r31, r19
    3020:	80 81       	ld	r24, Z
    3022:	0e 94 28 13 	call	0x2650	; 0x2650 <HLCD_voidSendData>

void HLCD_voidSaveCustomChar (u8 A_u8CGRAM_Index,u8 *A_u8CustomArray)
{
	HLCD_voidSendCommand(CGRAM_Init + (A_u8CGRAM_Index * CGRAM_AvailableChars));

	for (u8 L_u8Index=0; L_u8Index<CGRAM_AvailableChars; L_u8Index++)
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	8f 5f       	subi	r24, 0xFF	; 255
    302a:	89 83       	std	Y+1, r24	; 0x01
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	88 30       	cpi	r24, 0x08	; 8
    3030:	78 f3       	brcs	.-34     	; 0x3010 <HLCD_voidSaveCustomChar+0x2e>
	{
		HLCD_voidSendData(A_u8CustomArray[L_u8Index]);
	}
	HLCD_voidSendCommand(0x80);
    3032:	80 e8       	ldi	r24, 0x80	; 128
    3034:	0e 94 05 12 	call	0x240a	; 0x240a <HLCD_voidSendCommand>
}
    3038:	0f 90       	pop	r0
    303a:	0f 90       	pop	r0
    303c:	0f 90       	pop	r0
    303e:	0f 90       	pop	r0
    3040:	cf 91       	pop	r28
    3042:	df 91       	pop	r29
    3044:	08 95       	ret

00003046 <HLCD_voidDisplayCustomChar>:

void HLCD_voidDisplayCustomChar (u8 A_u8CGRAM_Index)
{
    3046:	df 93       	push	r29
    3048:	cf 93       	push	r28
    304a:	0f 92       	push	r0
    304c:	cd b7       	in	r28, 0x3d	; 61
    304e:	de b7       	in	r29, 0x3e	; 62
    3050:	89 83       	std	Y+1, r24	; 0x01
	if(A_u8CGRAM_Index<8)
    3052:	89 81       	ldd	r24, Y+1	; 0x01
    3054:	88 30       	cpi	r24, 0x08	; 8
    3056:	18 f4       	brcc	.+6      	; 0x305e <HLCD_voidDisplayCustomChar+0x18>
	{
		HLCD_voidSendData(A_u8CGRAM_Index);
    3058:	89 81       	ldd	r24, Y+1	; 0x01
    305a:	0e 94 28 13 	call	0x2650	; 0x2650 <HLCD_voidSendData>
	}
}
    305e:	0f 90       	pop	r0
    3060:	cf 91       	pop	r28
    3062:	df 91       	pop	r29
    3064:	08 95       	ret

00003066 <HKPD_voidInit>:
		{'1','2','3','-'},
		{'c','0','=','+'}
							};

void HKPD_voidInit(u8 A_u8PortNum)
{
    3066:	df 93       	push	r29
    3068:	cf 93       	push	r28
    306a:	0f 92       	push	r0
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
    3070:	89 83       	std	Y+1, r24	; 0x01
	G_u8PortNum=A_u8PortNum;
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	80 93 91 00 	sts	0x0091, r24
	MDIO_voidSetPortDirection(G_u8PortNum,0X0F);
    3078:	80 91 91 00 	lds	r24, 0x0091
    307c:	6f e0       	ldi	r22, 0x0F	; 15
    307e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <MDIO_voidSetPortDirection>
	MDIO_voidSetPortValue(G_u8PortNum,0XFF);
    3082:	80 91 91 00 	lds	r24, 0x0091
    3086:	6f ef       	ldi	r22, 0xFF	; 255
    3088:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <MDIO_voidSetPortValue>
}
    308c:	0f 90       	pop	r0
    308e:	cf 91       	pop	r28
    3090:	df 91       	pop	r29
    3092:	08 95       	ret

00003094 <HKPD_u8GetKeyPressed>:
u8 HKPD_u8GetKeyPressed()
{
    3094:	df 93       	push	r29
    3096:	cf 93       	push	r28
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
    309c:	61 97       	sbiw	r28, 0x11	; 17
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	cd bf       	out	0x3d, r28	; 61
	u8 L_u8PressedKey=' ';
    30a8:	80 e2       	ldi	r24, 0x20	; 32
    30aa:	89 8b       	std	Y+17, r24	; 0x11
	for(u8 col=0; col<ColNumber; col++)
    30ac:	18 8a       	std	Y+16, r1	; 0x10
    30ae:	b2 c0       	rjmp	.+356    	; 0x3214 <HKPD_u8GetKeyPressed+0x180>
	{
		MDIO_voidSetPinValue(G_u8PortNum,col,LOW);
    30b0:	80 91 91 00 	lds	r24, 0x0091
    30b4:	68 89       	ldd	r22, Y+16	; 0x10
    30b6:	40 e0       	ldi	r20, 0x00	; 0
    30b8:	0e 94 c6 0b 	call	0x178c	; 0x178c <MDIO_voidSetPinValue>
		for(u8 row=0; row<RowNumber; row++)
    30bc:	1f 86       	std	Y+15, r1	; 0x0f
    30be:	9d c0       	rjmp	.+314    	; 0x31fa <HKPD_u8GetKeyPressed+0x166>
		{
			if(MDIO_u8GetPinValue(G_u8PortNum,row+ColNumber)==LOW)
    30c0:	20 91 91 00 	lds	r18, 0x0091
    30c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    30c6:	98 2f       	mov	r25, r24
    30c8:	9c 5f       	subi	r25, 0xFC	; 252
    30ca:	82 2f       	mov	r24, r18
    30cc:	69 2f       	mov	r22, r25
    30ce:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <MDIO_u8GetPinValue>
    30d2:	88 23       	and	r24, r24
    30d4:	91 f4       	brne	.+36     	; 0x30fa <HKPD_u8GetKeyPressed+0x66>
			{
				L_u8PressedKey=G_u8Grid[row][col];
    30d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    30d8:	48 2f       	mov	r20, r24
    30da:	50 e0       	ldi	r21, 0x00	; 0
    30dc:	88 89       	ldd	r24, Y+16	; 0x10
    30de:	28 2f       	mov	r18, r24
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	ca 01       	movw	r24, r20
    30e4:	88 0f       	add	r24, r24
    30e6:	99 1f       	adc	r25, r25
    30e8:	88 0f       	add	r24, r24
    30ea:	99 1f       	adc	r25, r25
    30ec:	82 0f       	add	r24, r18
    30ee:	93 1f       	adc	r25, r19
    30f0:	fc 01       	movw	r30, r24
    30f2:	ee 58       	subi	r30, 0x8E	; 142
    30f4:	ff 4f       	sbci	r31, 0xFF	; 255
    30f6:	80 81       	ld	r24, Z
    30f8:	89 8b       	std	Y+17, r24	; 0x11
			}
			while(MDIO_u8GetPinValue(G_u8PortNum,row+ColNumber)==LOW) {}
    30fa:	20 91 91 00 	lds	r18, 0x0091
    30fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3100:	98 2f       	mov	r25, r24
    3102:	9c 5f       	subi	r25, 0xFC	; 252
    3104:	82 2f       	mov	r24, r18
    3106:	69 2f       	mov	r22, r25
    3108:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <MDIO_u8GetPinValue>
    310c:	88 23       	and	r24, r24
    310e:	a9 f3       	breq	.-22     	; 0x30fa <HKPD_u8GetKeyPressed+0x66>
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	a0 e2       	ldi	r26, 0x20	; 32
    3116:	b1 e4       	ldi	r27, 0x41	; 65
    3118:	8b 87       	std	Y+11, r24	; 0x0b
    311a:	9c 87       	std	Y+12, r25	; 0x0c
    311c:	ad 87       	std	Y+13, r26	; 0x0d
    311e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3120:	6b 85       	ldd	r22, Y+11	; 0x0b
    3122:	7c 85       	ldd	r23, Y+12	; 0x0c
    3124:	8d 85       	ldd	r24, Y+13	; 0x0d
    3126:	9e 85       	ldd	r25, Y+14	; 0x0e
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	4a e7       	ldi	r20, 0x7A	; 122
    312e:	53 e4       	ldi	r21, 0x43	; 67
    3130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	8f 83       	std	Y+7, r24	; 0x07
    313a:	98 87       	std	Y+8, r25	; 0x08
    313c:	a9 87       	std	Y+9, r26	; 0x09
    313e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3140:	6f 81       	ldd	r22, Y+7	; 0x07
    3142:	78 85       	ldd	r23, Y+8	; 0x08
    3144:	89 85       	ldd	r24, Y+9	; 0x09
    3146:	9a 85       	ldd	r25, Y+10	; 0x0a
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	40 e8       	ldi	r20, 0x80	; 128
    314e:	5f e3       	ldi	r21, 0x3F	; 63
    3150:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3154:	88 23       	and	r24, r24
    3156:	2c f4       	brge	.+10     	; 0x3162 <HKPD_u8GetKeyPressed+0xce>
		__ticks = 1;
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	9e 83       	std	Y+6, r25	; 0x06
    315e:	8d 83       	std	Y+5, r24	; 0x05
    3160:	3f c0       	rjmp	.+126    	; 0x31e0 <HKPD_u8GetKeyPressed+0x14c>
	else if (__tmp > 65535)
    3162:	6f 81       	ldd	r22, Y+7	; 0x07
    3164:	78 85       	ldd	r23, Y+8	; 0x08
    3166:	89 85       	ldd	r24, Y+9	; 0x09
    3168:	9a 85       	ldd	r25, Y+10	; 0x0a
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	3f ef       	ldi	r19, 0xFF	; 255
    316e:	4f e7       	ldi	r20, 0x7F	; 127
    3170:	57 e4       	ldi	r21, 0x47	; 71
    3172:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3176:	18 16       	cp	r1, r24
    3178:	4c f5       	brge	.+82     	; 0x31cc <HKPD_u8GetKeyPressed+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    317a:	6b 85       	ldd	r22, Y+11	; 0x0b
    317c:	7c 85       	ldd	r23, Y+12	; 0x0c
    317e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3180:	9e 85       	ldd	r25, Y+14	; 0x0e
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	40 e2       	ldi	r20, 0x20	; 32
    3188:	51 e4       	ldi	r21, 0x41	; 65
    318a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	bc 01       	movw	r22, r24
    3194:	cd 01       	movw	r24, r26
    3196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	9e 83       	std	Y+6, r25	; 0x06
    31a0:	8d 83       	std	Y+5, r24	; 0x05
    31a2:	0f c0       	rjmp	.+30     	; 0x31c2 <HKPD_u8GetKeyPressed+0x12e>
    31a4:	89 e1       	ldi	r24, 0x19	; 25
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	9c 83       	std	Y+4, r25	; 0x04
    31aa:	8b 83       	std	Y+3, r24	; 0x03
    31ac:	8b 81       	ldd	r24, Y+3	; 0x03
    31ae:	9c 81       	ldd	r25, Y+4	; 0x04
    31b0:	01 97       	sbiw	r24, 0x01	; 1
    31b2:	f1 f7       	brne	.-4      	; 0x31b0 <HKPD_u8GetKeyPressed+0x11c>
    31b4:	9c 83       	std	Y+4, r25	; 0x04
    31b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ba:	9e 81       	ldd	r25, Y+6	; 0x06
    31bc:	01 97       	sbiw	r24, 0x01	; 1
    31be:	9e 83       	std	Y+6, r25	; 0x06
    31c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c2:	8d 81       	ldd	r24, Y+5	; 0x05
    31c4:	9e 81       	ldd	r25, Y+6	; 0x06
    31c6:	00 97       	sbiw	r24, 0x00	; 0
    31c8:	69 f7       	brne	.-38     	; 0x31a4 <HKPD_u8GetKeyPressed+0x110>
    31ca:	14 c0       	rjmp	.+40     	; 0x31f4 <HKPD_u8GetKeyPressed+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31cc:	6f 81       	ldd	r22, Y+7	; 0x07
    31ce:	78 85       	ldd	r23, Y+8	; 0x08
    31d0:	89 85       	ldd	r24, Y+9	; 0x09
    31d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d8:	dc 01       	movw	r26, r24
    31da:	cb 01       	movw	r24, r22
    31dc:	9e 83       	std	Y+6, r25	; 0x06
    31de:	8d 83       	std	Y+5, r24	; 0x05
    31e0:	8d 81       	ldd	r24, Y+5	; 0x05
    31e2:	9e 81       	ldd	r25, Y+6	; 0x06
    31e4:	9a 83       	std	Y+2, r25	; 0x02
    31e6:	89 83       	std	Y+1, r24	; 0x01
    31e8:	89 81       	ldd	r24, Y+1	; 0x01
    31ea:	9a 81       	ldd	r25, Y+2	; 0x02
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <HKPD_u8GetKeyPressed+0x158>
    31f0:	9a 83       	std	Y+2, r25	; 0x02
    31f2:	89 83       	std	Y+1, r24	; 0x01
{
	u8 L_u8PressedKey=' ';
	for(u8 col=0; col<ColNumber; col++)
	{
		MDIO_voidSetPinValue(G_u8PortNum,col,LOW);
		for(u8 row=0; row<RowNumber; row++)
    31f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    31f6:	8f 5f       	subi	r24, 0xFF	; 255
    31f8:	8f 87       	std	Y+15, r24	; 0x0f
    31fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    31fc:	84 30       	cpi	r24, 0x04	; 4
    31fe:	08 f4       	brcc	.+2      	; 0x3202 <HKPD_u8GetKeyPressed+0x16e>
    3200:	5f cf       	rjmp	.-322    	; 0x30c0 <HKPD_u8GetKeyPressed+0x2c>
			}
			while(MDIO_u8GetPinValue(G_u8PortNum,row+ColNumber)==LOW) {}
			_delay_ms(10);

		}
		MDIO_voidSetPinValue(G_u8PortNum,col,HIGH);
    3202:	80 91 91 00 	lds	r24, 0x0091
    3206:	68 89       	ldd	r22, Y+16	; 0x10
    3208:	41 e0       	ldi	r20, 0x01	; 1
    320a:	0e 94 c6 0b 	call	0x178c	; 0x178c <MDIO_voidSetPinValue>
	MDIO_voidSetPortValue(G_u8PortNum,0XFF);
}
u8 HKPD_u8GetKeyPressed()
{
	u8 L_u8PressedKey=' ';
	for(u8 col=0; col<ColNumber; col++)
    320e:	88 89       	ldd	r24, Y+16	; 0x10
    3210:	8f 5f       	subi	r24, 0xFF	; 255
    3212:	88 8b       	std	Y+16, r24	; 0x10
    3214:	88 89       	ldd	r24, Y+16	; 0x10
    3216:	84 30       	cpi	r24, 0x04	; 4
    3218:	08 f4       	brcc	.+2      	; 0x321c <HKPD_u8GetKeyPressed+0x188>
    321a:	4a cf       	rjmp	.-364    	; 0x30b0 <HKPD_u8GetKeyPressed+0x1c>
			_delay_ms(10);

		}
		MDIO_voidSetPinValue(G_u8PortNum,col,HIGH);
	}
	return L_u8PressedKey;
    321c:	89 89       	ldd	r24, Y+17	; 0x11
}
    321e:	61 96       	adiw	r28, 0x11	; 17
    3220:	0f b6       	in	r0, 0x3f	; 63
    3222:	f8 94       	cli
    3224:	de bf       	out	0x3e, r29	; 62
    3226:	0f be       	out	0x3f, r0	; 63
    3228:	cd bf       	out	0x3d, r28	; 61
    322a:	cf 91       	pop	r28
    322c:	df 91       	pop	r29
    322e:	08 95       	ret

00003230 <HDCM_voidInitPort>:
#include "DC_Motor.h"
#include "../../MCAL/DIO/DIO.h"


void HDCM_voidInitPort(u8 A_u8PortNum)
{
    3230:	df 93       	push	r29
    3232:	cf 93       	push	r28
    3234:	0f 92       	push	r0
    3236:	cd b7       	in	r28, 0x3d	; 61
    3238:	de b7       	in	r29, 0x3e	; 62
    323a:	89 83       	std	Y+1, r24	; 0x01
	G_u8PortNum=A_u8PortNum;
    323c:	89 81       	ldd	r24, Y+1	; 0x01
    323e:	80 93 91 00 	sts	0x0091, r24
	MDIO_voidSetPinDirection(G_u8PortNum , PIN0 , OUTPUT);
    3242:	80 91 91 00 	lds	r24, 0x0091
    3246:	60 e0       	ldi	r22, 0x00	; 0
    3248:	41 e0       	ldi	r20, 0x01	; 1
    324a:	0e 94 af 0a 	call	0x155e	; 0x155e <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(G_u8PortNum , PIN1 , OUTPUT);
    324e:	80 91 91 00 	lds	r24, 0x0091
    3252:	61 e0       	ldi	r22, 0x01	; 1
    3254:	41 e0       	ldi	r20, 0x01	; 1
    3256:	0e 94 af 0a 	call	0x155e	; 0x155e <MDIO_voidSetPinDirection>
}
    325a:	0f 90       	pop	r0
    325c:	cf 91       	pop	r28
    325e:	df 91       	pop	r29
    3260:	08 95       	ret

00003262 <HDCM_voidRotateClockWise>:
void HDCM_voidRotateClockWise()
{
    3262:	df 93       	push	r29
    3264:	cf 93       	push	r28
    3266:	cd b7       	in	r28, 0x3d	; 61
    3268:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(G_u8PortNum , PIN0 , HIGH);
    326a:	80 91 91 00 	lds	r24, 0x0091
    326e:	60 e0       	ldi	r22, 0x00	; 0
    3270:	41 e0       	ldi	r20, 0x01	; 1
    3272:	0e 94 c6 0b 	call	0x178c	; 0x178c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(G_u8PortNum , PIN1 , LOW);
    3276:	80 91 91 00 	lds	r24, 0x0091
    327a:	61 e0       	ldi	r22, 0x01	; 1
    327c:	40 e0       	ldi	r20, 0x00	; 0
    327e:	0e 94 c6 0b 	call	0x178c	; 0x178c <MDIO_voidSetPinValue>
}
    3282:	cf 91       	pop	r28
    3284:	df 91       	pop	r29
    3286:	08 95       	ret

00003288 <HDCM_voidRotateAntiClockWise>:
void HDCM_voidRotateAntiClockWise()
{
    3288:	df 93       	push	r29
    328a:	cf 93       	push	r28
    328c:	cd b7       	in	r28, 0x3d	; 61
    328e:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(PORTD , PIN0 , LOW);
    3290:	83 e0       	ldi	r24, 0x03	; 3
    3292:	60 e0       	ldi	r22, 0x00	; 0
    3294:	40 e0       	ldi	r20, 0x00	; 0
    3296:	0e 94 c6 0b 	call	0x178c	; 0x178c <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(PORTD , PIN1 , HIGH);
    329a:	83 e0       	ldi	r24, 0x03	; 3
    329c:	61 e0       	ldi	r22, 0x01	; 1
    329e:	41 e0       	ldi	r20, 0x01	; 1
    32a0:	0e 94 c6 0b 	call	0x178c	; 0x178c <MDIO_voidSetPinValue>
}
    32a4:	cf 91       	pop	r28
    32a6:	df 91       	pop	r29
    32a8:	08 95       	ret

000032aa <PWM_Control0>:
#include "../MCAL/DIO/DIO.h"
#include <util/delay.h>


void PWM_Control0(void)
{
    32aa:	df 93       	push	r29
    32ac:	cf 93       	push	r28
    32ae:	cd b7       	in	r28, 0x3d	; 61
    32b0:	de b7       	in	r29, 0x3e	; 62
}
    32b2:	cf 91       	pop	r28
    32b4:	df 91       	pop	r29
    32b6:	08 95       	ret

000032b8 <main>:


int main()
{
    32b8:	df 93       	push	r29
    32ba:	cf 93       	push	r28
    32bc:	cd b7       	in	r28, 0x3d	; 61
    32be:	de b7       	in	r29, 0x3e	; 62
    32c0:	ea 97       	sbiw	r28, 0x3a	; 58
    32c2:	0f b6       	in	r0, 0x3f	; 63
    32c4:	f8 94       	cli
    32c6:	de bf       	out	0x3e, r29	; 62
    32c8:	0f be       	out	0x3f, r0	; 63
    32ca:	cd bf       	out	0x3d, r28	; 61


		MGIR_voidEnable();
    32cc:	0e 94 93 0a 	call	0x1526	; 0x1526 <MGIR_voidEnable>

		//Timer 0
	    MTIMER_voidInit(0);
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	0e 94 36 07 	call	0xe6c	; 0xe6c <MTIMER_voidInit>

	    MTIMER_voidEnable(0);
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <MTIMER_voidEnable>

	    MDIO_voidSetPinDirection(PORTB, PIN3, OUTPUT);
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	63 e0       	ldi	r22, 0x03	; 3
    32e0:	41 e0       	ldi	r20, 0x01	; 1
    32e2:	0e 94 af 0a 	call	0x155e	; 0x155e <MDIO_voidSetPinDirection>

	    MTimer_voidSetCallBack(0, PWM_Control0);
    32e6:	25 e5       	ldi	r18, 0x55	; 85
    32e8:	39 e1       	ldi	r19, 0x19	; 25
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	b9 01       	movw	r22, r18
    32ee:	0e 94 51 08 	call	0x10a2	; 0x10a2 <MTimer_voidSetCallBack>

	    MTIMER_voidStart(0);
    32f2:	80 e0       	ldi	r24, 0x00	; 0
    32f4:	0e 94 7f 07 	call	0xefe	; 0xefe <MTIMER_voidStart>


	    while (1)
	    {
	    	for (u8 i=1; i<255; i++)
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	8a af       	std	Y+58, r24	; 0x3a
    32fc:	79 c0       	rjmp	.+242    	; 0x33f0 <main+0x138>
	    			{
	    				MTIMR_voidSetCompareMatch(0, i);
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	6a ad       	ldd	r22, Y+58	; 0x3a
    3302:	0e 94 ac 07 	call	0xf58	; 0xf58 <MTIMR_voidSetCompareMatch>
    3306:	80 e0       	ldi	r24, 0x00	; 0
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	a8 e4       	ldi	r26, 0x48	; 72
    330c:	b3 e4       	ldi	r27, 0x43	; 67
    330e:	8d ab       	std	Y+53, r24	; 0x35
    3310:	9e ab       	std	Y+54, r25	; 0x36
    3312:	af ab       	std	Y+55, r26	; 0x37
    3314:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3316:	6d a9       	ldd	r22, Y+53	; 0x35
    3318:	7e a9       	ldd	r23, Y+54	; 0x36
    331a:	8f a9       	ldd	r24, Y+55	; 0x37
    331c:	98 ad       	ldd	r25, Y+56	; 0x38
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	4a e7       	ldi	r20, 0x7A	; 122
    3324:	53 e4       	ldi	r21, 0x43	; 67
    3326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	89 ab       	std	Y+49, r24	; 0x31
    3330:	9a ab       	std	Y+50, r25	; 0x32
    3332:	ab ab       	std	Y+51, r26	; 0x33
    3334:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3336:	69 a9       	ldd	r22, Y+49	; 0x31
    3338:	7a a9       	ldd	r23, Y+50	; 0x32
    333a:	8b a9       	ldd	r24, Y+51	; 0x33
    333c:	9c a9       	ldd	r25, Y+52	; 0x34
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	40 e8       	ldi	r20, 0x80	; 128
    3344:	5f e3       	ldi	r21, 0x3F	; 63
    3346:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    334a:	88 23       	and	r24, r24
    334c:	2c f4       	brge	.+10     	; 0x3358 <main+0xa0>
		__ticks = 1;
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	98 ab       	std	Y+48, r25	; 0x30
    3354:	8f a7       	std	Y+47, r24	; 0x2f
    3356:	3f c0       	rjmp	.+126    	; 0x33d6 <main+0x11e>
	else if (__tmp > 65535)
    3358:	69 a9       	ldd	r22, Y+49	; 0x31
    335a:	7a a9       	ldd	r23, Y+50	; 0x32
    335c:	8b a9       	ldd	r24, Y+51	; 0x33
    335e:	9c a9       	ldd	r25, Y+52	; 0x34
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	3f ef       	ldi	r19, 0xFF	; 255
    3364:	4f e7       	ldi	r20, 0x7F	; 127
    3366:	57 e4       	ldi	r21, 0x47	; 71
    3368:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    336c:	18 16       	cp	r1, r24
    336e:	4c f5       	brge	.+82     	; 0x33c2 <main+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3370:	6d a9       	ldd	r22, Y+53	; 0x35
    3372:	7e a9       	ldd	r23, Y+54	; 0x36
    3374:	8f a9       	ldd	r24, Y+55	; 0x37
    3376:	98 ad       	ldd	r25, Y+56	; 0x38
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	40 e2       	ldi	r20, 0x20	; 32
    337e:	51 e4       	ldi	r21, 0x41	; 65
    3380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3384:	dc 01       	movw	r26, r24
    3386:	cb 01       	movw	r24, r22
    3388:	bc 01       	movw	r22, r24
    338a:	cd 01       	movw	r24, r26
    338c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	98 ab       	std	Y+48, r25	; 0x30
    3396:	8f a7       	std	Y+47, r24	; 0x2f
    3398:	0f c0       	rjmp	.+30     	; 0x33b8 <main+0x100>
    339a:	89 e1       	ldi	r24, 0x19	; 25
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	9e a7       	std	Y+46, r25	; 0x2e
    33a0:	8d a7       	std	Y+45, r24	; 0x2d
    33a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    33a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    33a6:	01 97       	sbiw	r24, 0x01	; 1
    33a8:	f1 f7       	brne	.-4      	; 0x33a6 <main+0xee>
    33aa:	9e a7       	std	Y+46, r25	; 0x2e
    33ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    33b0:	98 a9       	ldd	r25, Y+48	; 0x30
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	98 ab       	std	Y+48, r25	; 0x30
    33b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    33ba:	98 a9       	ldd	r25, Y+48	; 0x30
    33bc:	00 97       	sbiw	r24, 0x00	; 0
    33be:	69 f7       	brne	.-38     	; 0x339a <main+0xe2>
    33c0:	14 c0       	rjmp	.+40     	; 0x33ea <main+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c2:	69 a9       	ldd	r22, Y+49	; 0x31
    33c4:	7a a9       	ldd	r23, Y+50	; 0x32
    33c6:	8b a9       	ldd	r24, Y+51	; 0x33
    33c8:	9c a9       	ldd	r25, Y+52	; 0x34
    33ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	98 ab       	std	Y+48, r25	; 0x30
    33d4:	8f a7       	std	Y+47, r24	; 0x2f
    33d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    33d8:	98 a9       	ldd	r25, Y+48	; 0x30
    33da:	9c a7       	std	Y+44, r25	; 0x2c
    33dc:	8b a7       	std	Y+43, r24	; 0x2b
    33de:	8b a5       	ldd	r24, Y+43	; 0x2b
    33e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    33e2:	01 97       	sbiw	r24, 0x01	; 1
    33e4:	f1 f7       	brne	.-4      	; 0x33e2 <main+0x12a>
    33e6:	9c a7       	std	Y+44, r25	; 0x2c
    33e8:	8b a7       	std	Y+43, r24	; 0x2b
	    MTIMER_voidStart(0);


	    while (1)
	    {
	    	for (u8 i=1; i<255; i++)
    33ea:	8a ad       	ldd	r24, Y+58	; 0x3a
    33ec:	8f 5f       	subi	r24, 0xFF	; 255
    33ee:	8a af       	std	Y+58, r24	; 0x3a
    33f0:	8a ad       	ldd	r24, Y+58	; 0x3a
    33f2:	8f 3f       	cpi	r24, 0xFF	; 255
    33f4:	09 f0       	breq	.+2      	; 0x33f8 <main+0x140>
    33f6:	83 cf       	rjmp	.-250    	; 0x32fe <main+0x46>
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	aa ef       	ldi	r26, 0xFA	; 250
    33fe:	b3 e4       	ldi	r27, 0x43	; 67
    3400:	8f a3       	std	Y+39, r24	; 0x27
    3402:	98 a7       	std	Y+40, r25	; 0x28
    3404:	a9 a7       	std	Y+41, r26	; 0x29
    3406:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3408:	6f a1       	ldd	r22, Y+39	; 0x27
    340a:	78 a5       	ldd	r23, Y+40	; 0x28
    340c:	89 a5       	ldd	r24, Y+41	; 0x29
    340e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3410:	20 e0       	ldi	r18, 0x00	; 0
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	4a e7       	ldi	r20, 0x7A	; 122
    3416:	53 e4       	ldi	r21, 0x43	; 67
    3418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341c:	dc 01       	movw	r26, r24
    341e:	cb 01       	movw	r24, r22
    3420:	8b a3       	std	Y+35, r24	; 0x23
    3422:	9c a3       	std	Y+36, r25	; 0x24
    3424:	ad a3       	std	Y+37, r26	; 0x25
    3426:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3428:	6b a1       	ldd	r22, Y+35	; 0x23
    342a:	7c a1       	ldd	r23, Y+36	; 0x24
    342c:	8d a1       	ldd	r24, Y+37	; 0x25
    342e:	9e a1       	ldd	r25, Y+38	; 0x26
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	40 e8       	ldi	r20, 0x80	; 128
    3436:	5f e3       	ldi	r21, 0x3F	; 63
    3438:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    343c:	88 23       	and	r24, r24
    343e:	2c f4       	brge	.+10     	; 0x344a <main+0x192>
		__ticks = 1;
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	9a a3       	std	Y+34, r25	; 0x22
    3446:	89 a3       	std	Y+33, r24	; 0x21
    3448:	3f c0       	rjmp	.+126    	; 0x34c8 <main+0x210>
	else if (__tmp > 65535)
    344a:	6b a1       	ldd	r22, Y+35	; 0x23
    344c:	7c a1       	ldd	r23, Y+36	; 0x24
    344e:	8d a1       	ldd	r24, Y+37	; 0x25
    3450:	9e a1       	ldd	r25, Y+38	; 0x26
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	3f ef       	ldi	r19, 0xFF	; 255
    3456:	4f e7       	ldi	r20, 0x7F	; 127
    3458:	57 e4       	ldi	r21, 0x47	; 71
    345a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    345e:	18 16       	cp	r1, r24
    3460:	4c f5       	brge	.+82     	; 0x34b4 <main+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3462:	6f a1       	ldd	r22, Y+39	; 0x27
    3464:	78 a5       	ldd	r23, Y+40	; 0x28
    3466:	89 a5       	ldd	r24, Y+41	; 0x29
    3468:	9a a5       	ldd	r25, Y+42	; 0x2a
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	40 e2       	ldi	r20, 0x20	; 32
    3470:	51 e4       	ldi	r21, 0x41	; 65
    3472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	bc 01       	movw	r22, r24
    347c:	cd 01       	movw	r24, r26
    347e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3482:	dc 01       	movw	r26, r24
    3484:	cb 01       	movw	r24, r22
    3486:	9a a3       	std	Y+34, r25	; 0x22
    3488:	89 a3       	std	Y+33, r24	; 0x21
    348a:	0f c0       	rjmp	.+30     	; 0x34aa <main+0x1f2>
    348c:	89 e1       	ldi	r24, 0x19	; 25
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	98 a3       	std	Y+32, r25	; 0x20
    3492:	8f 8f       	std	Y+31, r24	; 0x1f
    3494:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3496:	98 a1       	ldd	r25, Y+32	; 0x20
    3498:	01 97       	sbiw	r24, 0x01	; 1
    349a:	f1 f7       	brne	.-4      	; 0x3498 <main+0x1e0>
    349c:	98 a3       	std	Y+32, r25	; 0x20
    349e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a0:	89 a1       	ldd	r24, Y+33	; 0x21
    34a2:	9a a1       	ldd	r25, Y+34	; 0x22
    34a4:	01 97       	sbiw	r24, 0x01	; 1
    34a6:	9a a3       	std	Y+34, r25	; 0x22
    34a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34aa:	89 a1       	ldd	r24, Y+33	; 0x21
    34ac:	9a a1       	ldd	r25, Y+34	; 0x22
    34ae:	00 97       	sbiw	r24, 0x00	; 0
    34b0:	69 f7       	brne	.-38     	; 0x348c <main+0x1d4>
    34b2:	14 c0       	rjmp	.+40     	; 0x34dc <main+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b4:	6b a1       	ldd	r22, Y+35	; 0x23
    34b6:	7c a1       	ldd	r23, Y+36	; 0x24
    34b8:	8d a1       	ldd	r24, Y+37	; 0x25
    34ba:	9e a1       	ldd	r25, Y+38	; 0x26
    34bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c0:	dc 01       	movw	r26, r24
    34c2:	cb 01       	movw	r24, r22
    34c4:	9a a3       	std	Y+34, r25	; 0x22
    34c6:	89 a3       	std	Y+33, r24	; 0x21
    34c8:	89 a1       	ldd	r24, Y+33	; 0x21
    34ca:	9a a1       	ldd	r25, Y+34	; 0x22
    34cc:	9e 8f       	std	Y+30, r25	; 0x1e
    34ce:	8d 8f       	std	Y+29, r24	; 0x1d
    34d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34d4:	01 97       	sbiw	r24, 0x01	; 1
    34d6:	f1 f7       	brne	.-4      	; 0x34d4 <main+0x21c>
    34d8:	9e 8f       	std	Y+30, r25	; 0x1e
    34da:	8d 8f       	std	Y+29, r24	; 0x1d
	    			{
	    				MTIMR_voidSetCompareMatch(0, i);
	    				_delay_ms(200);
	    			}
	    		 _delay_ms(500);
	    		 for (u8 i=255; i>0; i--)
    34dc:	8f ef       	ldi	r24, 0xFF	; 255
    34de:	89 af       	std	Y+57, r24	; 0x39
    34e0:	79 c0       	rjmp	.+242    	; 0x35d4 <main+0x31c>
	    			{
	    				MTIMR_voidSetCompareMatch(0, i);
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	69 ad       	ldd	r22, Y+57	; 0x39
    34e6:	0e 94 ac 07 	call	0xf58	; 0xf58 <MTIMR_voidSetCompareMatch>
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	a8 e4       	ldi	r26, 0x48	; 72
    34f0:	b3 e4       	ldi	r27, 0x43	; 67
    34f2:	89 8f       	std	Y+25, r24	; 0x19
    34f4:	9a 8f       	std	Y+26, r25	; 0x1a
    34f6:	ab 8f       	std	Y+27, r26	; 0x1b
    34f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34fa:	69 8d       	ldd	r22, Y+25	; 0x19
    34fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3500:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3502:	20 e0       	ldi	r18, 0x00	; 0
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	4a e7       	ldi	r20, 0x7A	; 122
    3508:	53 e4       	ldi	r21, 0x43	; 67
    350a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	8d 8b       	std	Y+21, r24	; 0x15
    3514:	9e 8b       	std	Y+22, r25	; 0x16
    3516:	af 8b       	std	Y+23, r26	; 0x17
    3518:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    351a:	6d 89       	ldd	r22, Y+21	; 0x15
    351c:	7e 89       	ldd	r23, Y+22	; 0x16
    351e:	8f 89       	ldd	r24, Y+23	; 0x17
    3520:	98 8d       	ldd	r25, Y+24	; 0x18
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	40 e8       	ldi	r20, 0x80	; 128
    3528:	5f e3       	ldi	r21, 0x3F	; 63
    352a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    352e:	88 23       	and	r24, r24
    3530:	2c f4       	brge	.+10     	; 0x353c <main+0x284>
		__ticks = 1;
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	9c 8b       	std	Y+20, r25	; 0x14
    3538:	8b 8b       	std	Y+19, r24	; 0x13
    353a:	3f c0       	rjmp	.+126    	; 0x35ba <main+0x302>
	else if (__tmp > 65535)
    353c:	6d 89       	ldd	r22, Y+21	; 0x15
    353e:	7e 89       	ldd	r23, Y+22	; 0x16
    3540:	8f 89       	ldd	r24, Y+23	; 0x17
    3542:	98 8d       	ldd	r25, Y+24	; 0x18
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	3f ef       	ldi	r19, 0xFF	; 255
    3548:	4f e7       	ldi	r20, 0x7F	; 127
    354a:	57 e4       	ldi	r21, 0x47	; 71
    354c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3550:	18 16       	cp	r1, r24
    3552:	4c f5       	brge	.+82     	; 0x35a6 <main+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3554:	69 8d       	ldd	r22, Y+25	; 0x19
    3556:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3558:	8b 8d       	ldd	r24, Y+27	; 0x1b
    355a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	40 e2       	ldi	r20, 0x20	; 32
    3562:	51 e4       	ldi	r21, 0x41	; 65
    3564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3568:	dc 01       	movw	r26, r24
    356a:	cb 01       	movw	r24, r22
    356c:	bc 01       	movw	r22, r24
    356e:	cd 01       	movw	r24, r26
    3570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3574:	dc 01       	movw	r26, r24
    3576:	cb 01       	movw	r24, r22
    3578:	9c 8b       	std	Y+20, r25	; 0x14
    357a:	8b 8b       	std	Y+19, r24	; 0x13
    357c:	0f c0       	rjmp	.+30     	; 0x359c <main+0x2e4>
    357e:	89 e1       	ldi	r24, 0x19	; 25
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	9a 8b       	std	Y+18, r25	; 0x12
    3584:	89 8b       	std	Y+17, r24	; 0x11
    3586:	89 89       	ldd	r24, Y+17	; 0x11
    3588:	9a 89       	ldd	r25, Y+18	; 0x12
    358a:	01 97       	sbiw	r24, 0x01	; 1
    358c:	f1 f7       	brne	.-4      	; 0x358a <main+0x2d2>
    358e:	9a 8b       	std	Y+18, r25	; 0x12
    3590:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3592:	8b 89       	ldd	r24, Y+19	; 0x13
    3594:	9c 89       	ldd	r25, Y+20	; 0x14
    3596:	01 97       	sbiw	r24, 0x01	; 1
    3598:	9c 8b       	std	Y+20, r25	; 0x14
    359a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    359c:	8b 89       	ldd	r24, Y+19	; 0x13
    359e:	9c 89       	ldd	r25, Y+20	; 0x14
    35a0:	00 97       	sbiw	r24, 0x00	; 0
    35a2:	69 f7       	brne	.-38     	; 0x357e <main+0x2c6>
    35a4:	14 c0       	rjmp	.+40     	; 0x35ce <main+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a6:	6d 89       	ldd	r22, Y+21	; 0x15
    35a8:	7e 89       	ldd	r23, Y+22	; 0x16
    35aa:	8f 89       	ldd	r24, Y+23	; 0x17
    35ac:	98 8d       	ldd	r25, Y+24	; 0x18
    35ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b2:	dc 01       	movw	r26, r24
    35b4:	cb 01       	movw	r24, r22
    35b6:	9c 8b       	std	Y+20, r25	; 0x14
    35b8:	8b 8b       	std	Y+19, r24	; 0x13
    35ba:	8b 89       	ldd	r24, Y+19	; 0x13
    35bc:	9c 89       	ldd	r25, Y+20	; 0x14
    35be:	98 8b       	std	Y+16, r25	; 0x10
    35c0:	8f 87       	std	Y+15, r24	; 0x0f
    35c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    35c4:	98 89       	ldd	r25, Y+16	; 0x10
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	f1 f7       	brne	.-4      	; 0x35c6 <main+0x30e>
    35ca:	98 8b       	std	Y+16, r25	; 0x10
    35cc:	8f 87       	std	Y+15, r24	; 0x0f
	    			{
	    				MTIMR_voidSetCompareMatch(0, i);
	    				_delay_ms(200);
	    			}
	    		 _delay_ms(500);
	    		 for (u8 i=255; i>0; i--)
    35ce:	89 ad       	ldd	r24, Y+57	; 0x39
    35d0:	81 50       	subi	r24, 0x01	; 1
    35d2:	89 af       	std	Y+57, r24	; 0x39
    35d4:	89 ad       	ldd	r24, Y+57	; 0x39
    35d6:	88 23       	and	r24, r24
    35d8:	09 f0       	breq	.+2      	; 0x35dc <main+0x324>
    35da:	83 cf       	rjmp	.-250    	; 0x34e2 <main+0x22a>
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	aa ef       	ldi	r26, 0xFA	; 250
    35e2:	b3 e4       	ldi	r27, 0x43	; 67
    35e4:	8b 87       	std	Y+11, r24	; 0x0b
    35e6:	9c 87       	std	Y+12, r25	; 0x0c
    35e8:	ad 87       	std	Y+13, r26	; 0x0d
    35ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    35f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	4a e7       	ldi	r20, 0x7A	; 122
    35fa:	53 e4       	ldi	r21, 0x43	; 67
    35fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	8f 83       	std	Y+7, r24	; 0x07
    3606:	98 87       	std	Y+8, r25	; 0x08
    3608:	a9 87       	std	Y+9, r26	; 0x09
    360a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    360c:	6f 81       	ldd	r22, Y+7	; 0x07
    360e:	78 85       	ldd	r23, Y+8	; 0x08
    3610:	89 85       	ldd	r24, Y+9	; 0x09
    3612:	9a 85       	ldd	r25, Y+10	; 0x0a
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	40 e8       	ldi	r20, 0x80	; 128
    361a:	5f e3       	ldi	r21, 0x3F	; 63
    361c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3620:	88 23       	and	r24, r24
    3622:	2c f4       	brge	.+10     	; 0x362e <main+0x376>
		__ticks = 1;
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	9e 83       	std	Y+6, r25	; 0x06
    362a:	8d 83       	std	Y+5, r24	; 0x05
    362c:	3f c0       	rjmp	.+126    	; 0x36ac <main+0x3f4>
	else if (__tmp > 65535)
    362e:	6f 81       	ldd	r22, Y+7	; 0x07
    3630:	78 85       	ldd	r23, Y+8	; 0x08
    3632:	89 85       	ldd	r24, Y+9	; 0x09
    3634:	9a 85       	ldd	r25, Y+10	; 0x0a
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	3f ef       	ldi	r19, 0xFF	; 255
    363a:	4f e7       	ldi	r20, 0x7F	; 127
    363c:	57 e4       	ldi	r21, 0x47	; 71
    363e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3642:	18 16       	cp	r1, r24
    3644:	4c f5       	brge	.+82     	; 0x3698 <main+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3646:	6b 85       	ldd	r22, Y+11	; 0x0b
    3648:	7c 85       	ldd	r23, Y+12	; 0x0c
    364a:	8d 85       	ldd	r24, Y+13	; 0x0d
    364c:	9e 85       	ldd	r25, Y+14	; 0x0e
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	40 e2       	ldi	r20, 0x20	; 32
    3654:	51 e4       	ldi	r21, 0x41	; 65
    3656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	bc 01       	movw	r22, r24
    3660:	cd 01       	movw	r24, r26
    3662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3666:	dc 01       	movw	r26, r24
    3668:	cb 01       	movw	r24, r22
    366a:	9e 83       	std	Y+6, r25	; 0x06
    366c:	8d 83       	std	Y+5, r24	; 0x05
    366e:	0f c0       	rjmp	.+30     	; 0x368e <main+0x3d6>
    3670:	89 e1       	ldi	r24, 0x19	; 25
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	9c 83       	std	Y+4, r25	; 0x04
    3676:	8b 83       	std	Y+3, r24	; 0x03
    3678:	8b 81       	ldd	r24, Y+3	; 0x03
    367a:	9c 81       	ldd	r25, Y+4	; 0x04
    367c:	01 97       	sbiw	r24, 0x01	; 1
    367e:	f1 f7       	brne	.-4      	; 0x367c <main+0x3c4>
    3680:	9c 83       	std	Y+4, r25	; 0x04
    3682:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3684:	8d 81       	ldd	r24, Y+5	; 0x05
    3686:	9e 81       	ldd	r25, Y+6	; 0x06
    3688:	01 97       	sbiw	r24, 0x01	; 1
    368a:	9e 83       	std	Y+6, r25	; 0x06
    368c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    368e:	8d 81       	ldd	r24, Y+5	; 0x05
    3690:	9e 81       	ldd	r25, Y+6	; 0x06
    3692:	00 97       	sbiw	r24, 0x00	; 0
    3694:	69 f7       	brne	.-38     	; 0x3670 <main+0x3b8>
    3696:	30 ce       	rjmp	.-928    	; 0x32f8 <main+0x40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3698:	6f 81       	ldd	r22, Y+7	; 0x07
    369a:	78 85       	ldd	r23, Y+8	; 0x08
    369c:	89 85       	ldd	r24, Y+9	; 0x09
    369e:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	9e 83       	std	Y+6, r25	; 0x06
    36aa:	8d 83       	std	Y+5, r24	; 0x05
    36ac:	8d 81       	ldd	r24, Y+5	; 0x05
    36ae:	9e 81       	ldd	r25, Y+6	; 0x06
    36b0:	9a 83       	std	Y+2, r25	; 0x02
    36b2:	89 83       	std	Y+1, r24	; 0x01
    36b4:	89 81       	ldd	r24, Y+1	; 0x01
    36b6:	9a 81       	ldd	r25, Y+2	; 0x02
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	f1 f7       	brne	.-4      	; 0x36b8 <main+0x400>
    36bc:	9a 83       	std	Y+2, r25	; 0x02
    36be:	89 83       	std	Y+1, r24	; 0x01
    36c0:	1b ce       	rjmp	.-970    	; 0x32f8 <main+0x40>

000036c2 <__mulsi3>:
    36c2:	62 9f       	mul	r22, r18
    36c4:	d0 01       	movw	r26, r0
    36c6:	73 9f       	mul	r23, r19
    36c8:	f0 01       	movw	r30, r0
    36ca:	82 9f       	mul	r24, r18
    36cc:	e0 0d       	add	r30, r0
    36ce:	f1 1d       	adc	r31, r1
    36d0:	64 9f       	mul	r22, r20
    36d2:	e0 0d       	add	r30, r0
    36d4:	f1 1d       	adc	r31, r1
    36d6:	92 9f       	mul	r25, r18
    36d8:	f0 0d       	add	r31, r0
    36da:	83 9f       	mul	r24, r19
    36dc:	f0 0d       	add	r31, r0
    36de:	74 9f       	mul	r23, r20
    36e0:	f0 0d       	add	r31, r0
    36e2:	65 9f       	mul	r22, r21
    36e4:	f0 0d       	add	r31, r0
    36e6:	99 27       	eor	r25, r25
    36e8:	72 9f       	mul	r23, r18
    36ea:	b0 0d       	add	r27, r0
    36ec:	e1 1d       	adc	r30, r1
    36ee:	f9 1f       	adc	r31, r25
    36f0:	63 9f       	mul	r22, r19
    36f2:	b0 0d       	add	r27, r0
    36f4:	e1 1d       	adc	r30, r1
    36f6:	f9 1f       	adc	r31, r25
    36f8:	bd 01       	movw	r22, r26
    36fa:	cf 01       	movw	r24, r30
    36fc:	11 24       	eor	r1, r1
    36fe:	08 95       	ret

00003700 <__udivmodqi4>:
    3700:	99 1b       	sub	r25, r25
    3702:	79 e0       	ldi	r23, 0x09	; 9
    3704:	04 c0       	rjmp	.+8      	; 0x370e <__udivmodqi4_ep>

00003706 <__udivmodqi4_loop>:
    3706:	99 1f       	adc	r25, r25
    3708:	96 17       	cp	r25, r22
    370a:	08 f0       	brcs	.+2      	; 0x370e <__udivmodqi4_ep>
    370c:	96 1b       	sub	r25, r22

0000370e <__udivmodqi4_ep>:
    370e:	88 1f       	adc	r24, r24
    3710:	7a 95       	dec	r23
    3712:	c9 f7       	brne	.-14     	; 0x3706 <__udivmodqi4_loop>
    3714:	80 95       	com	r24
    3716:	08 95       	ret

00003718 <__udivmodsi4>:
    3718:	a1 e2       	ldi	r26, 0x21	; 33
    371a:	1a 2e       	mov	r1, r26
    371c:	aa 1b       	sub	r26, r26
    371e:	bb 1b       	sub	r27, r27
    3720:	fd 01       	movw	r30, r26
    3722:	0d c0       	rjmp	.+26     	; 0x373e <__udivmodsi4_ep>

00003724 <__udivmodsi4_loop>:
    3724:	aa 1f       	adc	r26, r26
    3726:	bb 1f       	adc	r27, r27
    3728:	ee 1f       	adc	r30, r30
    372a:	ff 1f       	adc	r31, r31
    372c:	a2 17       	cp	r26, r18
    372e:	b3 07       	cpc	r27, r19
    3730:	e4 07       	cpc	r30, r20
    3732:	f5 07       	cpc	r31, r21
    3734:	20 f0       	brcs	.+8      	; 0x373e <__udivmodsi4_ep>
    3736:	a2 1b       	sub	r26, r18
    3738:	b3 0b       	sbc	r27, r19
    373a:	e4 0b       	sbc	r30, r20
    373c:	f5 0b       	sbc	r31, r21

0000373e <__udivmodsi4_ep>:
    373e:	66 1f       	adc	r22, r22
    3740:	77 1f       	adc	r23, r23
    3742:	88 1f       	adc	r24, r24
    3744:	99 1f       	adc	r25, r25
    3746:	1a 94       	dec	r1
    3748:	69 f7       	brne	.-38     	; 0x3724 <__udivmodsi4_loop>
    374a:	60 95       	com	r22
    374c:	70 95       	com	r23
    374e:	80 95       	com	r24
    3750:	90 95       	com	r25
    3752:	9b 01       	movw	r18, r22
    3754:	ac 01       	movw	r20, r24
    3756:	bd 01       	movw	r22, r26
    3758:	cf 01       	movw	r24, r30
    375a:	08 95       	ret

0000375c <__divmodsi4>:
    375c:	97 fb       	bst	r25, 7
    375e:	09 2e       	mov	r0, r25
    3760:	05 26       	eor	r0, r21
    3762:	0e d0       	rcall	.+28     	; 0x3780 <__divmodsi4_neg1>
    3764:	57 fd       	sbrc	r21, 7
    3766:	04 d0       	rcall	.+8      	; 0x3770 <__divmodsi4_neg2>
    3768:	d7 df       	rcall	.-82     	; 0x3718 <__udivmodsi4>
    376a:	0a d0       	rcall	.+20     	; 0x3780 <__divmodsi4_neg1>
    376c:	00 1c       	adc	r0, r0
    376e:	38 f4       	brcc	.+14     	; 0x377e <__divmodsi4_exit>

00003770 <__divmodsi4_neg2>:
    3770:	50 95       	com	r21
    3772:	40 95       	com	r20
    3774:	30 95       	com	r19
    3776:	21 95       	neg	r18
    3778:	3f 4f       	sbci	r19, 0xFF	; 255
    377a:	4f 4f       	sbci	r20, 0xFF	; 255
    377c:	5f 4f       	sbci	r21, 0xFF	; 255

0000377e <__divmodsi4_exit>:
    377e:	08 95       	ret

00003780 <__divmodsi4_neg1>:
    3780:	f6 f7       	brtc	.-4      	; 0x377e <__divmodsi4_exit>
    3782:	90 95       	com	r25
    3784:	80 95       	com	r24
    3786:	70 95       	com	r23
    3788:	61 95       	neg	r22
    378a:	7f 4f       	sbci	r23, 0xFF	; 255
    378c:	8f 4f       	sbci	r24, 0xFF	; 255
    378e:	9f 4f       	sbci	r25, 0xFF	; 255
    3790:	08 95       	ret

00003792 <__prologue_saves__>:
    3792:	2f 92       	push	r2
    3794:	3f 92       	push	r3
    3796:	4f 92       	push	r4
    3798:	5f 92       	push	r5
    379a:	6f 92       	push	r6
    379c:	7f 92       	push	r7
    379e:	8f 92       	push	r8
    37a0:	9f 92       	push	r9
    37a2:	af 92       	push	r10
    37a4:	bf 92       	push	r11
    37a6:	cf 92       	push	r12
    37a8:	df 92       	push	r13
    37aa:	ef 92       	push	r14
    37ac:	ff 92       	push	r15
    37ae:	0f 93       	push	r16
    37b0:	1f 93       	push	r17
    37b2:	cf 93       	push	r28
    37b4:	df 93       	push	r29
    37b6:	cd b7       	in	r28, 0x3d	; 61
    37b8:	de b7       	in	r29, 0x3e	; 62
    37ba:	ca 1b       	sub	r28, r26
    37bc:	db 0b       	sbc	r29, r27
    37be:	0f b6       	in	r0, 0x3f	; 63
    37c0:	f8 94       	cli
    37c2:	de bf       	out	0x3e, r29	; 62
    37c4:	0f be       	out	0x3f, r0	; 63
    37c6:	cd bf       	out	0x3d, r28	; 61
    37c8:	09 94       	ijmp

000037ca <__epilogue_restores__>:
    37ca:	2a 88       	ldd	r2, Y+18	; 0x12
    37cc:	39 88       	ldd	r3, Y+17	; 0x11
    37ce:	48 88       	ldd	r4, Y+16	; 0x10
    37d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    37d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    37d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    37d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    37d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    37da:	aa 84       	ldd	r10, Y+10	; 0x0a
    37dc:	b9 84       	ldd	r11, Y+9	; 0x09
    37de:	c8 84       	ldd	r12, Y+8	; 0x08
    37e0:	df 80       	ldd	r13, Y+7	; 0x07
    37e2:	ee 80       	ldd	r14, Y+6	; 0x06
    37e4:	fd 80       	ldd	r15, Y+5	; 0x05
    37e6:	0c 81       	ldd	r16, Y+4	; 0x04
    37e8:	1b 81       	ldd	r17, Y+3	; 0x03
    37ea:	aa 81       	ldd	r26, Y+2	; 0x02
    37ec:	b9 81       	ldd	r27, Y+1	; 0x01
    37ee:	ce 0f       	add	r28, r30
    37f0:	d1 1d       	adc	r29, r1
    37f2:	0f b6       	in	r0, 0x3f	; 63
    37f4:	f8 94       	cli
    37f6:	de bf       	out	0x3e, r29	; 62
    37f8:	0f be       	out	0x3f, r0	; 63
    37fa:	cd bf       	out	0x3d, r28	; 61
    37fc:	ed 01       	movw	r28, r26
    37fe:	08 95       	ret

00003800 <_exit>:
    3800:	f8 94       	cli

00003802 <__stop_program>:
    3802:	ff cf       	rjmp	.-2      	; 0x3802 <__stop_program>
